{
  "0-intro/Anglar.ts": "export interface Anglar {\n  name: string;\n  rsvp: boolean;\n}\n",
  "0-intro/anglars.ts": "export const anglars = [\n  {\n    rsvp: true,\n    name: 'Sir Isaac Newton'\n  },\n  {\n    rsvp: true,\n    name: 'Louis Pasteur'\n  },\n  {\n    rsvp: true,\n    name: 'Galileo'\n  },\n  {\n    rsvp: true,\n    name: 'Marie Curie'\n  },\n  {\n    rsvp: true,\n    name: 'Albert Einstein'\n  },\n  {\n    rsvp: true,\n    name: 'Charles Darwin'\n  },\n  {\n    rsvp: true,\n    name: 'Otto Hahn'\n  },\n  {\n    rsvp: true,\n    name: 'Nikola Tesla'\n  },\n  {\n    rsvp: true,\n    name: 'James Clerk Maxwell'\n  },\n  {\n    rsvp: false,\n    name: 'Aristotle'\n  }\n];\n\n",
  "0-intro/Main.ts": "import {Meetup} from './solution/Meetup';\nimport {anglars} from './anglars';\n\n\n// This\nconst meetup = new Meetup(anglars);\ndocument.body.innerHTML = meetup.getRsvp().map((anglar) =>\n  `<h1>\n     ${anglar.name}\n  </h1>`).join('');\n",
  "0-intro/Meetup.ts": "// Interface\nimport {Anglar} from \"./Anglar\";\n",
  "0-intro/solution/Meetup.ts": "// Interface\nimport {Anglar} from \"../Anglar\";\n\nexport class Meetup {\n  constructor(public anglars: Anglar[]) {\n  }\n\n  getRsvp() {\n    return this.anglars.filter(anglar => anglar.rsvp);\n  }\n}\n\nexport function evalJs(str){}\n",
  "0-intro/Test.ts": "/**\n * This is a good sample sample of a codelab exercise.\n *\n * An exercise is just a folder with a bunch of files.\n *\n * the configuration is in app/codelab/codelab-config.ts.\n *\n *\n * There are\n *\n */\n\n/**\n * solution/ prefix is used to let the test typechecked.\n * It will be stripped during runtime, and the Meetup module\n * will be loaded.\n */\nimport {Meetup, evalJs} from './solution/Meetup';\n/**\n * In the test we get the access to the actual sourcecode\n * I'd try not to overuse it\n */\nimport {MeetupCode} from '../shared/code';\n\nconst anglars = [\n  {name: 'me', rsvp: true},\n  {name: 'notme', rsvp: false},\n];\n\ndescribe('Component', () => {\n  it(`Create a class called Meetup`, () => {\n    /**\n     * We can use evalJs to get into the scope of the user's file.\n     * Currently evalJs has to be manually added to the `before`\n     * section in the file config.\n     *\n     * I expert the primary use case for eval js would be to remind\n     * the user to export something.\n     *\n     * e.g. if the user created teh class, but haven't exported it this\n     * test will still pass.\n     */\n    chai.expect(typeof evalJs('Meetup')).equals('function');\n  });\n\n  it(`Export the class`, () => {\n    /**\n     * Require the class, assert it's a function (compile target is es5).\n     */\n    chai.expect(typeof Meetup).equals('function');\n  });\n\n  it('Add a constructor', () => {\n    /**\n     * Fancy: Require the actual source code, and search in it.\n     *\n     */\n    chai.expect(MeetupCode.indexOf('constructor') > -1, `The meetup class doesn't have constuctor`).is.true;\n  });\n\n  it('Make constructor take a parameter \"anglars\"', () => {\n    chai.expect(Meetup.length, 'Meetup constructor should take one parameter called \"anglars\"').equals(1);\n  });\n\n  it('This parameter should be public', () => {\n    const meetup = new Meetup(anglars);\n    chai.expect(meetup.anglars).equals(anglars);\n  });\n\n  it('Create new method \"getRsvp\"', () => {\n    chai.expect(typeof (new Meetup(anglars).getRsvp)).equals('function');\n  });\n\n  it(`Make sure retRsvp returns only people with 'rsvp' set to true.`, () => {\n    chai.expect(new Meetup(anglars).getRsvp().length).equals(1);\n  });\n\n  /*\n  xit(`Let's debug the app! You'll need this if something goes wrong.\n   * Open the dev tools in your browser\n   * Put in the new method add \"debugger;\"\n   * The app will stop, and you'll be able to inspect local variables.\n   * Get out using F8\n   * We can't really test this, so this test is marked as passed\n  `, () => {\n\n  });\n*/\n});\n\n",
  "1-bootstrap/0-component/AppComponent.ts": "import {Component} from '@angular/core';\n",
  "1-bootstrap/0-component/solution/AppComponent.ts": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '<h1>Hello {{title}}!</h1>'\n})\nexport class AppComponent {\n  title = 'CatTube';\n}\n\n// Pls ignore\nexport function evalJs(s: string): any {\n}\n",
  "1-bootstrap/0-component/Test.ts": "import {TestBed} from '@angular/core/testing';\n// Solution prefix will be stripped-out by the app\nimport {AppComponent, evalJs} from './solution/AppComponent';\nimport \"reflect-metadata\";\n\nlet metadata;\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n  try {\n    metadata = Reflect.getMetadata(\"annotations\", AppComponent);\n  } catch (e) {\n    // Do nothing, we have assertions below for this case\n  }\n\n});\n\ndescribe('Component', () => {\n  it('Create a class called AppComponent', () => {\n    chai.expect(typeof evalJs('AppComponent')).equals('function');\n  });\n  it('Export the created class', () => {\n    chai.expect(typeof AppComponent).equals('function');\n  });\n  it('Add a Component decorator for the class', () => {\n    chai.expect(metadata).is.not.undefined\n  });\n  it('Add selector to the component annotation config', () => {\n    chai.expect(metadata[0].selector).equals('my-app');\n  });\n\n  it('Add a template which would output <h1>Hello CatTube!</h1>', () => {\n    chai.expect(metadata[0].template).equals('<h1>Hello CatTube!</h1>');\n  });\n});\n\n",
  "1-bootstrap/1-module/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../0-component/solution/AppComponent';\n",
  "1-bootstrap/1-module/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../../0-component/solution/AppComponent';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "1-bootstrap/1-module/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppModule} from './solution/AppModule';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../0-component/solution/AppComponent';\nimport \"reflect-metadata\";\nlet metadata;\n\nbeforeEach(() => {\n\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: []});\n  try {\n    metadata = Reflect.getMetadata(\"annotations\", AppModule);\n  } catch (e) {\n    // Do nothing, we have assertions below for this case\n  }\n});\n\ndescribe('Component', () => {\n  it('Create a class called AppModule', () => {\n    chai.expect(typeof AppModule).equals('function');\n  });\n\n  // TODO: check if the module is exported\n  // See 1-bootstrap/0-component/Test.ts\n\n  it('Add a Module decorator for the class', () => {\n    chai.expect(metadata).is.not.undefined\n  });\n\n  it('Add imports to the module decorator config', () => {\n    // TODO: Figure out if this is actually needed\n    chai.expect(metadata[0].imports[0]).equals(BrowserModule);\n  });\n\n  it(`Add AppComponent that we created in the previous \n  exercise to the declarations section of the decorator (don't forget to import it)`, () => {\n    chai.expect(metadata[0].declarations[0]).equals(AppComponent);\n  });\n\n  it(`Add AppComponent that we created in the previous \n  exercise to the bootstrap section of the decorator (don't forget to import it)`, () => {\n    chai.expect(metadata[0].bootstrap[0]).equals(AppComponent);\n  });\n});\n\n",
  "1-bootstrap/2-bootstrap/Bootstrap.ts": "import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppModule} from '../1-module/solution/AppModule';\n\n// https://angular.io/docs/ts/latest/guide/cheatsheet.html\n",
  "1-bootstrap/2-bootstrap/solution/Bootstrap.ts": "import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppModule} from '../../1-module/solution/AppModule';\n\nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);\n",
  "1-bootstrap/2-bootstrap/Test.ts": "describe('Component', () => {\n  it('This should be pretty straightforard', () => {\n    chai.expect((window.parent.document.body.querySelector('iframe.preview') as HTMLIFrameElement).contentDocument.body.innerHTML).contains('Hello')\n  });\n});\n\n",
  "2-templates/0-header-input/app.html": "<div>\n</div>\n",
  "2-templates/0-header-input/AppComponent.ts": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  title = 'CatTube';\n}\n\n// Pls ignore\nexport function evalJs(s: string): any {\n\n}\n",
  "2-templates/0-header-input/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input type=\"text\" placeholder=\"video\">\n  <button>Search!</button>\n</div>\n",
  "2-templates/0-header-input/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from './AppComponent';\nimport 'initTestBed';\nimport {appCode} from '../../shared/code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`app.html: Add a <h1> header, put the 'title' property inside`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const header = fixture.nativeElement.querySelector('h1');\n    chai.expect(header, `Can't find any h1 headers`).is.not.null\n    chai.expect(header.innerHTML).contains('CatTube');\n    fixture.componentInstance.title = 'SomethingElse';\n    fixture.detectChanges();\n\n    const header2 = fixture.nativeElement.querySelector('h1');\n    chai.expect(header2.innerHTML, `Use the curly braces to put component title property in the header`).contains('SomethingElse');\n  });\n\n  it(`app.html: Add an <input> with a placeholder set to 'video' `, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const input = fixture.nativeElement.querySelector('input');\n    chai.expect(input, `Can't find any inputs`).is.not.null\n    chai.expect(input.placeholder, `Input placeholder should contain word 'video'`).contains('video');\n  });\n\n  it(`app.html: Add a <button> which says 'search'`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const button = fixture.nativeElement.querySelector('button');\n    chai.expect(button, `Can't find any buttons`).is.not.null\n    chai.expect(button.innerHTML.toLowerCase()).contains('search')\n  });\n\n\n});\n\n",
  "2-templates/1-no-videos/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input type=\"text\" placeholder=\"video\">\n  <button>Search!</button>\n</div>\n\n",
  "2-templates/1-no-videos/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\" (click)=\"search(i.value)\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n</div>\n",
  "2-templates/1-no-videos/solution/AppComponent.ts": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '<h1>Hello {{title}}!</h1>'\n})\nexport class AppComponent {\n  title = 'CatTube';\n  videos = [];\n\n  search(searchString) {\n  }\n}\n",
  "2-templates/1-no-videos/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from './solution/AppComponent';\nimport 'initTestBed';\nimport {appCode} from '../../shared/code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`AppComponent.ts: Add 'videos' property, set the value as empty array.`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.componentInstance.videos, `No videos property on the component`).is.not.undefined\n    chai.expect(fixture.componentInstance.videos, `Videos property on the component is not an array.`).is.an('array');\n  });\n\n  it(`AppComponent.ts: Add 'search' method on the component, and make it take SearchString as a parameter.`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.componentInstance.search, `Search should be a function`).is.a('function');\n    chai.expect(fixture.componentInstance.search.length, `Search should take one parameter`).equals(1);\n  });\n\n  it(`app.html: Add click handler to the button, call 'search' method and pass input value \n      (it shouldn't search yet, just take the parameter)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const input = fixture.nativeElement.querySelector('input');\n    const button = fixture.nativeElement.querySelector('button');\n\n\n    function testSearch(searchString) {\n      let passedValue = undefined;\n      let called = false;\n      fixture.componentInstance.search = function (value) {\n        called = true;\n        passedValue = value;\n      };\n\n      input.value = searchString;\n      button.click();\n      chai.expect(called, `Search function should be called when the search button is pressed`).equals(true);\n      chai.expect(passedValue, `Input value is not passed to the search function`).equals(input.value)\n    }\n\n    testSearch('Awesome kittens');\n    testSearch('Other value');\n  });\n\n  it(`app.html: Add a message saying 'No videos' which is displayed only when the videos array is empty`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.componentInstance.videos = [];\n    chai.expect(fixture.nativeElement.innerHTML.toLowerCase()).contains('no videos');\n\n    fixture.componentInstance.videos = [1];\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML.toLowerCase()).not.contains('no videos');\n  });\n\n\n});\n\n",
  "2-templates/2-all-videos/AppComponent.ts": "import {Component} from '@angular/core';\n\n/** Just added this! */\nconst FAKE_VIDEOS = [\n  {\n    title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\"\n  },\n  {\n    title: \"Kitten on the tree\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n];\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  title = \"CatTube\";\n  videos = [];\n\n  search(searchString: String) {\n  }\n}\n",
  "2-templates/2-all-videos/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\" (keydown.enter)=\"search(searchString.value)\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n  <div *ngFor=\"let video of videos\">\n    <h2>{{video.title}}</h2>\n    <img [src]=\"video.src\">\n  </div>\n</div>\n",
  "2-templates/2-all-videos/solution/AppComponent.ts": "import {Component} from '@angular/core';\n\n/** Just added this! */\nconst FAKE_VIDEOS = [\n  {\n    title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\"\n  },\n  {\n    title: \"Kitten on the tree\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n];\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos = [];\n  title = \"CatTube\";\n\n  search(value) {\n    this.videos = FAKE_VIDEOS.filter(video => video.title.indexOf(value) >= 0)\n  }\n\n  ngOnInit() {\n    this.search('');\n  }\n}\n",
  "2-templates/2-all-videos/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from './solution/AppComponent';\nimport 'initTestBed';\nimport {appCode} from '../../shared/code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`AppComponent.ts: When 'search' is called, filter videos with the title matching the search string and assign them to the \"videos\" property of the component. Use FAKE_VIDEOS as data`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have 2 kittens').equals(2);\n    fixture.componentInstance.search('cat');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have 1 cat').equals(1);\n    fixture.componentInstance.search('dog');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have no dogs').equals(0);\n  });\n\n  it(`app.html: Iterate over the videos, and display a title for each`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[0].title);\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[1].title);\n\n    fixture.componentInstance.search('cat');\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[0].title);\n  });\n\n  it(`app.html: Iterate over the videos, and display a thumbnail`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.componentInstance.search('itten');\n    fixture.detectChanges();\n    const images = fixture.nativeElement.querySelectorAll('img');\n    chai.expect(images.length).equals(2);\n    chai.expect(images[1].getAttribute('ng-reflect-src')).equals(fixture.componentInstance.videos[1].src);\n    chai.expect(images[0].getAttribute('ng-reflect-src')).equals(fixture.componentInstance.videos[0].src);\n  });\n\n  // it(`#Bonus app.html: Make hitting enter work in the input trigger the search`, () => {\n  //   //TODO\n  // });\n\n  it(`#Bonus app.html: When the component starts, search for empty string. `, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const images = fixture.nativeElement.querySelectorAll('img');\n    chai.expect(images.length).equals(3);\n  });\n});\n\n",
  "3-dependency-injection/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './solution/AppComponent';\nimport {VideoService} from \"./VideoService\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "3-dependency-injection/solution/AppComponent.ts": "import {Component} from '@angular/core';\nimport {VideoService} from \"./VideoService\";\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n\n\n  ngOnInit() {\n    this.search('');\n  }\n}\n",
  "3-dependency-injection/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"./VideoService\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "3-dependency-injection/solution/VideoService.ts": "import {Api} from '../../shared/Api';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class VideoService {\n  search(searchString: string) {\n    return Api.fetch(searchString)\n  }\n}\n",
  "3-dependency-injection/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from './solution/AppComponent';\nimport {VideoService} from './VideoService';\nimport {appCode, AppComponentCode} from '../shared/code';\nimport {AppModule} from \"./AppModule\";\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`VideoService.ts: Add @Injectable() decorator to the class.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"parameters\", VideoService);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata).not.undefined;\n  });\n  it(`Appmodule.ts: Add VideoService to the module providers`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].providers[0]).equals(VideoService);\n  });\n\n  it(`AppComponent.ts: Require videoService in the component`, () => {\n    chai.expect(AppComponent.length, `App component constructor doesn't take any parameters`).to.equal(1);\n    chai.expect(AppComponentCode).matches(/VideoService/)\n  });\n\n  it(`AppComponent.ts: return videoService.search(results instead of fake data)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    chai.expect(fixture.componentInstance.videos.length).to.equal(4);\n  });\n\n\n});\n\n",
  "3-dependency-injection/VideoService.ts": "import {Api} from './Api';\nimport {Injectable} from '@angular/core';\n\nexport class VideoService {\n  search(searchString: string) {\n    return Api.fetch(searchString)\n  }\n}\n",
  "4-component-tree/0-add-video-component/AppComponent.ts": "import {Component} from '@angular/core';\n// This is a fake app component, it's needed to bootstrap the video component with the aproppriate params.\nimport {Api} from '../../shared/Api';\n@Component({\n  selector: 'my-app',\n  template: '<my-video [video]=\"video\"></my-video>'\n})\nexport class AppComponent {\n  video = Api.fetch('')[0];\n}\n",
  "4-component-tree/0-add-video-component/index.html": "<my-video></my-video>\n",
  "4-component-tree/0-add-video-component/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<div>Description {{video.description}}</div>\n<div>Date {{video.date}}</div>\n",
  "4-component-tree/0-add-video-component/solution/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n}\n",
  "4-component-tree/0-add-video-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {VideoService} from '../../shared/VideoService';\nimport {videoCode} from '../../shared/code';\nimport {VideoComponent} from \"./solution/VideoComponent\";\nimport {Api} from '../../shared/Api'\nconst video = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [VideoComponent]\n  });\n  TestBed.overrideComponent(VideoComponent, {\n    set: {\n      template: videoCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  describe('Make sure metadata is in place', () => {\n    it(`VideoComponent.ts: Set a selector to be 'my-video'.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `VideoComponent's selector has to be 'my-video'.`).equals('my-video')\n    });\n    it(`VideoComponent.ts: Set the templateUrl to load appropriate html file.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].templateUrl, `VideoComponent's templateUrl should be set to 'video.html'`).equals('video.html')\n    });\n\n    it(`VideoComponent.ts: Add a video @Input()`, () => {\n      const metadata = Reflect.getMetadata(\"propMetadata\", VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have any @Input()'s`).is.not.undefined;\n      chai.expect(Object.keys(metadata).length, `VideoComponent doesn't have any @Input()'s`).equals(1);\n      chai.expect(metadata.video, `VideoComponent's @Input()' should be called video.`).is.not.undefined;\n    });\n  });\n\n\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(()=>{\n      fixture = TestBed.createComponent(VideoComponent);\n      fixture.componentInstance.video = video;\n      fixture.detectChanges();\n    });\n\n    it(`Video.html: Display video title`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video title`).contains(video.title);\n    });\n\n    it(`Video.html: Display video thumbnail`, () => {\n      const image = fixture.nativeElement.querySelector('img');\n      chai.expect(image, `Can't find the thumbnal`).is.not.null;\n      chai.expect(image.getAttribute('ng-reflect-src')).equals(video.src);\n    });\n\n    it(`Video.html: Display video description`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video description`).contains(video.description);\n    });\n\n    it(`Video.html: Display video likes`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video like`).contains(video.likes);\n    });\n\n    it(`Video.html: Display video date`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video date`).contains(video.date);\n    });\n\n    it(`Video.html: Display video views`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video description`).contains(video.views);\n    });\n  });\n\n});\n\n",
  "4-component-tree/0-add-video-component/video.html": "<!-- Write your code here -->\n",
  "4-component-tree/0-add-video-component/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({})\nexport class VideoComponent {\n}\n",
  "4-component-tree/1-use-video-component/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n  <div *ngFor=\"let video of videos\">\n    <h2>{{video.title}}</h2>\n    <img [src]=\"video.src\">\n  </div>\n</div>\n",
  "4-component-tree/1-use-video-component/AppComponent.ts": "import {Component} from '@angular/core';\nimport {VideoService} from \"../../shared/VideoService\";\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n    // Display all cats right away!\n    this.search('');\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n}\n",
  "4-component-tree/1-use-video-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../0-add-video-component/solution/VideoComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "4-component-tree/1-use-video-component/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n  <my-video *ngFor=\"let video of videos\" [video]=\"video\"></my-video>\n</div>\n",
  "4-component-tree/1-use-video-component/solution/AppComponent.ts": "import {Component, Inject} from '@angular/core';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoItem} from \"../../../shared/VideoItem\";\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos: VideoItem[] = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n}\n",
  "4-component-tree/1-use-video-component/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoComponent} from \"../../0-add-video-component/solution/VideoComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "4-component-tree/1-use-video-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from './solution/AppComponent';\nimport {VideoService} from '../../shared/VideoService';\nimport {appCode, videoCode} from '../../shared/code';\nimport {AppModule} from \"./AppModule\";\nimport {VideoComponent} from \"../0-add-video-component/VideoComponent\";\nimport {Api} from '../../shared/Api';\n\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent, VideoComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.overrideComponent(VideoComponent, {\n    set: {\n      template: videoCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add the VideoComponent to the AppModule declarations.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(VideoComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(AppComponent);\n  });\n\n  it(`app.html: Replace the video html with the video component`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.videos = Api.fetch('');\n    // TODO: if the element is added, but the video prop is not present, this test will fail with\n    // A useless message. Passing video prop should actually be tested in the next test, and this\n    // Ane should pass.\n    fixture.detectChanges();\n\n    const myVideos = fixture.nativeElement.querySelectorAll('my-video');\n    chai.expect(myVideos.length, `can't find any <my-video> elements in the app component`).is.greaterThan(0);\n    chai.expect(myVideos.length, `There should be one my-video element for each element`).equals(fixture.componentInstance.videos.length);\n  });\n\n  it(`app.html: Pass the video property to the component (don't forget the square braces)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n\n    fixture.componentInstance.videos = Api.fetch('');\n\n    fixture.detectChanges();\n\n    const video = fixture.nativeElement.querySelector('my-video');\n    chai.expect(video.getAttribute('ng-reflect-video')).equals('[object Object]');\n  });\n});\n\n",
  "4-z-custom-events/0-add-thumb-component/AppComponent.ts": "import {Component} from '@angular/core';\n// This is a fake app component, it's needed to bootstrap the video component with the aproppriate params.\nimport {Api} from '../../shared/Api';\n@Component({\n  selector: 'my-app',\n  template: '<my-video [video]=\"video\"></my-video>'\n})\nexport class AppComponent {\n  video = Api.fetch('')[0];\n}\n",
  "4-z-custom-events/0-add-thumb-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {WrapperComponent} from \"./WrapperComponent\";\nimport {ThumbsComponent} from \"./ThumbsComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [ThumbsComponent, WrapperComponent],\n  bootstrap: [WrapperComponent]\n})\nexport class AppModule {\n}\n",
  "4-z-custom-events/0-add-thumb-component/index.html": "<my-wrapper></my-wrapper>\n",
  "4-z-custom-events/0-add-thumb-component/solution/thumbs.html": "<button (click)=\"thumbsUp()\" class=\"thumbs-up\">Thumbs up</button>\n<button (click)=\"thumbsDown()\" class=\"thumbs-down\">Thumbs down</button>\n",
  "4-z-custom-events/0-add-thumb-component/solution/ThumbsComponent.ts": "import {Component, Output, EventEmitter} from '@angular/core';\n\n/**\n * Yes, TypeScript has enums!\n * There's no nice way to use them in the template though.\n */\nexport enum Thumbs {\n  UP,\n  DOWN\n}\n\n@Component(\n  {\n    selector: 'my-thumbs',\n    templateUrl: 'thumbs.html'\n  }\n)\nexport class ThumbsComponent {\n  @Output() onThumbs: EventEmitter<Thumbs> = new EventEmitter<Thumbs>();\n\n  thumbsUp() {\n    this.onThumbs.emit(Thumbs.UP)\n  }\n\n  thumbsDown() {\n    this.onThumbs.emit(Thumbs.DOWN)\n  }\n\n}\n",
  "4-z-custom-events/0-add-thumb-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {thumbsCode} from '../../shared/code';\nimport {Api} from '../../shared/Api'\nimport {ThumbsComponent, Thumbs} from \"./ThumbsComponent\";\nconst thumbs = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [ThumbsComponent]\n  });\n  TestBed.overrideComponent(ThumbsComponent, {\n    set: {\n      template: thumbsCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ThumbsComponent);\n      fixture.detectChanges();\n    });\n\n    it(`thumbs.html: Add a button with a 'thumbs-up' class.`, () => {\n      chai.expect(fixture.nativeElement.querySelector('.thumbs-up'), `can't find thumbs up button`).to.be.ok\n    });\n\n    it(`thumbs.html: Add a button with a 'thumbs-down' class.`, () => {\n      chai.expect(fixture.nativeElement.querySelector('.thumbs-up'), `can't find thumbs up button`).to.be.ok\n    });\n  });\n\n  describe('Make sure things work', () => {\n    it(`ThumbsComponent.ts: Set a selector to be 'my-thumbs'.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `ThumbsComponent's selector has to be 'my-thumbs'.`).equals('my-thumbs')\n    });\n\n    it(`ThumbsComponent.ts: Set the templateUrl to load appropriate html file.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].templateUrl, `ThumbsComponent's templateUrl should be set to 'thumbs.html'`).equals('thumbs.html')\n    });\n\n    it(`ThumbsComponent.ts: Add a @Output() called 'onThumbs'`, () => {\n      const metadata = Reflect.getMetadata(\"propMetadata\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have any @Outputs()'s`).is.not.undefined;\n      chai.expect(Object.keys(metadata).length, `ThumbsComponent doesn't have any @Outputs()'s`).equals(1);\n      chai.expect(metadata.onThumbs, `ThumbsComponent's @Outputs()' should be called onThumbs.`).is.not.undefined;\n    });\n  });\n\n  describe('Make sure things work', () => {\n    it(`ThumbsComponent.ts, thumbs.html: Set a selector to be 'my-thumbs'.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `ThumbsComponent's selector has to be 'my-thumbs'.`).equals('my-thumbs')\n    });\n  });\n\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ThumbsComponent);\n      fixture.detectChanges();\n    });\n\n    it(`thumbs.html: Make the 'thumbs-up' button emit the onThumbs event with the correct thums. Use the ENUM!`, () => {\n      let thumbs;\n      fixture.componentInstance.onThumbs.subscribe((event) => {\n        thumbs = event;\n      });\n      chai.expect(thumbs, `OnThumbs was called without pressing the button`).to.be.not.ok\n      fixture.nativeElement.querySelector('.thumbs-up').click();\n      chai.expect(thumbs, `OnThumbs was not called when pressing the button with the 'thumbs-up' class.`).to.equal(Thumbs.UP);\n    });\n\n    it(`thumbs.html: Make the 'thumbs-down' button emit the onThumbs event with the correct thums. Use the ENUM!`, () => {\n      let thumbs;\n      fixture.componentInstance.onThumbs.subscribe((event) => {\n        thumbs = event;\n      });\n      chai.expect(thumbs, `OnThumbs was called without pressing the button`).to.be.not.ok\n      fixture.nativeElement.querySelector('.thumbs-down').click();\n      chai.expect(thumbs, `OnThumbs was not called when pressing the button with the 'thumbs-down' class.`).to.equal(Thumbs.DOWN);\n    });\n\n  });\n\n});\n\n",
  "4-z-custom-events/0-add-thumb-component/thumbs.html": "<!-- Write your code here -->\n",
  "4-z-custom-events/0-add-thumb-component/ThumbsComponent.ts": "import {Component, Output, EventEmitter} from '@angular/core';\n\n/**\n * Yes, TypeScript has enums!\n * There's no nice way to use them in the template though.\n */\nexport enum Thumbs {\n  UP,\n  DOWN\n}\n\n\nexport class ThumbsComponent {\n}\n",
  "4-z-custom-events/0-add-thumb-component/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({})\nexport class VideoComponent {\n}\n",
  "4-z-custom-events/0-add-thumb-component/WrapperComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-wrapper',\n  // Just using template here to avoid extra files.\n  template: `\n    <my-thumbs></my-thumbs> \n  `\n})\nexport class WrapperComponent {\n\n}\n",
  "4-z-custom-events/1-use-thumb-component/AppComponent.ts": "import {Component, Inject} from '@angular/core';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos: VideoItem[] = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n}\n",
  "4-z-custom-events/1-use-thumb-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../../4-component-tree/0-add-video-component/solution/VideoComponent\";\nimport {ThumbsComponent} from \"../0-add-thumb-component/solution/ThumbsComponent\";\n\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "4-z-custom-events/1-use-thumb-component/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<my-thumbs (onThumbs)=\"onThumbs($event)\"></my-thumbs>\n<div>Description {{video.description}}</div>\n<div>Date {{video.date}}</div>\n\n",
  "4-z-custom-events/1-use-thumb-component/solution/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\nimport {Thumbs} from \"../0-add-thumb-component/ThumbsComponent\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n\n  onThumbs(thumbs: Thumbs){\n    if(thumbs === Thumbs.UP){\n      this.video.likes++;\n    }\n    if(thumbs === Thumbs.DOWN){\n      this.video.likes--;\n    }\n  }\n}\n",
  "4-z-custom-events/1-use-thumb-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\n\nimport {videoCode, thumbsCode} from '../../shared/code';\nimport {AppModule} from \"./AppModule\";\n\nimport {Api} from '../../shared/Api';\n\nimport {ThumbsComponent} from \"../../4-z-custom-events/0-add-thumb-component/ThumbsComponent\";\nimport {VideoComponent} from \"../../4-component-tree/0-add-video-component/solution/VideoComponent\";\n\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [VideoComponent, ThumbsComponent]\n  });\n  TestBed.overrideComponent(VideoComponent, {\n    set: {\n      template: videoCode\n    }\n  });\n  TestBed.overrideComponent(ThumbsComponent, {\n    set: {\n      template: thumbsCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add ThumbsComponent to the AppModule declarations.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Thumbs component not found`).contains(ThumbsComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(VideoComponent);\n  });\n\n  it(`video.html: Use the thumbs component`, () => {\n    let fixture = TestBed.createComponent(VideoComponent);\n    fixture.componentInstance.video = Api.fetch('')[0];\n    fixture.detectChanges();\n    const likes = fixture.componentInstance.video.likes;\n    fixture.nativeElement.querySelector('.thumbs-up').click();\n    chai.expect(fixture.componentInstance.video.likes).equals(likes + 1);\n  });\n\n});\n\n",
  "4-z-custom-events/1-use-thumb-component/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<div>Description {{video.description}}</div>\n<div>Date {{video.date}}</div>\n\n",
  "4-z-custom-events/1-use-thumb-component/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\nimport {Thumbs} from \"../0-add-thumb-component/ThumbsComponent\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n\n\n\n}\n",
  "5-content-projection/0-add-toggle-panel-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\nimport {WrapperComponent} from \"./WrapperComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [TogglePanelComponent, WrapperComponent],\n  bootstrap: [WrapperComponent]\n})\nexport class AppModule {\n}\n",
  "5-content-projection/0-add-toggle-panel-component/index.html": "<my-wrapper></my-wrapper>\n",
  "5-content-projection/0-add-toggle-panel-component/solution/togglepanel.html": "<div *ngIf=\"showDescription\">\n  <ng-content select=\".description\"></ng-content>\n  <button (click)=\"showDescription=false\">Show meta</button>\n</div>\n<div *ngIf=\"!showDescription\">\n  <ng-content select=\".extra\"></ng-content>\n  <button (click)=\"showDescription=true\">Show description</button>\n</div>\n",
  "5-content-projection/0-add-toggle-panel-component/solution/TogglePanelComponent.ts": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'my-toggle-panel',\n  templateUrl: 'togglepanel.html'\n})\nexport class TogglePanelComponent {\n  showDescription = true;\n}\n",
  "5-content-projection/0-add-toggle-panel-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport 'initTestBed';\nimport {togglepanelCode, wrapperCode} from '../../shared/code'\nimport {TogglePanelComponent} from \"./solution/TogglePanelComponent\";\nimport {WrapperComponent} from \"./WrapperComponent\";\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [TogglePanelComponent, WrapperComponent]\n  });\n  TestBed.overrideComponent(TogglePanelComponent, {\n    set: {\n      template: togglepanelCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Content projection', () => {\n  it(`TogglePanelComponent.ts: We added the template and the selector for you, enjoy!`, () => {\n  });\n\n  it(`TogglePanelComponent.ts: Add a boolean property to the component. The property can have any name, and must have a default value.`, () => {\n    let fixture = TestBed.createComponent(TogglePanelComponent);\n    // the intent is to let them come up with the property name, so we assume there will be one.\n    const props = Object.keys(fixture.componentInstance);\n\n    chai.expect(props.length, `A property with a default value was not declared on the component.`).is.not.equal(0);\n    chai.expect(props.length, `Too many properties were declared.`).is.not.greaterThan(1);\n    const prop = props[0];\n    chai.expect(fixture.componentInstance[prop], `Property \"${prop}\" is not of type boolean`).is.a('boolean');\n    chai.expect(fixture.componentInstance[prop], `Property \"${prop}\" must have a default value`).is.not.undefined;\n  });\n\n  it(`togglepanel.html: Use content projection to only display the content with the selector .description by default.`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be displayed`).not.null\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be hidden`).is.null\n  });\n\n  it(`togglepanel.html: Add a button to show extra information`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    let buttons = fixture.nativeElement.querySelectorAll('button');\n    chai.expect(buttons.length, `Should show exactly one button`).to.equals(1);\n  });\n\n  it(`togglepanel.html: When the button is pressed, switch the flag and only display the content with the '.extra' selector.`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    let button = fixture.nativeElement.querySelector('button');\n    button.click();\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be hidden`).is.null\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be displayed`).not.null\n  });\n\n  it(`togglepanel.html: Add a button to come back to the description`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be displayed`).not.null\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be hidden`).is.null\n  });\n});\n\n",
  "5-content-projection/0-add-toggle-panel-component/togglepanel.html": "<!-- add your code here -->\n",
  "5-content-projection/0-add-toggle-panel-component/TogglePanelComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-toggle-panel',\n  templateUrl: 'togglepanel.html'\n})\nexport class TogglePanelComponent {\n\n}\n",
  "5-content-projection/0-add-toggle-panel-component/WrapperComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-wrapper',\n  // Just using template here to avoid extra files.\n  template: `\n    <my-toggle-panel>\n      <div class=\"description\">Either show me</div>\n      <div class=\"extra\">Or show me</div>\n    </my-toggle-panel>\n`\n})\nexport class WrapperComponent {\n\n}\n",
  "5-content-projection/1-use-toggle-panel/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../0-add-video-component/solution/VideoComponent\";\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "5-content-projection/1-use-toggle-panel/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoComponent} from \"../VideoComponent\";\nimport {TogglePanelComponent} from \"../../0-add-toggle-panel-component/TogglePanelComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "5-content-projection/1-use-toggle-panel/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video.views}}</div>\n    <div class=\"likes\">Likes: {{video.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date}}</div>\n",
  "5-content-projection/1-use-toggle-panel/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../../4-component-tree/0-add-video-component/AppComponent';\nimport {appCode, videoCode, togglepanelCode} from '../../shared/code';\nimport {AppModule} from \"./solution/AppModule\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {VideoService} from \"../../shared/VideoService\";\nimport {TogglePanelComponent} from \"../0-add-toggle-panel-component/TogglePanelComponent\";\nimport {Api} from '../../shared/Api'\nconst video = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: appCode}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglepanelCode}});\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add the TogglePanelComponent to the AppModule declarations.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Keep the video component`).contains(VideoComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(AppComponent);\n    chai.expect(metadata[0].declarations, `Add TogglePanelComponent`).contains(TogglePanelComponent);\n  });\n\n  it(`video.html: Use the TogglePanel component in the template`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n    chai.expect(panel).is.not.null\n  });\n\n\n  it(`video.html: Add .description as TogglePanel's content`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n\n    chai.expect(panel.querySelector('.description')).is.not.null\n    chai.expect(panel.querySelector('.extra')).is.null\n\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should display description text.`).contains(video.description);\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should not display likes `).not.contains(video.likes);\n  });\n\n  it(`video.html: Add .extra as TogglePanel's content`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n\n    panel.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(panel.querySelector('.description')).is.null.null\n    chai.expect(panel.querySelector('.extra')).is.not.null\n\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should not description text.`).not.contains(video.description);\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should display likes`).contains(video.likes);\n\n  });\n});\n\n",
  "5-content-projection/1-use-toggle-panel/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n}\n",
  "6-children/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {VideoService} from \"../shared/VideoService\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {TogglePanelComponent} from \"../shared/TogglePanelComponent\";\nimport {ContextService} from \"./ContextService\";\nimport {ContextComponent} from \"./ContextComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent],\n  providers: [VideoService, ContextService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "6-children/context.html": "{{text}}\n",
  "6-children/ContextComponent.ts": "import {Component} from '@angular/core';\nimport {ContextService} from \"./ContextService\";\nimport {VideoComponent} from \"./VideoComponent\";\n\n@Component({\n  selector: 'my-ad',\n  templateUrl: 'context.html'\n})\nexport class ContextComponent {\n  text: string;\n}\n",
  "6-children/ContextService.ts": "export class ContextService {\n  getAdText(description) {\n    // Super secret algorithm, please don't share outside of this course.\n    return description.indexOf('music') >= 0 ?\n      'Buy awesome speakers on our web site.' :\n      'Check out our web site';\n  }\n}\n",
  "6-children/index.html": "<my-app></my-app>\n",
  "6-children/solution/ContextComponent.ts": "import {Component} from '@angular/core';\nimport {ContextService} from \"../ContextService\";\nimport {VideoComponent} from \"../VideoComponent\";\n\n\n@Component({\n  selector: 'my-ad',\n  templateUrl: 'context.html'\n})\nexport class ContextComponent {\n  text: string;\n\n  constructor(public parent: VideoComponent, private  service: ContextService) {\n  }\n\n  ngOnInit() {\n    this.text = this.service.getAdText(this.parent.video.description);\n  }\n}\n",
  "6-children/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video?.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video?.views}}</div>\n    <div class=\"likes\">Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date}}</div>\n<my-ad></my-ad>\n\n\n",
  "6-children/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {appCode, videoCode, togglepanelCode, contextCode} from '../shared/code';\nimport {AppModule} from \"./AppModule\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {VideoService} from \"../shared/VideoService\";\nimport {TogglePanelComponent} from \"../shared/TogglePanelComponent\";\nimport {ContextComponent} from \"./solution/ContextComponent\";\nimport {ContextService} from \"./ContextService\";\nimport {Api} from \"../shared/Api\";\n\nfunction objectValues(object) {\n  return Object.keys(object).reduce((result, key) => {\n    result.push(object[key]);\n    return result;\n  }, []);\n}\n\nfunction objectFindPropOfType(object, Type) {\n  return Object.keys(object).reduce((prop, key) => {\n    if (prop) return prop;\n    if (object[key] instanceof Type) return key;\n  }, undefined);\n}\n\nfunction objectHasAn(object, Type) {\n  return objectValues(object).some(val => val instanceof Type)\n}\n\nconst sampleVideo = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService, ContextService, /* that's a hack, to provide parent component */ VideoComponent],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: appCode}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglepanelCode}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: contextCode}});\n  TestBed.compileComponents();\n});\n\ndescribe('Children', () => {\n  it(`ContextComponent: Inject the ContextService into the constructor and store it as a property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(objectHasAn(fixture.componentInstance, ContextService)).to.be.true;\n  });\n\n  it(`ContextComponent: Inject the parent component (VideoComponent) into the constructor and store it as a property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(objectHasAn(fixture.componentInstance, VideoComponent)).to.be.true;\n  });\n\n  it(`ContextComponent: Add an ngOnInit hook`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(fixture.componentInstance.ngOnInit).is.a('function');\n  });\n\n  it(`ContextComponent: Call 'getAdText' on the service, and pass it the video 'description' provided by the injected video component. Assign the result to the declared text property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    let componentInstance = fixture.componentInstance;\n\n    let vcProp = objectFindPropOfType(componentInstance, VideoComponent);\n    chai.expect(vcProp, `\"VideoComponent\" was not injected.`).to.not.be.undefined;\n\n    componentInstance[vcProp].video = sampleVideo;\n    chai.expect(componentInstance.ngOnInit).is.a('function');\n    componentInstance[vcProp].video.description = 'music';\n    componentInstance.ngOnInit();\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).to.contain('speakers');\n\n    componentInstance[vcProp].video.description = 'banana';\n    componentInstance.ngOnInit();\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).to.contain('Check out our web site');\n  });\n\n  it(`AppModule: Add the ContextComponent to the AppModule declarations (We did this for you).`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(ContextComponent);\n  });\n\n  it(`video.html: Actually display the ad.`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    // TODO: Actually write a test\n    //chai.expect(fixture.nativeElement.querySelector('my-ad')).to.be.ok\n  });\n});\n\n",
  "6-children/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video?.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video?.views}}</div>\n    <div class=\"likes\">Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date}}</div>\n<my-ad></my-ad>\n\n\n",
  "6-children/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../shared/VideoItem\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n}\n",
  "7-pipes/0-create-pipe/FuzzyPipe.ts": "import {Pipe, PipeTransform} from '@angular/core';\n\n",
  "7-pipes/0-create-pipe/solution/FuzzyPipe.ts": "import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({name: 'fuzzy'})\nexport class FuzzyPipe implements PipeTransform {\n  transform(value: string) {\n    let date = new Date(value);\n    let dateNow = new Date();\n\n    let millisecondsDifference = dateNow.getTime() - date.getTime();\n    let differenceDays = Math.floor(millisecondsDifference / (1000 * 3600 * 24));\n    let differenceYears = Math.floor(differenceDays / 365);\n\n    if (differenceDays < 365) {\n      return differenceDays + ' days';\n    }\n    return differenceYears + ' years ago';\n  }\n}\n\n// Please ignore\nexport function evalJs(string) {\n\n}\n",
  "7-pipes/0-create-pipe/Test.ts": "import {FuzzyPipe, evalJs} from './solution/FuzzyPipe';\nimport \"reflect-metadata\";\n\nlet metadata;\nbeforeEach(() => {\n  try {\n    metadata = Reflect.getMetadata(\"annotations\", FuzzyPipe);\n  } catch (e) {\n\n  }\n});\n\nconst d = new Date();\nd.setDate(d.getDate() - 2);\nconst formattedDate = d.toISOString().slice(0, 10);\n\n\ndescribe('Pipe', () => {\n  it('Create a class called FuzzyPipe', () => {\n    chai.expect(typeof evalJs('FuzzyPipe')).equals('function');\n  });\n\n  it('Export it', () => {\n    chai.expect(typeof FuzzyPipe).equals('function');\n  });\n\n  it('Add a @Pipe() decorator', () => {\n    chai.expect(metadata).is.an('array')\n  });\n\n  it('Set the name to fuzzy', () => {\n    chai.expect(metadata[0].name).equals('fuzzy');\n  });\n\n  it(`Make it return '2 days ago for '${formattedDate}'`, () => {\n    let fuzzyTime = new FuzzyPipe();\n    chai.expect(fuzzyTime.transform(d.toISOString().slice(0, 10)).toLowerCase()).equals('2 days');\n  });\n});\n\n",
  "7-pipes/1-use-pipe/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../../6-children/VideoComponent\";\nimport {TogglePanelComponent} from \"../../shared/TogglePanelComponent\";\nimport {ContextService} from \"../../6-children/ContextService\";\nimport {ContextComponent} from \"../../6-children/ContextComponent\";\nimport {FuzzyPipe} from \"../0-create-pipe/solution/FuzzyPipe\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent],\n  providers: [VideoService, ContextService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "7-pipes/1-use-pipe/FuzzyPipe.ts": "import {Pipe, PipeTransform} from '@angular/core';\n\n",
  "7-pipes/1-use-pipe/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoComponent} from \"../../../6-children/VideoComponent\";\nimport {TogglePanelComponent} from \"../../../shared/TogglePanelComponent\";\nimport {ContextService} from \"../../../6-children/ContextService\";\nimport {ContextComponent} from \"../../../6-children/ContextComponent\";\nimport {FuzzyPipe} from \"../../0-create-pipe/solution/FuzzyPipe\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent, FuzzyPipe],\n  providers: [VideoService, ContextService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "7-pipes/1-use-pipe/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video?.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video?.views}}</div>\n    <div class=\"likes\">Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date | fuzzy}}</div>\n<my-ad></my-ad>\n",
  "7-pipes/1-use-pipe/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {appCode, videoCode, togglepanelCode, contextCode} from '../../shared/code';\nimport {AppModule} from \"./AppModule\";\nimport {VideoComponent} from \"../../6-children/VideoComponent\";\nimport {VideoService} from \"../../shared/VideoService\";\nimport {TogglePanelComponent} from \"../../shared/TogglePanelComponent\";\nimport {ContextComponent} from \"../../6-children/solution/ContextComponent\";\nimport {ContextService} from \"../../6-children/ContextService\";\nimport {Api} from \"../../shared/Api\";\nimport {FuzzyPipe} from \"../0-create-pipe/solution/FuzzyPipe\";\n\nfunction objectValues(object) {\n  return Object.keys(object).reduce((result, key) => {\n    result.push(object[key]);\n    return result;\n  }, []);\n}\nconst sampleVideo = Api.fetch('')[0];\n\nfunction objectHasAn(object, Type) {\n  return objectValues(object).some(val => val instanceof Type)\n}\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService, ContextService, /* that's a hack, to provide parent component */ VideoComponent],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent, FuzzyPipe]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: appCode}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglepanelCode}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: contextCode}});\n  TestBed.compileComponents();\n});\nfunction sampleFuzzy(value) {\n  let date = new Date(value);\n  let dateNow = new Date();\n  let millisecondsDifference = dateNow.getTime() - date.getTime();\n  let differenceDays = Math.floor(millisecondsDifference / (1000 * 3600 * 24));\n  return differenceDays + ' days';\n}\n\ndescribe('Pipes', () => {\n\n\n  it(`AppModule: Add the FuzzyPipe to the AppModule declarations`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(FuzzyPipe);\n  });\n\n  it(`video.html: Use the pipe on the date.`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML).contains(sampleFuzzy(sampleVideo.date));\n  });\n});\n\n",
  "8-tests/0-test-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {appCode, videoCode, togglepanelCode, contextCode} from '../../shared/code';\nimport {VideoComponent} from \"../../6-children/VideoComponent\";\nimport {VideoService} from \"../../3-dependency-injection/solution/VideoService\";\nimport {TogglePanelComponent} from \"../../shared/TogglePanelComponent\";\nimport {ContextComponent} from \"../../6-children/solution/ContextComponent\";\n\n\n\nbeforeEach(() => {\n  // In Jasmine this is done automatically.\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [VideoComponent, TogglePanelComponent, ContextComponent]\n  });\n\n\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: contextCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglepanelCode}});\n  TestBed.compileComponents();\n});\n\nconst video = {\n  title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\",\n  description: \"todo\",\n  views: 100,\n  likes: 20,\n  date: '2016-11-25'\n};\n\ndescribe('Video', () => {\n  it('Video', () => {\n    const fixture = TestBed.createComponent(VideoComponent);\n    fixture.componentInstance.video = video;\n    fixture.detectChanges();\n\n    chai.expect(fixture.nativeElement.innerHTML).to.contain(`I will fail, because I don't contain what I should`)\n  });\n});\n\n",
  "shared/Api.ts": "import {VideoItem} from \"./VideoItem\";\n\nlet FAKE_VIDEOS = [\n  {\n    title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-11-25'\n  },\n  {\n    title: \"Kitten on the tree\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-11-21'\n  }, {\n    title: \"More kitten\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-10-02'\n\n  }, {\n    title: \"Another kitten\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-09-02'\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n];\n\nexport const Api = {\n  fetch(searchString: string): Array<VideoItem> {\n    return FAKE_VIDEOS.filter((video) =>\n      video.title.indexOf(searchString) >= 0\n    );\n  }\n};\n",
  "shared/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [],\n  providers: [],\n  bootstrap: []\n})\nexport class AppModule {\n}\n",
  "shared/Bootstrap.ts": "import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {ResourceLoader} from '@angular/compiler';\nimport * as code from './code';\nimport {AppModule} from \"./AppModule\";\n\n\nclass MyResourceLoader extends ResourceLoader {\n  get(url: string): Promise<string> {\n    let template = code[url.replace('.html', 'Code')];\n    if (!template) {\n      debugger;\n    }\n    return Promise.resolve(template);\n  };\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {\n  providers: [\n    {provide: ResourceLoader, useClass: MyResourceLoader}\n  ]\n});\n",
  "shared/code.ts": "export const videoCode = '';\nexport const thumbsCode = '';\nexport const appCode = '';\nexport const AppComponentCode = '';\nexport const MeetupCode = '';\nexport const togglepanelCode = '';\nexport const wrapperCode = '';\nexport const contextCode = '';\n",
  "shared/index.html": "<h1>HUITA</h1>\n",
  "shared/TogglePanelComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-toggle-panel',\n  templateUrl: 'togglepanel.html'\n})\nexport class TogglePanelComponent {\n  showDescription = true;\n}\n",
  "shared/VideoItem.ts": "export interface VideoItem {\n  title: string,\n  src: string,\n  description: string,\n  views: number\n  likes: number,\n  date: string\n}\n",
  "shared/VideoService.ts": "import {Api} from './Api';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class VideoService {\n  search(searchString: string) {\n    return Api.fetch(searchString)\n  }\n}\n"
}