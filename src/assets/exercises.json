{
  "0-intro/Anglar.ts": "export interface Anglar {\n  name: string;\n  rsvp: boolean;\n}\n",
  "0-intro/anglars.ts": "export const anglars = [\n  {\n    rsvp: true,\n    name: 'Sir Isaac Newton'\n  },\n  {\n    rsvp: true,\n    name: 'Louis Pasteur'\n  },\n  {\n    rsvp: true,\n    name: 'Galileo'\n  },\n  {\n    rsvp: true,\n    name: 'Marie Curie'\n  },\n  {\n    rsvp: true,\n    name: 'Albert Einstein'\n  },\n  {\n    rsvp: true,\n    name: 'Charles Darwin'\n  },\n  {\n    rsvp: true,\n    name: 'Otto Hahn'\n  },\n  {\n    rsvp: true,\n    name: 'Nikola Tesla'\n  },\n  {\n    rsvp: true,\n    name: 'James Clerk Maxwell'\n  },\n  {\n    rsvp: false,\n    name: 'Aristotle'\n  }\n];\n\n",
  "0-intro/Main.ts": "import {Meetup} from './solution/Meetup';\nimport {anglars} from './anglars';\n\n\n// This\nconst meetup = new Meetup(anglars);\ndocument.body.innerHTML = meetup.getRsvp().map((anglar) =>\n  `<h1>\n     ${anglar.name}\n  </h1>`).join('');\n",
  "0-intro/Meetup.ts": "interface Anglar {\n  name: string;\n  rsvp: boolean;\n}\n\n\n",
  "0-intro/solution/Meetup.ts": "// Interface\nimport {Anglar} from \"../Anglar\";\n\nexport class Meetup {\n  constructor(public anglars: Anglar[]) {\n  }\n\n  getRsvp() {\n    return this.anglars.filter(anglar => anglar.rsvp);\n  }\n}\n\nexport function evalJs(str){}\n",
  "0-intro/Test.ts": "/**\n * This is a good sample sample of a codelab exercise.\n *\n * An exercise is just a folder with a bunch of files.\n *\n * the configuration is in app/codelab/codelab-config.ts.\n *\n *\n * There are\n *\n */\n\n/**\n * solution/ prefix is used to let the test typechecked.\n * It will be stripped during runtime, and the Meetup module\n * will be loaded.\n */\nimport {Meetup, evalJs} from './Meetup';\n/**\n * In the test we get the access to the actual sourcecode\n * I'd try not to overuse it\n */\nimport {MeetupCode} from './code';\n\nconst guests = [\n  {name: 'me', rsvp: true},\n  {name: 'notme', rsvp: false},\n];\n\ndescribe('Component', () => {\n  it(`Create a class called Meetup`, () => {\n    /**\n     * We can use evalJs to get into the scope of the user's file.\n     * Currently evalJs has to be manually added to the `before`\n     * section in the file config.\n     *\n     * I expert the primary use case for eval js would be to remind\n     * the user to export something.\n     *\n     * e.g. if the user created teh class, but haven't exported it this\n     * test will still pass.\n     */\n    chai.expect(typeof evalJs('Meetup')).equals('function');\n  });\n\n  it(`Export the class`, () => {\n    /**\n     * Require the class, assert it's a function (compile target is es5).\n     */\n    chai.expect(typeof Meetup).equals('function');\n  });\n\n  it('Add a constructor', () => {\n    /**\n     * Fancy: Require the actual source code, and search in it.\n     *\n     */\n    chai.expect(MeetupCode.indexOf('constructor') > -1, `The meetup class doesn't have constuctor`).is.true;\n  });\n\n  it('Make constructor take a parameter \"guests\"', () => {\n    chai.expect(Meetup.length, 'Meetup constructor should take one parameter called \"guests\"').equals(1);\n  });\n\n  it('This parameter should be public', () => {\n    const meetup = new Meetup(guests);\n    chai.expect(meetup.guests).equals(guests);\n  });\n\n  it('Create new method \"getRsvp\"', () => {\n    chai.expect(typeof (new Meetup(guests).getRsvp)).equals('function');\n  });\n\n  it('Modify getRsvp to filter the guests array and only return guests with rsvp set to true.', () => {\n    chai.expect(new Meetup(guests).getRsvp().length).equals(1);\n  });\n\n  /*\n  xit(`Let's debug the app! You'll need this if something goes wrong.\n   * Open the dev tools in your browser\n   * Put in the new method add \"debugger;\"\n   * The app will stop, and you'll be able to inspect local variables.\n   * Get out using F8\n   * We can't really test this, so this test is marked as passed\n  `, () => {\n\n  });\n*/\n});\n\n",
  "1-bootstrap/0-component/AppComponent.ts": "import {Component} from '@angular/core';\n",
  "1-bootstrap/0-component/solution/AppComponent.ts": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '<h1>Hello {{title}}!</h1>'\n})\nexport class AppComponent {\n  title = 'CatTube';\n}\n\n// Pls ignore\nexport function evalJs(s: string): any {\n}\n",
  "1-bootstrap/0-component/Test.ts": "import {TestBed} from '@angular/core/testing';\n// Solution prefix will be stripped-out by the app\nimport {AppComponent, evalJs} from './AppComponent';\nimport \"reflect-metadata\";\n\nlet metadata;\nbeforeEach(() => {\n  try {\n    TestBed.resetTestingModule();\n    TestBed.configureTestingModule({declarations: [AppComponent]});\n    metadata = Reflect.getMetadata(\"annotations\", AppComponent);\n  } catch (e) {\n    // Do nothing, we have assertions below for this case\n  }\n\n});\n\ndescribe('Component', () => {\n  it('Create a class called AppComponent', () => {\n    chai.expect(typeof evalJs('AppComponent')).equals('function');\n  });\n  it('Export the created class', () => {\n    chai.expect(typeof AppComponent).equals('function');\n  });\n  it('Add a Component decorator for the class', () => {\n    chai.expect(metadata).is.not.undefined\n  });\n  it('Add selector to the component annotation config', () => {\n    chai.expect(metadata[0].selector).equals('my-app');\n  });\n\n  it('Add a template which would output <h1>Hello CatTube!</h1>', () => {\n    chai.expect(metadata[0].template).equals('<h1>Hello CatTube!</h1>');\n  });\n});\n\n",
  "1-bootstrap/1-module/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../0-component/solution/AppComponent';\n",
  "1-bootstrap/1-module/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../../0-component/solution/AppComponent';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "1-bootstrap/1-module/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppModule} from './AppModule';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport \"reflect-metadata\";\nlet metadata;\n\nbeforeEach(() => {\n\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: []});\n  try {\n    metadata = Reflect.getMetadata(\"annotations\", AppModule);\n  } catch (e) {\n    // Do nothing, we have assertions below for this case\n  }\n});\n\ndescribe('Component', () => {\n  it('Create a class called AppModule', () => {\n    chai.expect(typeof AppModule).equals('function');\n  });\n\n  // TODO: check if the module is exported\n  // See 1-bootstrap/0-component/Test.ts\n\n  it('Add a Module decorator for the class', () => {\n    chai.expect(metadata).is.not.undefined\n  });\n\n  it('Add imports to the module decorator config', () => {\n    // TODO: Figure out if this is actually needed\n    chai.expect(metadata[0].imports[0]).equals(BrowserModule);\n  });\n\n  it(`Add AppComponent that we created in the previous \n  exercise to the declarations section of the decorator (don't forget to import it)`, () => {\n    chai.expect(metadata[0].declarations[0]).equals(AppComponent);\n  });\n\n  it(`Add AppComponent that we created in the previous \n  exercise to the bootstrap section of the decorator (don't forget to import it)`, () => {\n    chai.expect(metadata[0].bootstrap[0]).equals(AppComponent);\n  });\n});\n\n",
  "1-bootstrap/2-bootstrap/Bootstrap.ts": "import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppModule} from '../1-module/solution/AppModule';\n\n// https://angular.io/docs/ts/latest/guide/cheatsheet.html\n",
  "1-bootstrap/2-bootstrap/solution/Bootstrap.ts": "import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppModule} from '../../1-module/solution/AppModule';\n\nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);\n",
  "1-bootstrap/2-bootstrap/Test.ts": "describe('Component', () => {\n  xit(`There is actually no simple way to test it, just make sure it looks nice :)`, () => {\n\n  });\n});\n\n",
  "2-templates/0-header-input/app.html": "<div>\n</div>\n",
  "2-templates/0-header-input/AppComponent.ts": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  title = 'CatTube';\n}\n\n// Pls ignore\nexport function evalJs(s: string): any {\n\n}\n",
  "2-templates/0-header-input/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input type=\"text\" placeholder=\"video\">\n  <button>Search!</button>\n</div>\n",
  "2-templates/0-header-input/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from './AppComponent';\nimport 'initTestBed';\nimport {appCode} from './code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`app.html: Add a <h1> header, put the 'title' property inside`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const header = fixture.nativeElement.querySelector('h1');\n    chai.expect(header, `Can't find any h1 headers`).is.not.null\n    chai.expect(header.innerHTML).contains('CatTube');\n    fixture.componentInstance.title = 'SomethingElse';\n    fixture.detectChanges();\n\n    const header2 = fixture.nativeElement.querySelector('h1');\n    chai.expect(header2.innerHTML, `Use the curly braces to put component title property in the header`).contains('SomethingElse');\n  });\n\n  it(`app.html: Add an <input> with a placeholder set to 'video' `, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const input = fixture.nativeElement.querySelector('input');\n    chai.expect(input, `Can't find any inputs`).is.not.null\n    chai.expect(input.placeholder, `Input placeholder should contain word 'video'`).contains('video');\n  });\n\n  it(`app.html: Add a <button> which says 'search'`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const button = fixture.nativeElement.querySelector('button');\n    chai.expect(button, `Can't find any buttons`).is.not.null\n    chai.expect(button.innerHTML.toLowerCase()).contains('search')\n  });\n\n\n});\n\n",
  "2-templates/1-no-videos/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input type=\"text\" placeholder=\"video\">\n  <button>Search!</button>\n</div>\n\n",
  "2-templates/1-no-videos/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\" (click)=\"search(i.value)\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n</div>\n",
  "2-templates/1-no-videos/solution/AppComponent.ts": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '<h1>Hello {{title}}!</h1>'\n})\nexport class AppComponent {\n  title = 'CatTube';\n  videos = [];\n\n  search(searchString) {\n  }\n}\n",
  "2-templates/1-no-videos/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from './AppComponent';\nimport 'initTestBed';\nimport {appCode} from './code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`AppComponent.ts: Add 'videos' property, set the value as empty array.`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.componentInstance.videos, `No videos property on the component`).is.not.undefined\n    chai.expect(fixture.componentInstance.videos, `Videos property on the component is not an array.`).is.an('array');\n  });\n\n  it(`AppComponent.ts: Add 'search' method on the component, and make it take SearchString as a parameter.`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.componentInstance.search, `Search should be a function`).is.a('function');\n    chai.expect(fixture.componentInstance.search.length, `Search should take one parameter`).equals(1);\n  });\n\n  it(`app.html: Add click handler to the button, call 'search' method and pass input value \n      (it shouldn't search yet, just take the parameter)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const input = fixture.nativeElement.querySelector('input');\n    const button = fixture.nativeElement.querySelector('button');\n\n\n    function testSearch(searchString) {\n      let passedValue = undefined;\n      let called = false;\n      fixture.componentInstance.search = function (value) {\n        called = true;\n        passedValue = value;\n      };\n\n      input.value = searchString;\n      button.click();\n      chai.expect(called, `Search function should be called when the search button is pressed`).equals(true);\n      chai.expect(passedValue, `Input value is not passed to the search function`).equals(input.value)\n    }\n\n    testSearch('Awesome kittens');\n    testSearch('Other value');\n  });\n\n  it(`app.html: Add a message saying 'No videos' which is displayed only when the videos array is empty`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.componentInstance.videos = [];\n    chai.expect(fixture.nativeElement.innerHTML.toLowerCase()).contains('no videos');\n\n    fixture.componentInstance.videos = [1];\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML.toLowerCase()).not.contains('no videos');\n  });\n\n\n});\n\n",
  "2-templates/2-all-videos/AppComponent.ts": "import {Component} from '@angular/core';\n\n/** Just added this! */\nconst FAKE_VIDEOS = [\n  {\n    title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\"\n  },\n  {\n    title: \"Kitten on the tree\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n];\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  title = \"CatTube\";\n  videos = [];\n\n  search(searchString: String) {\n  }\n}\n",
  "2-templates/2-all-videos/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\" (keydown.enter)=\"search(searchString.value)\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n  <div *ngFor=\"let video of videos\">\n    <h2>{{video.title}}</h2>\n    <img [src]=\"video.src\">\n  </div>\n</div>\n",
  "2-templates/2-all-videos/solution/AppComponent.ts": "import {Component} from '@angular/core';\n\n/** Just added this! */\nconst FAKE_VIDEOS = [\n  {\n    title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\"\n  },\n  {\n    title: \"Kitten on the tree\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\"\n  },\n];\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos = [];\n  title = \"CatTube\";\n\n  search(value) {\n    this.videos = FAKE_VIDEOS.filter(video => video.title.indexOf(value) >= 0)\n  }\n\n  ngOnInit() {\n    this.search('');\n  }\n}\n",
  "2-templates/2-all-videos/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from './AppComponent';\nimport 'initTestBed';\nimport {appCode} from './code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`AppComponent.ts: When 'search' is called, filter videos with the title matching the search string and assign them to the \"videos\" property of the component. Use FAKE_VIDEOS as data`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have 2 kittens').equals(2);\n    fixture.componentInstance.search('cat');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have 1 cat').equals(1);\n    fixture.componentInstance.search('dog');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have no dogs').equals(0);\n  });\n\n  it(`app.html: Iterate over the videos, and display a title for each`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[0].title);\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[1].title);\n\n    fixture.componentInstance.search('cat');\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[0].title);\n  });\n\n  it(`app.html: Iterate over the videos, and display a thumbnail`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.componentInstance.search('itten');\n    fixture.detectChanges();\n    const images = fixture.nativeElement.querySelectorAll('img');\n    chai.expect(images.length).equals(2);\n    chai.expect(images[1].getAttribute('ng-reflect-src')).equals(fixture.componentInstance.videos[1].src);\n    chai.expect(images[0].getAttribute('ng-reflect-src')).equals(fixture.componentInstance.videos[0].src);\n  });\n\n  // it(`#Bonus app.html: Make hitting enter work in the input trigger the search`, () => {\n  //   //TODO\n  // });\n\n  it(`#Bonus AppComponent.ts: When the component starts, search for empty string. `, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const images = fixture.nativeElement.querySelectorAll('img');\n    chai.expect(images.length).equals(3);\n  });\n});\n\n",
  "3-dependency-injection/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './solution/AppComponent';\nimport {VideoService} from \"./VideoService\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "3-dependency-injection/solution/AppComponent.ts": "import {Component} from '@angular/core';\nimport {VideoService} from \"./VideoService\";\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n\n\n  ngOnInit() {\n    this.search('');\n  }\n}\n",
  "3-dependency-injection/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"./VideoService\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "3-dependency-injection/solution/VideoService.ts": "import {Api} from '../../shared/Api';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class VideoService {\n  search(searchString: string) {\n    return Api.fetch(searchString)\n  }\n}\n",
  "3-dependency-injection/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from './VideoService';\nimport {appCode, AppComponentCode} from './code';\nimport {AppModule} from \"./AppModule\";\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`VideoService.ts: Add @Injectable() decorator to the class.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"parameters\", VideoService);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata).not.undefined;\n  });\n  it(`Appmodule.ts: Add VideoService to the module providers`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].providers[0]).equals(VideoService);\n  });\n\n  it(`AppComponent.ts: Require videoService in the component`, () => {\n    chai.expect(AppComponent.length, `App component constructor doesn't take any parameters`).to.equal(1);\n    chai.expect(AppComponentCode).matches(/VideoService/)\n  });\n\n  it(`AppComponent.ts: return videoService.search(results instead of fake data)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    chai.expect(fixture.componentInstance.videos.length).to.equal(4);\n  });\n\n\n});\n\n",
  "3-dependency-injection/VideoService.ts": "import {Api} from './Api';\nimport {Injectable} from '@angular/core';\n\nexport class VideoService {\n  search(searchString: string) {\n    return Api.fetch(searchString)\n  }\n}\n",
  "4-component-tree/0-add-video-component/AppComponent.ts": "import {Component} from '@angular/core';\n// This is a fake app component, it's needed to bootstrap the video component with the aproppriate params.\nimport {Api} from '../../shared/Api';\n@Component({\n  selector: 'my-app',\n  template: '<my-video [video]=\"video\"></my-video>'\n})\nexport class AppComponent {\n  video = Api.fetch('')[0];\n}\n",
  "4-component-tree/0-add-video-component/index.html": "<my-video></my-video>\n",
  "4-component-tree/0-add-video-component/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<div>Description {{video.description}}</div>\n<div>Date {{video.date}}</div>\n",
  "4-component-tree/0-add-video-component/solution/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n}\n",
  "4-component-tree/0-add-video-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {VideoService} from './VideoService';\nimport {videoCode} from './code';\nimport {VideoComponent} from \"./VideoComponent\";\nimport {Api} from './Api'\nconst video = Api.fetch('')[0];\n\nbeforeEach(() => {\n  try {\n    TestBed.resetTestingModule();\n    TestBed.configureTestingModule({\n      providers: [VideoService],\n      declarations: [VideoComponent]\n    });\n    TestBed.overrideComponent(VideoComponent, {\n      set: {\n        template: videoCode\n      }\n    });\n    TestBed.compileComponents();\n  } catch (e) {\n    // whatever\n  }\n});\n\ndescribe('Component tree', () => {\n  describe('Make sure metadata is in place', () => {\n    it(`VideoComponent.ts: Set a selector to be 'my-video'.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `VideoComponent's selector has to be 'my-video'.`).equals('my-video')\n    });\n    it(`VideoComponent.ts: Set the templateUrl to load appropriate html file.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].templateUrl, `VideoComponent's templateUrl should be set to 'video.html'`).equals('video.html')\n    });\n\n    it(`VideoComponent.ts: Add a video @Input()`, () => {\n      const metadata = Reflect.getMetadata(\"propMetadata\", VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have any @Input()'s`).is.not.undefined;\n      chai.expect(Object.keys(metadata).length, `VideoComponent doesn't have any @Input()'s`).equals(1);\n      chai.expect(metadata.video, `VideoComponent's @Input()' should be called video.`).is.not.undefined;\n    });\n  });\n\n\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(VideoComponent);\n      fixture.componentInstance.video = video;\n      fixture.detectChanges();\n    });\n\n    it(`Video.html: Display video title`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video title`).contains(video.title);\n    });\n\n    it(`Video.html: Display video thumbnail`, () => {\n      const image = fixture.nativeElement.querySelector('img');\n      chai.expect(image, `Can't find the thumbnal`).is.not.null;\n      chai.expect(image.getAttribute('ng-reflect-src')).equals(video.src);\n    });\n\n    it(`Video.html: Display video description`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video description`).contains(video.description);\n    });\n\n    it(`Video.html: Display video likes`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video like`).contains(video.likes);\n    });\n\n    it(`Video.html: Display video date`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video date`).contains(video.date);\n    });\n\n    it(`Video.html: Display video views`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video description`).contains(video.views);\n    });\n  });\n\n});\n\n",
  "4-component-tree/0-add-video-component/video.html": "<!-- Write your code here -->\n",
  "4-component-tree/0-add-video-component/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({})\nexport class VideoComponent {\n}\n",
  "4-component-tree/1-use-video-component/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n  <div *ngFor=\"let video of videos\">\n    <h2>{{video.title}}</h2>\n    <img [src]=\"video.src\">\n  </div>\n</div>\n",
  "4-component-tree/1-use-video-component/AppComponent.ts": "import {Component} from '@angular/core';\nimport {VideoService} from \"../../shared/VideoService\";\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n    // Display all cats right away!\n    this.search('');\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n}\n",
  "4-component-tree/1-use-video-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../0-add-video-component/solution/VideoComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "4-component-tree/1-use-video-component/solution/app.html": "<div>\n  <h1>{{title}}</h1>\n  <input #searchString type=\"text\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos.\n  </div>\n  <my-video *ngFor=\"let video of videos\" [video]=\"video\"></my-video>\n</div>\n",
  "4-component-tree/1-use-video-component/solution/AppComponent.ts": "import {Component, Inject} from '@angular/core';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoItem} from \"../../../shared/VideoItem\";\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos: VideoItem[] = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n}\n",
  "4-component-tree/1-use-video-component/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoComponent} from \"../../0-add-video-component/solution/VideoComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "4-component-tree/1-use-video-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from './VideoService';\nimport {appCode, videoCode} from './code';\nimport {AppModule} from \"./AppModule\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {Api} from './Api';\n\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent, VideoComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: appCode\n    }\n  });\n  TestBed.overrideComponent(VideoComponent, {\n    set: {\n      template: videoCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add the VideoComponent to the AppModule declarations.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(VideoComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(AppComponent);\n  });\n\n  it(`app.html: Replace the video html with the video component`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.videos = Api.fetch('');\n    // TODO: if the element is added, but the video prop is not present, this test will fail with\n    // A useless message. Passing video prop should actually be tested in the next test, and this\n    // Ane should pass.\n    fixture.detectChanges();\n\n    const myVideos = fixture.nativeElement.querySelectorAll('my-video');\n    chai.expect(myVideos.length, `can't find any <my-video> elements in the app component`).is.greaterThan(0);\n    chai.expect(myVideos.length, `There should be one my-video element for each element`).equals(fixture.componentInstance.videos.length);\n  });\n\n  it(`app.html: Pass the video property to the component (don't forget the square braces)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n\n    fixture.componentInstance.videos = Api.fetch('');\n\n    fixture.detectChanges();\n\n    const video = fixture.nativeElement.querySelector('my-video');\n    chai.expect(video.getAttribute('ng-reflect-video')).equals('[object Object]');\n  });\n});\n\n",
  "4-z-custom-events/0-add-thumb-component/AppComponent.ts": "import {Component} from '@angular/core';\n// This is a fake app component, it's needed to bootstrap the video component with the aproppriate params.\nimport {Api} from '../../shared/Api';\n@Component({\n  selector: 'my-app',\n  template: '<my-video [video]=\"video\"></my-video>'\n})\nexport class AppComponent {\n  video = Api.fetch('')[0];\n}\n",
  "4-z-custom-events/0-add-thumb-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {WrapperComponent} from \"./WrapperComponent\";\nimport {ThumbsComponent} from \"./ThumbsComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [ThumbsComponent, WrapperComponent],\n  bootstrap: [WrapperComponent]\n})\nexport class AppModule {\n}\n",
  "4-z-custom-events/0-add-thumb-component/index.html": "<my-wrapper></my-wrapper>\n",
  "4-z-custom-events/0-add-thumb-component/solution/thumbs.html": "<button (click)=\"thumbsUp()\" class=\"thumbs-up\">Thumbs up</button>\n<button (click)=\"thumbsDown()\" class=\"thumbs-down\">Thumbs down</button>\n",
  "4-z-custom-events/0-add-thumb-component/solution/ThumbsComponent.ts": "import {Component, Output, EventEmitter} from '@angular/core';\n\n/**\n * Yes, TypeScript has enums!\n * There's no nice way to use them in the template though.\n */\nexport enum Thumbs {\n  UP,\n  DOWN\n}\n\n@Component(\n  {\n    selector: 'my-thumbs',\n    templateUrl: 'thumbs.html'\n  }\n)\nexport class ThumbsComponent {\n  @Output() onThumbs: EventEmitter<Thumbs> = new EventEmitter<Thumbs>();\n\n  thumbsUp() {\n    this.onThumbs.emit(Thumbs.UP)\n  }\n\n  thumbsDown() {\n    this.onThumbs.emit(Thumbs.DOWN)\n  }\n\n}\n",
  "4-z-custom-events/0-add-thumb-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {thumbsCode} from './code';\nimport {Api} from './Api'\nimport {ThumbsComponent, Thumbs} from \"./ThumbsComponent\";\nconst thumbs = Api.fetch('')[0];\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [ThumbsComponent]\n  });\n  TestBed.overrideComponent(ThumbsComponent, {\n    set: {\n      template: thumbsCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ThumbsComponent);\n      fixture.detectChanges();\n    });\n\n    it(`thumbs.html: Add a button with a 'thumbs-up' class.`, () => {\n      chai.expect(fixture.nativeElement.querySelector('.thumbs-up'), `can't find thumbs up button`).to.be.ok\n    });\n\n    it(`thumbs.html: Add a button with a 'thumbs-down' class.`, () => {\n      chai.expect(fixture.nativeElement.querySelector('.thumbs-up'), `can't find thumbs up button`).to.be.ok\n    });\n  });\n\n  describe('Make sure things work', () => {\n    it(`ThumbsComponent.ts: Set a selector to be 'my-thumbs'.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `ThumbsComponent's selector has to be 'my-thumbs'.`).equals('my-thumbs')\n    });\n\n    it(`ThumbsComponent.ts: Set the templateUrl to load appropriate html file.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].templateUrl, `ThumbsComponent's templateUrl should be set to 'thumbs.html'`).equals('thumbs.html')\n    });\n\n    it(`ThumbsComponent.ts: Add a @Output() called 'onThumbs'`, () => {\n      const metadata = Reflect.getMetadata(\"propMetadata\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have any @Outputs()'s`).is.not.undefined;\n      chai.expect(Object.keys(metadata).length, `ThumbsComponent doesn't have any @Outputs()'s`).equals(1);\n      chai.expect(metadata.onThumbs, `ThumbsComponent's @Outputs()' should be called onThumbs.`).is.not.undefined;\n    });\n  });\n\n  describe('Make sure things work', () => {\n    it(`ThumbsComponent.ts, thumbs.html: Set a selector to be 'my-thumbs'.`, () => {\n      const metadata = Reflect.getMetadata(\"annotations\", ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `ThumbsComponent's selector has to be 'my-thumbs'.`).equals('my-thumbs')\n    });\n  });\n\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ThumbsComponent);\n      fixture.detectChanges();\n    });\n\n    it(`thumbs.html: Make the 'thumbs-up' button emit the onThumbs event with the correct thums. Use the ENUM!`, () => {\n      let thumbs;\n      fixture.componentInstance.onThumbs.subscribe((event) => {\n        thumbs = event;\n      });\n      chai.expect(thumbs, `OnThumbs was called without pressing the button`).to.be.not.ok\n      fixture.nativeElement.querySelector('.thumbs-up').click();\n      chai.expect(thumbs, `OnThumbs was not called when pressing the button with the 'thumbs-up' class.`).to.equal(Thumbs.UP);\n    });\n\n    it(`thumbs.html: Make the 'thumbs-down' button emit the onThumbs event with the correct thums. Use the ENUM!`, () => {\n      let thumbs;\n      fixture.componentInstance.onThumbs.subscribe((event) => {\n        thumbs = event;\n      });\n      chai.expect(thumbs, `OnThumbs was called without pressing the button`).to.be.not.ok\n      fixture.nativeElement.querySelector('.thumbs-down').click();\n      chai.expect(thumbs, `OnThumbs was not called when pressing the button with the 'thumbs-down' class.`).to.equal(Thumbs.DOWN);\n    });\n\n  });\n\n});\n\n",
  "4-z-custom-events/0-add-thumb-component/thumbs.html": "<!-- Write your code here -->\n",
  "4-z-custom-events/0-add-thumb-component/ThumbsComponent.ts": "import {Component, Output, EventEmitter} from '@angular/core';\n\n/**\n * Yes, TypeScript has enums!\n * There's no nice way to use them in the template though.\n */\nexport enum Thumbs {\n  UP,\n  DOWN\n}\n\n\nexport class ThumbsComponent {\n}\n",
  "4-z-custom-events/0-add-thumb-component/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({})\nexport class VideoComponent {\n}\n",
  "4-z-custom-events/0-add-thumb-component/WrapperComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-wrapper',\n  // Just using template here to avoid extra files.\n  template: `\n    <my-thumbs></my-thumbs> \n  `\n})\nexport class WrapperComponent {\n\n}\n",
  "4-z-custom-events/1-use-thumb-component/AppComponent.ts": "import {Component, Inject} from '@angular/core';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app.html'\n})\nexport class AppComponent {\n  videos: VideoItem[] = [];\n  title = \"CatTube\";\n\n  constructor(private v: VideoService) {\n  }\n\n  search(value) {\n    this.videos = this.v.search(value);\n  }\n}\n",
  "4-z-custom-events/1-use-thumb-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../../4-component-tree/0-add-video-component/solution/VideoComponent\";\nimport {ThumbsComponent} from \"../0-add-thumb-component/solution/ThumbsComponent\";\n\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "4-z-custom-events/1-use-thumb-component/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<my-thumbs (onThumbs)=\"onThumbs($event)\"></my-thumbs>\n<div>Description {{video.description}}</div>\n<div>Date {{video.date}}</div>\n\n",
  "4-z-custom-events/1-use-thumb-component/solution/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\nimport {Thumbs} from \"../0-add-thumb-component/ThumbsComponent\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n\n  onThumbs(thumbs: Thumbs){\n    if(thumbs === Thumbs.UP){\n      this.video.likes++;\n    }\n    if(thumbs === Thumbs.DOWN){\n      this.video.likes--;\n    }\n  }\n}\n",
  "4-z-custom-events/1-use-thumb-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\n\nimport {videoCode, thumbsCode} from './code';\nimport {AppModule} from \"./AppModule\";\n\nimport {Api} from './Api';\n\nimport {ThumbsComponent} from \"./ThumbsComponent\";\nimport {VideoComponent} from \"./VideoComponent\";\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [VideoComponent, ThumbsComponent]\n  });\n  TestBed.overrideComponent(VideoComponent, {\n    set: {\n      template: videoCode\n    }\n  });\n  TestBed.overrideComponent(ThumbsComponent, {\n    set: {\n      template: thumbsCode\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add ThumbsComponent to the AppModule declarations.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Thumbs component not found`).contains(ThumbsComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(VideoComponent);\n  });\n\n  it(`video.html: Use the thumbs component`, () => {\n    let fixture = TestBed.createComponent(VideoComponent);\n    fixture.componentInstance.video = Api.fetch('')[0];\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.querySelector('.thumbs-up')).is.ok\n    chai.expect(fixture.nativeElement.querySelector('.thumbs-down')).is.ok\n  });\n\n  it(`VideoComponent: Listen to the thumbs component onThumbs event, and update the amount of likes accordingly`, () => {\n    let fixture = TestBed.createComponent(VideoComponent);\n    fixture.componentInstance.video = Api.fetch('')[0];\n    fixture.detectChanges();\n    const likes = fixture.componentInstance.video.likes;\n    fixture.nativeElement.querySelector('.thumbs-up').click();\n    chai.expect(fixture.componentInstance.video.likes).equals(likes + 1);\n  });\n\n});\n\n",
  "4-z-custom-events/1-use-thumb-component/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<div>Description {{video.description}}</div>\n<div>Date {{video.date}}</div>\n\n",
  "4-z-custom-events/1-use-thumb-component/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\nimport {Thumbs} from \"../0-add-thumb-component/ThumbsComponent\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n\n\n\n}\n",
  "5-content-projection/0-add-toggle-panel-component/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\nimport {WrapperComponent} from \"./WrapperComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [TogglePanelComponent, WrapperComponent],\n  bootstrap: [WrapperComponent]\n})\nexport class AppModule {\n}\n",
  "5-content-projection/0-add-toggle-panel-component/index.html": "<my-wrapper></my-wrapper>\n",
  "5-content-projection/0-add-toggle-panel-component/solution/togglepanel.html": "<div *ngIf=\"showDescription\">\n  <ng-content select=\".description\"></ng-content>\n  <button (click)=\"showDescription=false\">Show meta</button>\n</div>\n<div *ngIf=\"!showDescription\">\n  <ng-content select=\".extra\"></ng-content>\n  <button (click)=\"showDescription=true\">Show description</button>\n</div>\n",
  "5-content-projection/0-add-toggle-panel-component/solution/TogglePanelComponent.ts": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'my-toggle-panel',\n  templateUrl: './togglePanel.html'\n})\nexport class TogglePanelComponent {\n  showDescription = true;\n}\n",
  "5-content-projection/0-add-toggle-panel-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport 'initTestBed';\nimport {togglePanelCode, wrapperCode} from './code'\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\nimport {WrapperComponent} from \"./WrapperComponent\";\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [TogglePanelComponent, WrapperComponent]\n  });\n\n  TestBed.overrideComponent(TogglePanelComponent, {\n    set: {\n      template: togglePanelCode\n    }\n  });\n  TestBed.compileComponents();\n  console.log('be');\n});\n\ndescribe('Content projection', () => {\n  it(`TogglePanelComponent.ts: We added the template and the selector for you, enjoy!`, () => {\n  });\n\n  it(`TogglePanelComponent.ts: Add a boolean property to the component. The property can have any name, and must have a default value.`, () => {\n    let fixture = TestBed.createComponent(TogglePanelComponent);\n    // the intent is to let them come up with the property name, so we assume there will be one.\n    const props = Object.keys(fixture.componentInstance);\n\n    chai.expect(props.length, `A property with a default value was not declared on the component.`).is.not.equal(0);\n    chai.expect(props.length, `Too many properties were declared.`).is.not.greaterThan(1);\n    const prop = props[0];\n    chai.expect(fixture.componentInstance[prop], `Property \"${prop}\" is not of type boolean`).is.a('boolean');\n    chai.expect(fixture.componentInstance[prop], `Property \"${prop}\" must have a default value`).is.not.undefined;\n  });\n\n  it(`togglePanel.html: Use content projection to only display the content with the selector .description by default.`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be displayed`).not.null\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be hidden`).is.null\n  });\n\n  it(`togglePanel.html: Add a button to show extra information`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    let buttons = fixture.nativeElement.querySelectorAll('button');\n    chai.expect(buttons.length, `Should show exactly one button`).to.equals(1);\n  });\n\n  it(`togglePanel.html: When the button is pressed, switch the flag and only display the content with the '.extra' selector.`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    let button = fixture.nativeElement.querySelector('button');\n    button.click();\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be hidden`).is.null\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be displayed`).not.null\n  });\n\n  it(`togglePanel.html: Add a button to come back to the description`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be displayed`).not.null\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be hidden`).is.null\n  });\n});\n\n",
  "5-content-projection/0-add-toggle-panel-component/togglepanel.html": "<!-- add your code here -->\n",
  "5-content-projection/0-add-toggle-panel-component/TogglePanelComponent.ts": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'my-toggle-panel',\n  templateUrl: 'togglepanel.html'\n})\nexport class TogglePanelComponent {\n\n}\n",
  "5-content-projection/0-add-toggle-panel-component/WrapperComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-wrapper',\n  // Just using template here to avoid extra files.\n  template: `\n    <my-toggle-panel>\n      <div class=\"description\">Either show me</div>\n      <div class=\"extra\">Or show me</div>\n    </my-toggle-panel>\n`\n})\nexport class WrapperComponent {\n\n}\n",
  "5-content-projection/1-use-toggle-panel/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../0-add-video-component/solution/VideoComponent\";\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "5-content-projection/1-use-toggle-panel/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from './AppComponent';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoComponent} from \"../VideoComponent\";\nimport {TogglePanelComponent} from \"../../0-add-toggle-panel-component/TogglePanelComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent],\n  providers: [VideoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "5-content-projection/1-use-toggle-panel/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video.views}}</div>\n    <div class=\"likes\">Likes: {{video.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date}}</div>\n",
  "5-content-projection/1-use-toggle-panel/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from './AppComponent';\nimport {appCode, videoCode, togglePanelCode, thumbsCode} from './code';\nimport {AppModule} from \"./AppModule\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {VideoService} from \"./VideoService\";\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\nimport {ThumbsComponent} from \"./ThumbsComponent\";\nimport {Api} from './Api'\nconst video = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent, ThumbsComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: appCode}});\n  TestBed.overrideComponent(ThumbsComponent, {set: {template: thumbsCode}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglePanelCode}});\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add the TogglePanelComponent to the AppModule declarations.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Keep the video component`).contains(VideoComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(AppComponent);\n    chai.expect(metadata[0].declarations, `Add TogglePanelComponent`).contains(TogglePanelComponent);\n  });\n\n  it(`video.html: Use the TogglePanel component in the template`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n    chai.expect(panel).is.not.null\n  });\n\n\n  it(`video.html: Add .description as TogglePanel's content`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n\n    chai.expect(panel.querySelector('.description')).is.not.null\n    chai.expect(panel.querySelector('.extra')).is.null\n\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should display description text.`).contains(video.description);\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should not display likes `).not.contains(video.likes);\n  });\n\n  it(`video.html: Add .extra as TogglePanel's content`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n\n    panel.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(panel.querySelector('.description')).is.null.null\n    chai.expect(panel.querySelector('.extra')).is.not.null\n\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should not description text.`).not.contains(video.description);\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should display likes`).contains(video.likes);\n\n  });\n});\n\n",
  "5-content-projection/1-use-toggle-panel/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n}\n",
  "6-children/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {VideoService} from \"../shared/VideoService\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {TogglePanelComponent} from \"../shared/TogglePanelComponent\";\nimport {ContextService} from \"./ContextService\";\nimport {ContextComponent} from \"./ContextComponent\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent],\n  providers: [VideoService, ContextService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "6-children/context.html": "{{text}}\n",
  "6-children/ContextComponent.ts": "import {Component} from '@angular/core';\nimport {ContextService} from \"./ContextService\";\nimport {VideoComponent} from \"./VideoComponent\";\n\n@Component({\n  selector: 'my-ad',\n  templateUrl: 'context.html'\n})\nexport class ContextComponent {\n  text: string;\n}\n",
  "6-children/ContextService.ts": "export class ContextService {\n  getAdText(description) {\n    // Super secret algorithm, please don't share outside of this course.\n    return description.indexOf('music') >= 0 ?\n      'Buy awesome speakers on our web site.' :\n      'Check out our web site';\n  }\n}\n",
  "6-children/index.html": "<my-app></my-app>\n",
  "6-children/solution/ContextComponent.ts": "import {Component} from '@angular/core';\nimport {ContextService} from \"./ContextService\";\nimport {VideoComponent} from \"./VideoComponent\";\n\n@Component({\n  selector: 'my-ad',\n  templateUrl: 'context.html'\n})\nexport class ContextComponent {\n  text: string;\n\n  constructor(public parent: VideoComponent, private  service: ContextService) {\n  }\n\n  ngOnInit() {\n    this.text = this.service.getAdText(this.parent.video.description);\n  }\n}\n",
  "6-children/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video?.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video?.views}}</div>\n    <div class=\"likes\">Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date}}</div>\n<my-ad></my-ad>\n\n\n",
  "6-children/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from './AppComponent';\nimport {appCode, videoCode, togglePanelCode, contextCode} from './code';\nimport {AppModule} from \"./AppModule\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {VideoService} from \"./VideoService\";\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\nimport {ContextComponent} from \"./ContextComponent\";\nimport {ContextService} from \"./ContextService\";\nimport {Api} from \"./Api\";\n\nfunction objectValues(object) {\n  return Object.keys(object).reduce((result, key) => {\n    result.push(object[key]);\n    return result;\n  }, []);\n}\n\nfunction objectFindPropOfType(object, Type) {\n  return Object.keys(object).reduce((prop, key) => {\n    if (prop) return prop;\n    if (object[key] instanceof Type) return key;\n  }, undefined);\n}\n\nfunction objectHasAn(object, Type) {\n  return objectValues(object).some(val => val instanceof Type)\n}\n\nconst sampleVideo = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService, ContextService, /* that's a hack, to provide parent component */ VideoComponent],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: appCode}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglePanelCode}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: contextCode}});\n  TestBed.compileComponents();\n});\n\ndescribe('Children', () => {\n  it(`ContextComponent: Inject the ContextService into the constructor and store it as a property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(objectHasAn(fixture.componentInstance, ContextService)).to.be.true;\n  });\n\n  it(`ContextComponent: Inject the parent component (VideoComponent) into the constructor and store it as a property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(objectHasAn(fixture.componentInstance, VideoComponent)).to.be.true;\n  });\n\n  it(`ContextComponent: Add an ngOnInit method to the component. (It's a special method angular will call when the component is created).`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(fixture.componentInstance.ngOnInit).is.a('function');\n  });\n\n  it(`ContextComponent: In the onOnInit method Call 'getAdText' on the service, and pass it the video 'description' provided by the injected video component. Assign the result to the declared text property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    let componentInstance = fixture.componentInstance;\n\n    let vcProp = objectFindPropOfType(componentInstance, VideoComponent);\n    chai.expect(vcProp, `\"VideoComponent\" was not injected.`).to.not.be.undefined;\n\n    componentInstance[vcProp].video = sampleVideo;\n    chai.expect(componentInstance.ngOnInit).is.a('function');\n    componentInstance[vcProp].video.description = 'music';\n    componentInstance.ngOnInit();\n    fixture.detectChanges();\n\n    chai.expect(fixture.nativeElement.innerHTML).to.contain('speakers');\n\n    componentInstance[vcProp].video.description = 'banana';\n    componentInstance.ngOnInit();\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).to.contain('Check out our web site');\n  });\n\n  it(`AppModule: Add the ContextComponent to the AppModule declarations (We did this for you).`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(ContextComponent);\n  });\n\n  it(`video.html: Actually display the ad (We actually also did it for you).`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    // TODO: Actually write a test\n    //chai.expect(fixture.nativeElement.querySelector('my-ad')).to.be.ok\n  });\n});\n\n",
  "6-children/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video?.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video?.views}}</div>\n    <div class=\"likes\">Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date}}</div>\n<my-ad></my-ad>\n\n\n",
  "6-children/VideoComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../shared/VideoItem\";\n\n@Component({\n  selector: 'my-video',\n  templateUrl: 'video.html'\n})\nexport class VideoComponent {\n  @Input() video: VideoItem;\n}\n",
  "7-pipes/0-create-pipe/FuzzyPipe.ts": "import {Pipe, PipeTransform} from '@angular/core';\n\n",
  "7-pipes/0-create-pipe/solution/FuzzyPipe.ts": "import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({name: 'fuzzy'})\nexport class FuzzyPipe implements PipeTransform {\n  transform(value: string) {\n    let date = new Date(value);\n    let dateNow = new Date();\n\n    let millisecondsDifference = dateNow.getTime() - date.getTime();\n    let differenceDays = Math.floor(millisecondsDifference / (1000 * 3600 * 24));\n    let differenceYears = Math.floor(differenceDays / 365);\n\n    if (differenceDays < 365) {\n      return differenceDays + ' days';\n    }\n    return differenceYears + ' years ago';\n  }\n}\n\n// Please ignore\nexport function evalJs(string) {\n\n}\n",
  "7-pipes/0-create-pipe/Test.ts": "import {FuzzyPipe, evalJs} from './solution/FuzzyPipe';\nimport \"reflect-metadata\";\n\nlet metadata;\nbeforeEach(() => {\n  try {\n    metadata = Reflect.getMetadata(\"annotations\", FuzzyPipe);\n  } catch (e) {\n\n  }\n});\n\nconst d = new Date();\nd.setDate(d.getDate() - 2);\nconst formattedDate = d.toISOString().slice(0, 10);\n\n\ndescribe('Pipe', () => {\n  it('Create a class called FuzzyPipe', () => {\n    chai.expect(typeof evalJs('FuzzyPipe')).equals('function');\n  });\n\n  it('Export it', () => {\n    chai.expect(typeof FuzzyPipe).equals('function');\n  });\n\n  it('Add a @Pipe() decorator', () => {\n    chai.expect(metadata).is.an('array')\n  });\n\n  it('Set the name to fuzzy', () => {\n    chai.expect(metadata[0].name).equals('fuzzy');\n  });\n\n  it(`Make it return '2 days ago for '${formattedDate}'`, () => {\n    let fuzzyTime = new FuzzyPipe();\n    chai.expect(fuzzyTime.transform(d.toISOString().slice(0, 10)).toLowerCase()).equals('2 days');\n  });\n});\n\n",
  "7-pipes/1-use-pipe/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {VideoService} from \"../../shared/VideoService\";\nimport {VideoComponent} from \"../../6-children/VideoComponent\";\nimport {TogglePanelComponent} from \"../../shared/TogglePanelComponent\";\nimport {ContextService} from \"../../6-children/ContextService\";\nimport {ContextComponent} from \"../../6-children/ContextComponent\";\nimport {FuzzyPipe} from \"../0-create-pipe/solution/FuzzyPipe\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent],\n  providers: [VideoService, ContextService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "7-pipes/1-use-pipe/FuzzyPipe.ts": "import {Pipe, PipeTransform} from '@angular/core';\n\n",
  "7-pipes/1-use-pipe/solution/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {VideoService} from \"../../../shared/VideoService\";\nimport {VideoComponent} from \"../../../6-children/VideoComponent\";\nimport {TogglePanelComponent} from \"../../../shared/TogglePanelComponent\";\nimport {ContextService} from \"../../../6-children/ContextService\";\nimport {ContextComponent} from \"../../../6-children/ContextComponent\";\nimport {FuzzyPipe} from \"../../0-create-pipe/solution/FuzzyPipe\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent, FuzzyPipe],\n  providers: [VideoService, ContextService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
  "7-pipes/1-use-pipe/solution/video.html": "<h2>{{video.title}}</h2>\n<img [src]=\"video.src\">\n<my-toggle-panel>\n  <div class=\"description\">Description: {{video?.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video?.views}}</div>\n    <div class=\"likes\">Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>\n<div>Date {{video.date | fuzzy}}</div>\n<my-ad></my-ad>\n",
  "7-pipes/1-use-pipe/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {appCode, videoCode, togglepanelCode, contextCode} from '../../shared/code';\nimport {AppModule} from \"./AppModule\";\nimport {VideoComponent} from \"../../6-children/VideoComponent\";\nimport {VideoService} from \"../../shared/VideoService\";\nimport {TogglePanelComponent} from \"../../shared/TogglePanelComponent\";\nimport {ContextComponent} from \"../../6-children/solution/ContextComponent\";\nimport {ContextService} from \"../../6-children/ContextService\";\nimport {Api} from \"../../shared/Api\";\nimport {FuzzyPipe} from \"../0-create-pipe/solution/FuzzyPipe\";\n\nfunction objectValues(object) {\n  return Object.keys(object).reduce((result, key) => {\n    result.push(object[key]);\n    return result;\n  }, []);\n}\nconst sampleVideo = Api.fetch('')[0];\n\nfunction objectHasAn(object, Type) {\n  return objectValues(object).some(val => val instanceof Type)\n}\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService, ContextService, /* that's a hack, to provide parent component */ VideoComponent],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent, FuzzyPipe]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: appCode}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglepanelCode}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: contextCode}});\n  TestBed.compileComponents();\n});\nfunction sampleFuzzy(value) {\n  let date = new Date(value);\n  let dateNow = new Date();\n  let millisecondsDifference = dateNow.getTime() - date.getTime();\n  let differenceDays = Math.floor(millisecondsDifference / (1000 * 3600 * 24));\n  return differenceDays + ' days';\n}\n\ndescribe('Pipes', () => {\n\n\n  it(`AppModule: Add the FuzzyPipe to the AppModule declarations`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata(\"annotations\", AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(FuzzyPipe);\n  });\n\n  it(`video.html: Use the pipe on the date.`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML).contains(sampleFuzzy(sampleVideo.date));\n  });\n});\n\n",
  "8-tests/0-test-component/Test.ts": "import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../../4-component-tree/1-use-video-component/solution/AppComponent';\nimport {appCode, videoCode, togglepanelCode, contextCode} from '../../shared/code';\nimport {VideoComponent} from \"../../6-children/VideoComponent\";\nimport {VideoService} from \"../../3-dependency-injection/solution/VideoService\";\nimport {TogglePanelComponent} from \"../../shared/TogglePanelComponent\";\nimport {ContextComponent} from \"../../6-children/solution/ContextComponent\";\n\n\n\nbeforeEach(() => {\n  // In Jasmine this is done automatically.\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [VideoComponent, TogglePanelComponent, ContextComponent]\n  });\n\n\n  TestBed.overrideComponent(VideoComponent, {set: {template: videoCode}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: contextCode}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: togglepanelCode}});\n  TestBed.compileComponents();\n});\n\nconst video = {\n  title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\",\n  description: \"todo\",\n  views: 100,\n  likes: 20,\n  date: '2016-11-25'\n};\n\ndescribe('Video', () => {\n  it('Video', () => {\n    const fixture = TestBed.createComponent(VideoComponent);\n    fixture.componentInstance.video = video;\n    fixture.detectChanges();\n\n    chai.expect(fixture.nativeElement.innerHTML).to.contain(`I will fail, because I don't contain what I should`)\n  });\n});\n\n",
  "codelab-config.ts": "import {CodelabConfig} from \"../app/codelab-config\";\nimport {FileConfig} from \"../app/file-config\";\n\nimport {JsFileConfig} from \"../app/js-file-config\";\n\nimport {AppComponent} from \"./files/AppComponent\";\nimport {AppModule} from \"./files/AppModule\";\nimport {AppHtml} from \"./files/AppHtml\";\nimport {Bootstrap} from \"./files/Bootstrap\";\nimport {VideoItem} from \"./files/VideoItem\";\nimport {Api} from \"./files/Api\";\nimport {VideoService} from \"./files/VideoService\";\nimport {VideoHtml} from \"./files/VideoHtml\";\nimport {VideoComponent} from \"./files/VideoComponent\";\nimport {ThumbsHtml} from \"./files/ThumbsHtml\";\nimport {ThumbsComponent} from \"./files/ThumbsComponent\";\nimport {ToggelPanelHtml} from \"./files/TogglePanelHtml\";\nimport {TogglePanelComponent} from \"./files/TogglePanelComponent\";\nimport {WrapperComponent} from \"./files/WrapperComponent\";\nimport {ContextComponent} from \"./files/ContextComponent\";\nimport {ContextService} from \"./files/ContextService\";\nimport {Meetup} from \"./files/Meetup\";\nimport {Main} from \"./files/Main\";\n\n\nfunction testFile() {\n  return {\n    filename: 'Test.ts',\n    moduleName: 'Test',\n    type: 'ts',\n    excludeFromTesting: false,\n    test: true,\n    bootstrap: true,\n    before: 'mochaBefore();',\n    after: 'mochaAfter();',\n    hidden: true\n  };\n}\n\nfunction hidden(...files: FileConfig[]): FileConfig[] {\n  return files.map(file => Object.assign({}, file, {hidden: true}))\n}\nfunction bootstrap(...files: FileConfig[]): FileConfig[] {\n  return files.map(file => Object.assign({}, file, {bootstrap: true}))\n}\n\nfunction readOnly(...files: FileConfig[]): FileConfig[] {\n  return files.map(file => Object.assign({}, file, {readonly: true}))\n}\nfunction justForReference(...files: FileConfig[]): FileConfig[] {\n  return collapsed(...readOnly(...files));\n}\nfunction collapsed(...files: FileConfig[]): FileConfig[] {\n  return files.map(file => Object.assign({}, file, {collapsed: true}))\n}\n\nfunction htmlFile(file: string, extensions?) {\n  return Object.assign({\n    filename: `${file}.html`, type: 'html'\n  }, extensions)\n}\n\n\nfunction evaled(file) {\n  return Object.assign(file, {\n    after: `\n    export function evalJs( js ){\n      return eval(js);\n    }\n`\n  });\n}\nfunction tsFile(file, extensions?) {\n  return Object.assign({\n    filename: `${file}.ts`, type: 'ts', after: `\n    export function evalJs( js ){\n      return eval(js);\n    }\n`\n  }, extensions)\n}\n\nfunction sharedApiFile(extensions?) {\n  return sharedTsFile('Api', extensions);\n}\n\nfunction sharedTsFile(file, extensions?) {\n  return tsFile(file, Object.assign({path: 'shared'}, extensions));\n}\n\nfunction sharedVideoInterface(extensions?) {\n  return tsFile('VideoItem', Object.assign({path: 'shared'}, extensions));\n}\n\nfunction appBootstrap(extensions?) {\n  return Object.assign(tsFile('AppModule'), {\n    filename: 'Bootstrap.ts',\n    type: 'ts',\n    excludeFromTesting: true,\n    bootstrap: true,\n  }, extensions)\n}\nfunction sharedAppBootstrap(extensions?) {\n  return Object.assign(appBootstrap(), {path: 'shared'}, extensions)\n}\n\n\n// Ugly, but helps to typecheck.\n// TODO: Find a nicer way\nconst files: {\n  appComponent: {\n    initial: FileConfig,\n    solved: FileConfig,\n    withTitle: FileConfig,\n    withTemplate: FileConfig,\n    withVideos: FileConfig,\n    file: JsFileConfig\n    withNgInit: FileConfig\n    withVideoServiceImported: FileConfig\n    withVideoService: FileConfig\n  },\n  appModule: {\n    initial: FileConfig,\n    solved: FileConfig,\n    withVideoServiceInjected: JsFileConfig,\n    withVideoService: JsFileConfig,\n    withVideoComponentInjected: JsFileConfig,\n    withVideoComponent: JsFileConfig,\n    thumbs: JsFileConfig,\n    wrapper: JsFileConfig,\n    thumbsRollback: JsFileConfig,\n    withThumbsInjected: JsFileConfig,\n    withThumbsComponent: JsFileConfig,\n    withTogglePanelInjected: JsFileConfig,\n    withTogglePanel: JsFileConfig,\n    withContextComponent: JsFileConfig,\n    file: JsFileConfig,\n  },\n  bootstrap: {\n    initial: FileConfig,\n    solved: FileConfig,\n    file: JsFileConfig,\n    withTemplateLoader: FileConfig\n  },\n  thumbsHtml: {\n    initial: FileConfig,\n    solved: FileConfig\n  },\n  thumbsComponent: {\n    initial: FileConfig,\n    solved: FileConfig,\n    file: JsFileConfig\n  },\n  appHtml: {\n    initial: FileConfig,\n    withSearchBox: FileConfig,\n    withNoVideosMessage: FileConfig,\n    withAllVideos: FileConfig,\n    withVideoComponent: FileConfig\n  },\n  videoItem: {\n    initial: FileConfig,\n  },\n  videoComponent: {\n    initial: FileConfig,\n    withInput: FileConfig,\n    withThumbsInjected: FileConfig\n    withThumbsEventHandled: FileConfig\n  },\n  videoHtml: {\n    initial: FileConfig,\n    withInfo: FileConfig,\n    withThumbs: FileConfig,\n    withTogglePanel: FileConfig\n  },\n  togglePanelHtml: {\n    initial: FileConfig,\n    solved: FileConfig\n  },\n\n  togglePanelComponent: {\n    initial: FileConfig,\n    solved: FileConfig\n  },\n  api: {\n    initial: FileConfig,\n  },\n  wrapperComponent: {\n    initial: FileConfig,\n  },\n  videoService: {\n    initial: FileConfig,\n    injectable: FileConfig,\n  },\n  contextComponent: {\n    initial: FileConfig,\n    solved: FileConfig\n  },\n  contextService: {\n    initial: FileConfig\n  },\n  meetup: {\n    initial: FileConfig,\n    solved: FileConfig\n  },\n  mainMeetup: {\n    initial: FileConfig\n  },\n\n} = {} as any;\n\nfiles.appComponent = AppComponent;\nfiles.appModule = AppModule;\nfiles.appHtml = AppHtml;\nfiles.bootstrap = Bootstrap;\nfiles.videoItem = VideoItem;\nfiles.api = Api;\nfiles.videoService = VideoService;\nfiles.videoHtml = VideoHtml;\nfiles.videoComponent = VideoComponent;\nfiles.thumbsComponent = ThumbsComponent;\nfiles.thumbsHtml = ThumbsHtml;\nfiles.togglePanelHtml = ToggelPanelHtml;\nfiles.togglePanelComponent = TogglePanelComponent;\nfiles.wrapperComponent = WrapperComponent;\nfiles.contextComponent = ContextComponent;\nfiles.contextService = ContextService;\nfiles.meetup = Meetup;\nfiles.mainMeetup = Main;\n\n\nexport const codelabConfig: CodelabConfig = {\n    name: 'Angular2 codelab',\n    user: '',\n    auth: {},\n    page: 'milestone',\n    selectedMilestoneIndex: 0,\n    milestones: [\n      {\n        /**\n         * See the interface.\n         */\n        name: 'Intro to TypeScript',\n        selectedExerciseIndex: 0,\n        exercises: [\n          {\n            name: 'Intro',\n            path: '0-intro',\n            description: `\n          <h1>Welcome to the Angular 2 and TypeScript CodeLab!</h1>\n          <p>In this codelab we're going to learn the basics of TypeScript and Angular2.</p>         \n          <p>The slides for the codelab are available using \n          <a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">here</a></p>         \n          <p>Enjoy, and please leave your feedback.</p>         \n          <p>List of known issues:</p>         \n          <ul>\n            <li>There are no type definitions imported in the editor.</li>\n            <li>Mocha is used for testing instead of jasmine. </li>\n            <li>Forms/Routing milestone is missing.</li>\n            <li>File naming scheme with a dot should be used, e.g. \"app.component.ts\", not \"AppComponent.ts\".</li>\n            <li>The app is not as beautiful as it could have been.</li>\n          </ul>         \n             <p>Missing milestones/Topics for the advance course:</p>         \n          <ul>\n            <li>Angular-cli.</li>\n            <li>Data flows</li>\n            <li>Rxjs</li>\n            <li>CSS and styling</li>\n          </ul>         \n          \n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `Let's start`\n          },\n          {\n            name: 'Typescript',\n            path: '0-intro',\n            description: `\n          <p>Let's create our first TypeScript module.</p>\n          <p>It will be a class called \"Meetup\".</p> \n          <p>It will take a list of guests, and will have a getRsvp method, which will only return people who're coming.</p> \n          <p>As you can see in the main.ts file we have 4 people signed up, but Charles Darwin had a last minute change of plans, \n          so only 3 people should be returned.</p> \n           \n        `,\n            solutions: [\n              files.meetup.solved\n            ],\n            fileTemplates: [\n              evaled(files.meetup.initial),\n              evaled(files.mainMeetup.initial),\n              testFile()\n            ]\n          },\n          {\n            name: `Success`,\n            path: '0-intro',\n            description: `\n         You're done with the first milestone, and should now understand the basics of TypeScript!\n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `Start on the app!`\n          },\n\n        ]\n      },\n      {\n        name: 'Bootstrapping your app',\n        selectedExerciseIndex: 0,\n        exercises: [\n          {\n            name: 'Intro',\n            path: '1-bootstrap/intro',\n            description: `\n          <h1>Let's build our first Angular 2 app!</h1>\n          <p>This is how it's going to look like</p>\n          \n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <h1>Hello Angular 2!</h1>\n            </div>\n          </div>\n          <p>3 simple steps: </p>\n          <ol>\n            <li>Create the component</li>\n            <li>Create the module</li>\n            <li>Bootstrap the module</li>\n          </ol>\n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `I'm a ready, let's start!`\n          },\n          {\n            name: 'Create a component',\n            path: '1-bootstrap/0-component',\n            description: `\n            <p>Let's create our first component!</p>\n            <p>For this exercise we'll create module and bootstrap everything.\n             Just make sure the component looks right.</p>\n`,\n            solutions: [\n              files.appComponent.solved\n            ],\n            fileTemplates: [\n              evaled(files.appComponent.initial),\n              ...hidden(\n                files.appModule.solved,\n                files.bootstrap.solved\n              ),\n              testFile()\n            ]\n          }, {\n            name: 'Create a module',\n            path: '1-bootstrap/1-module',\n            description: `\n        Now we got the component, but we need to wrap it in a module. For this exercise we'll bootstrap the module for you.`,\n            solutions: [\n              files.appModule.solved\n            ],\n            fileTemplates: [\n              files.appModule.initial,\n              ...justForReference(\n                files.appComponent.solved\n              ),\n              ...hidden(\n                files.bootstrap.solved\n              ),\n              testFile()\n            ]\n          },\n          {\n            name: 'Bootstrap the module',\n            path: '1-bootstrap/2-bootstrap',\n            description: `\n          <p>Now we got module and component ready, let's bootstrap it!</p>\n          <p>There's no really simple way to test it, so just make sure your app displays: 'Hello CatTube!'</p>`,\n            solutions: [\n              files.bootstrap.solved\n            ],\n            fileTemplates: [\n              files.bootstrap.initial,\n              ...justForReference(\n                files.appComponent.solved,\n                files.appModule.solved\n              )\n            ]\n          },\n          {\n            name: 'success',\n            path: '1-bootstrap/outro',\n            description: `\n          <h1>Congrats on your first Angular2 app</h1>\n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `Let's learn the templates!`\n          },\n        ]\n      },\n      {\n        name: 'Templates',\n        selectedExerciseIndex: 0,\n        exercises: [\n          {\n            name: 'Templates',\n            path: '1-bootstrap/intro',\n            description: `\n          <h1>Let's work with angular templates</h1>\n          <p>As a result we'll see our cats displayed.</p>\n          \n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>              \n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n        \n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `I'm a ready, let's start!`\n          },\n          {\n            name: 'Set up the page',\n            description: `Let's setup a header, a search box, and a search button for our component!`,\n            path: '2-templates/0-header-input',\n            solutions: [\n              files.appHtml.withSearchBox\n            ],\n            fileTemplates: [\n              files.appHtml.initial,\n              ...justForReference(\n                files.appComponent.withTemplate,\n                files.appModule.solved,\n                files.bootstrap.withTemplateLoader,\n              ),\n              testFile(),\n            ],\n            tests: []\n          }, {\n            name: 'Add some action',\n            description: `Now let's add search method and display a message when there are no videos.`,\n            path: '2-templates/1-no-videos',\n            solutions: [\n              files.appHtml.withNoVideosMessage,\n              files.appComponent.withVideos,\n            ],\n            fileTemplates: [\n              files.appComponent.withTitle,\n              files.appHtml.withSearchBox,\n              ...justForReference(\n                files.appModule.solved,\n                files.bootstrap.withTemplateLoader,\n              ),\n              testFile()\n            ],\n            tests: []\n          }, {\n            name: 'Display all videos',\n            description: `Finally let's iterate over the videos.`,\n            path: '2-templates/2-all-videos',\n            solutions: [\n              files.appHtml.withAllVideos,\n              files.appComponent.withNgInit,\n            ],\n            fileTemplates: [\n              files.appHtml.withNoVideosMessage,\n              files.appComponent.withVideos,\n              ...justForReference(\n                files.appModule.solved,\n                files.bootstrap.withTemplateLoader,\n              ),\n              testFile()\n            ],\n            tests: []\n          }\n        ]\n      },\n      {\n        name: 'Dependency Injection',\n        selectedExerciseIndex: 0,\n        exercises: [{\n          name: 'Templates',\n          path: '1-bootstrap/intro',\n          description: `\n          <h1>Let's inject a service.</h1>\n          <p>Using a service is way better than hardcoded data. As a result we get even more cats.</p>\n          \n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <input placeholder=\"video\" type=\"text\">\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div><div>\n                  <h2>More kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div><div>\n                  <h2>Another kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten2.jpg\" src=\"/assets/images/kitten2.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n        \n        `,\n          fileTemplates: [],\n          tests: [],\n          messageNext: `I'm a ready, let's start!`\n        }, {\n          name: 'Service injection',\n          description: `\n          Now we're fetching the videos using a service instead of having them hardcoded.\n        `,\n          path: '3-dependency-injection',\n          solutions: [\n            files.videoService.injectable,\n            files.appModule.withVideoService,\n            files.appComponent.withVideoService,\n          ],\n          fileTemplates: [\n            files.videoService.initial,\n            files.appModule.withVideoServiceInjected,\n            files.appComponent.withVideoServiceImported,\n            ...justForReference(\n              files.appHtml.withAllVideos,\n              files.videoItem.initial,\n              files.api.initial,\n              files.bootstrap.withTemplateLoader,\n            ),\n            testFile()\n          ],\n          tests: []\n        }]\n      },\n      {\n        name: 'Component Tree',\n        selectedExerciseIndex: 0,\n        exercises: [\n          {\n            name: 'Intro',\n            path: '1-bootstrap/intro',\n            description: `\n          <h1>Let's create a Video component!</h1>\n          <p>Now instead of having the video html in the app component, we're going to have\n            a separate component for the video info.</p>\n          <p>We are also going to use this moment to add more information: description, amount of views and amount of likes. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                </div>\n              </div>\n            </div>          \n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `I'm a ready, let's start!`\n          },\n          {\n\n            name: 'Create VideoComponent',\n            description: `<p>Now instead of having the video html in the app component, we're going to have \n            a separate component for the video info.</p>\n            <p>We are also going to use this moment to add more information: description, amount of views and amount of likes. </p>\n            `,\n            path: '4-component-tree/0-add-video-component',\n            solutions: [\n              files.videoHtml.withInfo,\n              files.videoComponent.withInput,\n              files.appModule.withVideoService,\n            ],\n            fileTemplates: [\n              files.videoComponent.initial,\n              files.videoHtml.initial,\n              ...justForReference(\n                files.appModule.withVideoComponentInjected,\n                files.videoService.injectable,\n                files.appHtml.withAllVideos,\n                files.appComponent.withVideoService,\n                files.videoItem.initial,\n                files.api.initial,\n                files.bootstrap.withTemplateLoader,\n              ),\n              testFile()\n            ],\n            tests: []\n          },\n          {\n            name: 'Use VideoComponent',\n            description: `Use VideoComponent in the app.`,\n            path: '4-component-tree/1-use-video-component',\n            solutions: [\n              files.appModule.withVideoComponent,\n              files.appHtml.withVideoComponent,\n            ],\n            fileTemplates: [\n              files.appModule.withVideoComponentInjected,\n              files.appHtml.withAllVideos,\n              ...justForReference(\n                files.videoHtml.withInfo,\n                files.videoComponent.withInput,\n                files.appComponent.withVideoService,\n                files.videoService.injectable,\n                files.videoItem.initial,\n                files.api.initial,\n                files.bootstrap.withTemplateLoader\n              ),\n              testFile()\n            ],\n            tests: []\n          }]\n      }, {\n        name: 'Custom events',\n        selectedExerciseIndex: 0,\n        exercises: [\n          {\n            name: 'Intro',\n            path: '1-bootstrap/intro',\n            description: `\n          <h1>Let's try  using custom events!</h1>\n          <p>We'll add a thumbs component which will emit 'onThumbs' event.  </p>\n          <p>Then in the video component we're going to listed to the event and change the amount of like accordingly.</p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>          \n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `I'm a ready, let's start!`\n          },\n          {\n            name: 'Create ThumbsComponent',\n            description: `<p>Let's try some custom events now. </p>\n            <p>We'll create a thumbs component which will send thumbsUp/thumbsDown event </p>\n  `,\n            path: '4-z-custom-events/0-add-thumb-component',\n            solutions: [\n              files.thumbsHtml.solved,\n              files.thumbsComponent.solved,\n            ],\n            fileTemplates: [\n              files.thumbsHtml.initial,\n              files.thumbsComponent.initial,\n              ...justForReference(\n                files.api.initial,\n                files.appModule.thumbs,\n                files.bootstrap.withTemplateLoader,\n              ),\n              testFile(),\n              ...hidden({\n                  filename: 'index.html',\n                  code: '<my-thumbs></my-thumbs>'\n                },\n              )\n            ],\n            tests: []\n          },\n          {\n            name: 'Use ThumbsComponent',\n            description: `Use VideoComponent in the app.`,\n            path: '4-z-custom-events/1-use-thumb-component',\n            solutions: [\n              files.appModule.withThumbsComponent,\n              files.videoHtml.withThumbs,\n              files.videoComponent.withThumbsEventHandled\n            ],\n            fileTemplates: [\n              files.videoHtml.withInfo,\n              files.videoComponent.withThumbsInjected,\n              files.appModule.withThumbsInjected,\n              ...justForReference(\n                files.thumbsHtml.solved,\n                files.thumbsComponent.solved,\n                files.appHtml.withVideoComponent,\n                files.appComponent.withVideoService,\n                files.videoService.injectable,\n                files.videoItem.initial,\n                files.api.initial,\n                files.bootstrap.withTemplateLoader,\n              ),\n              testFile()\n            ],\n            tests: []\n          }]\n      }, {\n        name: 'Content projection',\n        selectedExerciseIndex: 0,\n        exercises: [\n\n          {\n            name: 'Intro',\n            path: '1-bootstrap/intro',\n            description: `\n          <h1>Let's project some content!</h1>\n          <p>In this milestone we'll create a component called 'TogglePanel'</p>\n          <p>It will actually take 2 divs, but only display one at a time. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">            \n                  <div>This is the description. Once you click 'show meta' button it will be gone.  (please don't try clicking it here, I'm just a screenshot)</div>\n                  <div>[Show meta]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>               \n              \n            <p>So when you click the 'Show meta button', description is gone, likes and views are displayed instead.</p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">            \n                  <div>Likes: 1000</div>\n                  <div>Views: 1000000</div>\n                  <div>[Show description]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>          \n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `I'm a ready, let's start!`\n\n\n          },\n          {\n            // TODO: See if we can maybe bootstrap only video component, not the whole app for this one.\n            name: 'Add TogglePanelComponent',\n            description: `Let's create a component which will use content projection to toggle between description and meta information. `,\n            path: '5-content-projection/0-add-toggle-panel-component',\n            solutions: [\n              files.togglePanelHtml.solved,\n              files.togglePanelComponent.solved,\n            ],\n            fileTemplates: [\n              files.togglePanelHtml.initial,\n              files.togglePanelComponent.initial,\n              files.wrapperComponent.initial,\n              files.appModule.wrapper,\n              {\n                filename: 'index.html',\n                code: '<my-wrapper></my-wrapper>'\n              },\n              files.bootstrap.withTemplateLoader,\n              testFile()\n            ],\n            tests: []\n          },\n          {\n            name: 'Use TogglePanelComponent',\n            description: `Now let's use the component.`,\n            path: '5-content-projection/1-use-toggle-panel',\n            solutions: [\n              files.appModule.withTogglePanel,\n              files.videoHtml.withTogglePanel\n            ],\n            fileTemplates: [\n              files.appModule.withTogglePanelInjected,\n              files.videoHtml.withInfo,\n              ...justForReference(\n                files.videoComponent.withInput,\n                files.togglePanelHtml.solved,\n                files.togglePanelComponent.solved,\n                files.appHtml.withVideoComponent,\n                files.appComponent.withVideoService,\n                files.videoService.injectable,\n                files.videoItem.initial,\n                files.api.initial,\n                files.thumbsHtml.solved,\n                files.thumbsComponent.solved,\n                files.bootstrap.withTemplateLoader,\n              ),\n              testFile()\n            ],\n            tests: []\n          }]\n      },\n      {\n        name: 'Parent-container',\n        selectedExerciseIndex: 0,\n        exercises: [{\n          name: 'Intro',\n          path: '1-bootstrap/intro',\n          description: `\n          <h1>Let's inject parent component!</h1>\n          <p>In this milestone we'll create create a ContextAdComponent. </p>\n          <p>This component will not use inputs. Instead it will require parent (Video) component and directly look at it's properties. </p>\n          <p>It will display different text depending of if there's a word 'music' in the description. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten dancing</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">            \n                  <div>Decription: music</div>\n                  <div>[Show meta]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                  <div>Context ad: Turn up your speakers</div>                  \n                </div>\n                <div>\n                  <h2>Cute kitten sleeping</h2>\n                  <img ng-reflect-src=\"/assets/images/kitten1.jpg\" src=\"/assets/images/kitten1.jpg\">            \n                  <div>Decription: sleeping</div>\n                  <div>[Show meta]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                  <div>Context ad: Check out our web site.</div>                  \n                </div>\n              </div>\n            </div>          \n                 \n             <p>Note, we are actually calling it ContextComponent, because when it was called ContextAdComponent, adblock blocked it, and I spent 2 hours debugging. </p>\n              \n                   \n        `,\n          fileTemplates: [],\n          tests: [],\n          messageNext: `I'm a ready, let's start!`\n\n\n        },\n          {\n            name: 'Inject parent component',\n            description: `<p>Create a Context(Ad)Component</p>\n            <p>which will inject it's parent component, see what thedescription, and display the value accordingly.</p>\n            <p>Note: We had to get rid of the 'Ad' part of the component, because AdBlock blocked the template.</p>`,\n            path: '6-children',\n            solutions: [\n              files.contextComponent.solved\n            ],\n            fileTemplates: [\n              files.contextComponent.initial,\n\n              {\n                filename: 'context.html',\n                moduleName: 'context',\n                code: '{{text}}'\n              },\n              ...justForReference(\n                files.contextService.initial,\n                files.appModule.withContextComponent,\n                files.videoHtml.withInfo,\n                files.videoComponent.withInput,\n\n                files.togglePanelHtml.solved,\n                files.togglePanelComponent.solved,\n                files.appHtml.withVideoComponent,\n                files.appComponent.withVideoService,\n                files.videoService.injectable,\n                files.videoItem.initial,\n                files.api.initial,\n                files.thumbsHtml.solved,\n                files.thumbsComponent.solved,\n                // files.bootstrap.solved\n              ),\n              testFile()\n              /*\n               tsFile('ContextComponent'),\n               htmlFile('context'),\n               htmlFile('video'),\n               ...justForReference(\n               tsFile('AppModule'),\n               tsFile('ContextService'),\n               tsFile('VideoComponent'),\n               htmlFile('app', {path: '4-component-tree/1-use-video-component/solution'}),\n               ),\n               ...hidden(\n               htmlFile('index'),\n               htmlFile('togglepanel', {path: '5-content-projection/0-add-toggle-panel-component/solution'}),\n               sharedTsFile('TogglePanelComponent', {path: '5-content-projection/0-add-toggle-panel-component/solution'}),\n               tsFile('AppComponent', {path: '4-component-tree/1-use-video-component/solution'}),\n               sharedAppBootstrap(),\n               sharedVideoInterface(),\n               sharedTsFile('VideoService'),\n               sharedApiFile(),\n               ),*/\n              //testFile(),\n            ],\n            tests: []\n          }]\n      },\n      /*\n       {\n       name: 'Pipes',\n       selectedExerciseIndex: 0,\n       exercises: [{\n       name: 'Create a pipe',\n       description: 'Create a fuzzy pipe, which takes a date in YYYY-MM-DD format, and returns how many days ago this was.',\n       path: '7-pipes/0-create-pipe',\n       fileTemplates: [\n       tsFile('FuzzyPipe', {code: ``}),\n       testFile()\n       ],\n       tests: []\n       }, {\n       name: 'Use the pipe',\n       description: 'Now include the app in the module and use in the app.',\n       path: '7-pipes/1-use-pipe',\n       fileTemplates: [\n       htmlFile('video', {path: '6-children/solution'}),\n       tsFile('AppModule'),\n       tsFile('FuzzyPipe', {readonly: true, path: '7-pipes/0-create-pipe/solution'}),\n       testFile(),\n       ...hidden(\n       tsFile('ContextComponent', {path: '6-children'}),\n       htmlFile('context', {path: '6-children'}),\n       tsFile('ContextService', {path: '6-children'}),\n       tsFile('VideoComponent', {path: '6-children'}),\n       htmlFile('app', {path: '4-component-tree/1-use-video-component/solution'}),\n       htmlFile('togglepanel', {path: '5-content-projection/0-add-toggle-panel-component/solution'}),\n       sharedTsFile('TogglePanelComponent', {path: '5-content-projection/0-add-toggle-panel-component/solution'}),\n       tsFile('AppComponent', {path: '4-component-tree/1-use-video-component/solution'}),\n       sharedAppBootstrap({hidden: true}),\n       sharedVideoInterface({hidden: true}),\n       sharedTsFile('VideoService', {hidden: true}),\n       sharedApiFile({hidden: true})\n       ),\n       testFile(),\n       ],\n       tests: []\n       }]\n       },\n       {\n       name: 'Tests',\n       selectedExerciseIndex: 0,\n       exercises: [{\n       name: 'Sample tests',\n       description: `\n       <p>In this milestone instead of changing the code to pass the test\n       you'll have to change the test to pass the code. </p>\n\n       <p>This milestone is experimental and temporarily uses 'mocha' and 'chai' instead of jasmine.</p>\n       `,\n       path: '8-tests/0-test-component',\n       fileTemplates: [\n       Object.assign(testFile(), {hidden: false}),\n       htmlFile('video', {path: '6-children/solution'}),\n       tsFile('FuzzyPipe', {readonly: true, path: '7-pipes/0-create-pipe/solution'}),\n       testFile(),\n       ...hidden(\n       tsFile('ContextComponent', {path: '6-children'}),\n       htmlFile('context', {path: '6-children'}),\n       tsFile('ContextService', {path: '6-children'}),\n       tsFile('VideoComponent', {path: '6-children'}),\n       htmlFile('app', {path: '4-component-tree/1-use-video-component/solution'}),\n       htmlFile('togglepanel', {path: '5-content-projection/0-add-toggle-panel-component/solution'}),\n       tsFile('TogglePanelComponent', {path: '5-content-projection/0-add-toggle-panel-component/solution'}),\n       tsFile('AppComponent', {path: '4-component-tree/1-use-video-component/solution'}),\n       sharedAppBootstrap({hidden: true}),\n       sharedVideoInterface({hidden: true}),\n       sharedTsFile('VideoService', {hidden: true}),\n       sharedApiFile({hidden: true})\n       )\n       ],\n       tests: []\n       }]\n       },*/\n      {\n        name: 'Survey',\n        selectedExerciseIndex: 0,\n        exercises: [{\n          name: 'All done!',\n          description: `\n        Please fill out <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">The survey</a>\n        (which is different from the feedback form)\n`,\n          path: 'test',\n          fileTemplates: [],\n          tests: []\n        }]\n      }\n    ]\n  }\n  ;\n\n",
  "file-builders/AppModuleBuilder.ts": "import {TsGenerator} from \"./TsGenerator\";\nimport {JsFileConfig} from \"../../app/js-file-config\";\nimport {TsBuilder} from \"./TsBuilder\";\n\nexport class AppModuleBuilder extends TsBuilder implements JsFileConfig {\n  public filename;\n  ngImports = [];\n  ngDeclarations = [];\n  ngBootstrap = [];\n  ngProviders = [];\n  public exports;\n\n\n  get code() {\n    return `import {NgModule} from '@angular/core';\n      import {BrowserModule} from '@angular/platform-browser';\n      \n      @NgModule({\n        imports: ${TsGenerator.generateModuleNames(this.ngImports)},\n        declarations: ${TsGenerator.generateModuleNames(this.ngDeclarations)},\n        providers: ${TsGenerator.generateModuleNames(this.ngProviders)},\n        bootstrap: ${TsGenerator.generateModuleNames(this.ngBootstrap)}\n      })\n      export class AppModule {\n      }\n      `;\n  }\n\n  constructor(moduleName: string) {\n    super(moduleName);\n  }\n\n  copy() {\n    return Object.assign({}, this, {code: this.code});\n\n  }\n\n  public addNgImport(file: JsFileConfig) {\n    this.addImport(file);\n    this.ngImports.push(file.moduleName);\n    return this;\n  }\n}\n",
  "file-builders/Builder.ts": "export interface Builder {\n  generate(): string;\n}\n",
  "file-builders/FileBuilder.ts": "import {FileConfig} from \"../../app/file-config\";\n\nexport class FileBuilder implements FileConfig {\n\n  constructor(public filename: string) {\n  }\n\n  update(callback) {\n    callback(this);\n    return this.generate();\n  }\n\n  public generate() {\n\n  }\n\n  fork() {\n    throw new Error('not implemented');\n  }\n}\n",
  "file-builders/html/ClHtmlDiv.ts": "import {ClHtmlElement} from \"./ClHtmlElement\";\nexport class ClHtmlDiv implements ClHtmlElement {\n  name = 'div';\n  children: ClHtmlElement[] = [];\n\n\n  generateChildren() {\n    return this.children.map(child => child.generate()).join('\\n');\n  }\n\n  generate(): string {\n    return `<div>${this.generateChildren()}</div>`;\n  }\n\n  html(children: ClHtmlElement) {\n    this.children = [children];\n    return this;\n  }\n\n  find(name: string) {\n    return this.children.find(child => child.name === name);\n  }\n\n  append(child: ClHtmlElement) {\n    this.children.push(child);\n    return this;\n  }\n\n  constructor() {\n\n  }\n\n  select(elementType) {\n    return this.children.find(child => child instanceof elementType) as ClHtmlDiv;\n  }\n}\n",
  "file-builders/html/ClHtmlElement.ts": "export interface  ClHtmlElement {\n  // should be called class\n  name: string;\n  generate(): string;\n}\n",
  "file-builders/html/ClHtmlTextNode.ts": "import {ClHtmlElement} from \"./ClHtmlElement\";\n\nexport class ClHtmlTextNode implements ClHtmlElement {\n  generate(): string {\n    return this.content;\n  }\n\n  replaceContent(content: string) {\n    this.content = content;\n  }\n\n  constructor(private content: string, public name: string = 'text') {\n\n  }\n}\n",
  "file-builders/HtmlBuilder.ts": "import {FileConfig} from \"../../app/file-config\";\nimport {FileBuilder} from \"./FileBuilder\";\nimport {ClHtmlDiv} from \"./html/ClHtmlDiv\";\nimport {ClHtmlElement} from \"./html/ClHtmlElement\";\n\n// This is an ugly wrapper, should be cleaned up\nexport class HtmlBuilder extends FileBuilder {\n  public filename;\n\n  html = new ClHtmlDiv();\n\n\n  public generate(): FileConfig {\n    return Object.assign({\n      filename: this.filename + '.html',\n      moduleName: this.filename,\n      type: 'html',\n      code: this.html.generateChildren()\n    })\n  }\n\n  constructor(moduleName: string) {\n    super(moduleName);\n  }\n\n  append(element: ClHtmlElement) {\n    this.html.append(element);\n  }\n\n  insert(element: ClHtmlElement) {\n    this.html.html(element);\n  }\n\n  select(elementType) {\n    return this.html.select(elementType);\n  }\n}\n",
  "file-builders/JsBuilder.ts": "import {FileConfig} from \"../../app/file-config\";\nimport {TsGenerator} from \"./TsGenerator\";\nimport {JsFileConfig} from \"../../app/js-file-config\";\nimport {FileBuilder} from \"./FileBuilder\";\n\nexport class JsBuilder extends FileBuilder implements JsFileConfig {\n  protected imports = [];\n  exports;\n\n\n  get code() {\n    return `debugger`;\n  }\n\n\n  constructor(moduleName: string) {\n    super(moduleName);\n    this.exports = [moduleName];\n  }\n\n\n  public removeImport(file: JsFileConfig) {\n    this.imports = this.imports.filter(imp => imp !== file);\n  }\n\n  public addImport(importConfig: JsFileConfig) {\n    if (!Array.isArray(importConfig.exports)) {\n      debugger\n    }\n    // Only add once\n    if (this.imports.indexOf(importConfig) === -1) {\n      this.imports.push(importConfig);\n    }\n    return this;\n  }\n}\n",
  "file-builders/test.ts": "import {TsBuilder} from \"./TsBuilder\";\nimport {TsClass} from \"./ts/TsClass\";\nimport {TsDecorator} from \"./ts/TsDecorator\";\n\nconst appModule = new TsBuilder('AppModule');\n\nappModule.update((builder: TsBuilder) => {\n  builder.addImport({filename: '@angular/core', exports: ['Component']});\n  builder.add(new TsClass(builder.filename));\n  builder.addBefore(new TsDecorator('NgModule'), TsClass);\n});\n\n\nconst code = appModule.update((builder: TsBuilder) => {\n  (builder.find(TsDecorator) as TsDecorator)\n    .pushValue('imports', '\"AppComponent\"');\n\n});\n\n\nconsole.log(code);\n\n",
  "file-builders/ts/TsArray.ts": "import {TsStatement} from \"./TsStatement\";\nimport {TsExpression} from \"./TsExpression\";\nexport class TsArray implements TsExpression {\n  list = [];\n\n  name = 'array';\n  generate(): string {\n    return JSON.stringify(this.list);\n  }\n\n  constructor() {\n\n  }\n}\n",
  "file-builders/ts/TsClass.ts": "import {TsStatement} from \"./TsStatement\";\nimport {TsVarDec} from \"./TsVarDec\";\nimport {TsExpression} from \"./TsExpression\";\nimport {TsMethod} from \"./TsMethod\";\n\n\nexport class TsClass implements TsStatement {\n\n  props: Array<{name: TsVarDec, value: TsStatement, type?: string}> = [];\n  methods: TsMethod[] = [];\n  constr: TsMethod;\n\n  generate(): string {\n    // Export all the way.\n    return `export class ${this.name} {${this.generateConstructor()}${this.generateProps()}${this.generateMethods()}}`;\n  }\n\n  public filename;\n  public exports;\n\n\n  public generateConstructor() {\n    if (!this.constr) return '';\n    return '\\n  ' + this.constr.generate();\n  }\n\n  public setConstructor(constr: TsMethod) {\n    this.constr = constr;\n  }\n\n\n  get code() {\n    return `debugger`;\n  }\n\n\n  addProp(name: TsVarDec, value: TsExpression, type?) {\n    this.props.push({name, value, type})\n    return this;\n  }\n\n  addMethod(method: TsMethod) {\n    this.methods.push(method);\n    return this;\n  }\n\n  findMethod(search) {\n    return this.methods.find(method => method.name === search);\n  }\n\n  generateProps() {\n    if (!this.props.length) {\n      return '';\n    }\n\n    return '\\n' + this.props.map(prop =>\n        `  ${prop.name.generate()} = ${prop.value.generate()}`).join(';\\n')\n      + ';\\n';\n  }\n\n  generateMethods() {\n    if (!this.methods.length) {\n      return '';\n    }\n\n    return '\\n  ' + this.methods.map(method => method.generate()).join('\\n  ')\n  }\n\n  constructor(public name: string) {\n\n  }\n}\n",
  "file-builders/ts/TsConstant.ts": "import {TsStatement} from \"./TsStatement\";\n\nexport class TsConstant implements TsStatement {\n  generate(): string {\n    return `const ${this.name} = ${JSON.stringify(this.value, null, '  ')};\\n`;\n  }\n\n  public filename;\n  public exports;\n\n\n  get code() {\n    return `debugger`;\n  }\n\n  constructor(public name: string, private value: any) {\n\n  }\n}\n",
  "file-builders/ts/TsDecorator.ts": "import {TsStatement} from \"./TsStatement\";\nexport class TsDecorator implements TsStatement {\n\n  generate(): string {\n    if (Object.keys(this.props).length === 0) {\n      return `@${this.name}()`;\n    }\n\n    return `@${this.name}({\n  ${this.generateProps()}     \n})`;\n  }\n\n\n  public filename;\n  public exports;\n\n  props = {};\n\n  public setValue(prop, value) {\n    this.props[prop] = value;\n  }\n\n  public pushValue(prop, value) {\n    if (!this.props[prop]) {\n      this.props[prop] = []\n    }\n\n    this.props[prop].push(value);\n  }\n\n  constructor(public name: string) {\n\n  }\n\n  private generateProps() {\n    return Object.keys(this.props).map((key) => {\n      if (Array.isArray(this.props[key])) {\n        return `${key}: [${this.props[key].join(',')}]`\n      }\n      return `${key}: ${JSON.stringify(this.props[key])}`\n\n    }).join(',\\n  ');\n  }\n\n  removeValue(key: string, value?: string) {\n    if (!value) {\n      delete this.props[key];\n      return;\n    }\n    this.props[key] = this.props[key].filter(prop => prop !== value);\n  }\n}\n",
  "file-builders/ts/TsExpression.ts": "import {TsStatement} from \"./TsStatement\";\n\nexport interface TsExpression extends TsStatement {\n  generate(): string;\n}\n",
  "file-builders/ts/TsFunction.ts": "import {TsStatement} from \"./TsStatement\";\nimport {TsExpression} from \"./TsExpression\";\nimport {TsVarDec} from \"./TsVarDec\";\nexport class TsFunction implements TsExpression {\n  generate(): string {\n    throw new Error('not implemented');\n  }\n\n  replaceBody(body) {\n    this.body = body;\n    return this;\n  }\n\n  constructor(public name: string, public parameters: Array<TsVarDec>, public body: TsExpression) {\n\n  }\n}\n",
  "file-builders/ts/TsMethod.ts": "import {TsFunction} from \"./TsFunction\";\n\n\n\nexport class TsMethod extends TsFunction {\n\n\n  generate(): string {\n    const params = this.parameters.map(param => param.generate()).join(',');\n\n    return `${this.name}(${params}){\\n    ${this.body.generate()}\\n  }`\n      + '\\n'\n  }\n}\n",
  "file-builders/ts/TsPlainCode.ts": "import {TsStatement} from \"./TsStatement\";\nexport class TsPlainCode implements TsStatement {\n  generate(): string {\n    return this.code;\n  }\n\n  replaceContent(code) {\n    this.code = code;\n  }\n  appendContent(code) {\n    this.code += code;\n  }\n\n  constructor(public code: string, public name = 'any') {\n\n  }\n}\n",
  "file-builders/ts/TsStatement.ts": "export interface TsStatement {\n  name: string;\n  generate(): string;\n}\n",
  "file-builders/ts/TsString.ts": "import {TsExpression} from \"./TsExpression\";\nexport class TsString implements TsExpression {\n  public name = 'string';\n  generate(): string {\n    return JSON.stringify(this.text);\n  }\n\n  constructor(private text: string) {\n\n  }\n}\n",
  "file-builders/ts/TsVarDec.ts": "import {TsStatement} from \"./TsStatement\";\nexport enum TsAcssesModifier {\n  PUBLIC,\n  PRIVATE,\n  PROTECTED\n}\nconst accessModifierMap = {\n  [TsAcssesModifier.PUBLIC]: 'public',\n  [TsAcssesModifier.PRIVATE]: 'private',\n  [TsAcssesModifier.PROTECTED]: 'protected'\n};\n\nexport class TsVarDec implements TsStatement {\n  list = [];\n\n\n  generate(): string {\n    return (this.decorator ? this.decorator + ' ' : '') +\n      (this.accessModifier ? accessModifierMap[this.accessModifier] + ' ' : '') +\n      this.name + (this.type ? ': ' + this.type : '');\n  }\n\n  constructor(public name: string, private type?: string, private accessModifier?: TsAcssesModifier, public decorator?: string) {\n\n  }\n}\n",
  "file-builders/TsBuilder.ts": "import {JsFileConfig} from \"../../app/js-file-config\";\nimport {JsBuilder} from \"./JsBuilder\";\nimport {TsStatement} from \"./ts/TsStatement\";\nimport {TsGenerator} from \"./TsGenerator\";\nimport {FileConfig} from \"../../app/file-config\";\n\nexport class TsBuilder extends JsBuilder implements JsFileConfig {\n  public filename;\n  public exports;\n  extra: any;\n\n  private statements: TsStatement[] = [];\n\n\n  public add(statement: TsStatement) {\n    this.statements.push(statement);\n  }\n\n  public findIndex(existingStatementType, name) {\n    let i = 0;\n    for (; i < this.statements.length; i++) {\n      if (this.statements[i] instanceof existingStatementType && (!name || this.statements[i].name === name)) {\n        break;\n      }\n    }\n    if (i === this.statements.length) {\n      throw new Error(`Attempted to insert before ${existingStatementType}, but no such type found.`);\n    }\n    return i;\n  }\n\n  public addFirst(statement: TsStatement) {\n    this.statements.unshift(statement);\n  }\n\n  public find(existingStatementType, name?): TsStatement {\n    return this.statements[this.findIndex(existingStatementType, name)];\n  }\n\n  public addBefore(statement: TsStatement, existingStatementType, name?) {\n    this.statements.splice(this.findIndex(existingStatementType, name), 0, statement);\n  }\n\n  public configure(extra) {\n    this.extra = extra;\n    return this;\n  }\n\n  public generate(): FileConfig {\n\n    return Object.assign({\n      filename: this.filename + '.ts',\n      moduleName: this.filename,\n      type: 'ts',\n      code: `${this.imports.length ? TsGenerator.generateImports(this.imports) + '\\n\\n' :\n        ''}${this.statements.map(statement => statement.generate()).join('\\n')}`\n    }, this.extra);\n  }\n\n  constructor(moduleName: string) {\n    super(moduleName);\n  }\n\n}\n",
  "file-builders/TsGenerator.ts": "import {FileConfig} from \"../../app/file-config\";\nimport {JsFileConfig} from \"../../app/js-file-config\";\n\nexport const TsGenerator = {\n  generateImports(files: JsFileConfig[]){\n    return files.map(file => `import {${file.exports.join(',')}} from '${file.code ? './' : ''}${file.filename}';`)\n      .join('\\n');\n  },\n\n  generateModuleNames(files: FileConfig[]){\n    const moduleNames = files.map(file => file.moduleName);\n    return JSON.stringify(moduleNames);\n  }\n};\n",
  "file-builders/Vcs.ts": "import {FileBuilder} from \"./FileBuilder\";\n\nexport class Vcs {\n  versions: any = {};\n\n  constructor(private file: FileBuilder) {\n    this.versions['file'] = file;\n\n  }\n\n  commit(commitId, callback) {\n    this.file.update(callback);\n    this.versions[commitId] = this.file.generate();\n    return this;\n  }\n\n  build() {\n    return this.versions;\n  }\n\n\n}\n",
  "files/Api.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\n\nimport {VideoItem} from \"./VideoItem\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\n\nexport const Api = new Vcs(new TsBuilder('Api'))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.addImport(VideoItem.file);\n    builder.addFirst(new TsPlainCode(`let FAKE_VIDEOS = [\n  {\n    title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 49329,\n    date: '2016-11-25'\n  },\n  {\n    title: \"Kitten on the tree\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-11-21'\n  }, {\n    title: \"More kitten\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-10-02'\n\n  }, {\n    title: \"Another kitten\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-09-02'\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n];\n\nexport const Api = {\n  fetch(searchString: string): Array<VideoItem> {\n    return FAKE_VIDEOS.filter((video) =>\n      video.title.indexOf(searchString) >= 0\n    );\n  }\n};`))\n  })\n  .build();\n",
  "files/AppComponent.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\n\nexport const AppComponent = new Vcs(new TsBuilder('AppComponent'))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.addImport(imports.angular.core.Component)\n  }).commit('solved', (builder: TsBuilder) => {\n    // Class\n    builder.add(new TsClass(builder.filename));\n    const decorator = new TsDecorator('Component');\n    decorator.setValue('selector', 'my-app');\n    decorator.setValue('template', '<h1>Hello CatTube!</h1>');\n    builder.addBefore(decorator, TsClass);\n  })\n  .commit('withTitle', (builder: TsBuilder) => {\n    (builder.find(TsClass) as TsClass).addProp(new TsVarDec('title'), new TsString('CatTube'))\n  })\n  .commit('withTemplate', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.setValue('templateUrl', './app.html');\n    decorator.removeValue('template');\n  })\n  .commit('withVideos', (builder: TsBuilder) => {\n    (builder.find(TsClass) as TsClass).addProp(new TsVarDec('videos'), new TsArray());\n    (builder.find(TsClass) as TsClass).addMethod(new TsMethod('search',\n      [new TsVarDec('searchString', 'string')],\n      new TsPlainCode('')))\n  })\n  .commit('withFakeVideos', (builder: TsBuilder) => {\n    builder.addFirst(new TsConstant('FAKE_VIDEOS', [\n      {\n        title: \"Cute kitten\",\n        src: \"/assets/images/kitten1.jpg\"\n      },\n      {\n        title: \"Kitten on the tree\",\n        src: \"/assets/images/kitten2.jpg\"\n      },\n      {\n        title: \"Serouis cat\",\n        src: \"/assets/images/kitten2.jpg\"\n      },\n    ]));\n  })\n  .commit('withVideosFilter', (builder: TsBuilder) => {\n    (builder.find(TsClass) as TsClass).findMethod('search').replaceBody(\n      new TsPlainCode(`this.videos = FAKE_VIDEOS.filter(video => video.title.indexOf(searchString) >= 0)`));\n  })\n  .commit('withNgInit', (builder: TsBuilder) => {\n    (builder.find(TsClass) as TsClass).addMethod(new TsMethod('ngOnInit', [], new TsPlainCode(`this.search('');`)))\n  })\n  .commit('withVideoServiceImported', (builder: TsBuilder) => {\n    builder.addImport(VideoService.file);\n  })\n  .commit('withVideoService', (builder: TsBuilder) => {\n    (builder.find(TsClass) as TsClass).findMethod('search').replaceBody(new TsPlainCode(`this.videos = this.videoService.search(searchString);`));\n    (builder.find(TsClass) as TsClass).setConstructor(new TsMethod('constructor', [new TsVarDec('videoService', 'VideoService', TsAcssesModifier.PRIVATE)], new TsPlainCode(``)));\n  })\n  .build();\n",
  "files/AppHtml.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {HtmlBuilder} from \"../file-builders/HtmlBuilder\";\nimport {ClHtmlDiv} from \"../file-builders/html/ClHtmlDiv\";\nimport {ClHtmlTextNode} from \"../file-builders/html/ClHtmlTextNode\";\n\nexport const AppHtml = new Vcs(new HtmlBuilder('app'))\n  .commit('initial', (builder: HtmlBuilder) => {\n    builder.append(new ClHtmlDiv());\n  }).commit('withSearchBox', (builder: HtmlBuilder) => {\n    builder.select(ClHtmlDiv).html(new ClHtmlTextNode(`\n  <h1>{{title}}</h1>\n  <input type=\"text\" placeholder=\"video\">\n  <button>Search!</button>\n`));\n  }).commit('withNoVideosMessage', (builder: HtmlBuilder) => {\n    builder.select(ClHtmlDiv).html(new ClHtmlTextNode(`\n  <h1>{{title}}</h1>\n  <input  placeholder=\"video\" #searchString type=\"text\">\n  <button (click)=\"search(searchString.value)\">Search!</button>\n\n  <div *ngIf=\"!videos?.length\">\n    No videos!\n  </div>\n`));\n  }).commit('withAllVideos', (builder: HtmlBuilder) => {\n    builder.select(ClHtmlDiv).append(new ClHtmlTextNode(`\n   <div *ngFor=\"let video of videos\">\n    <h2>{{video.title}}</h2>\n    <img [src]=\"video.src\">\n  </div>\n`, 'allVideos'));\n  }).commit('withVideoComponent', (builder: HtmlBuilder) => {\n    ((builder.select(ClHtmlDiv) as ClHtmlDiv).find('allVideos') as ClHtmlTextNode)\n      .replaceContent(` \n  <my-video *ngFor=\"let video of videos\" [video]=\"video\"></my-video>\n`);\n  }).build();\n\n\n",
  "files/AppModule.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {imports} from \"./imports\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {AppComponent} from \"./AppComponent\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoComponent} from \"./VideoComponent\";\nimport {ThumbsComponent} from \"./ThumbsComponent\";\nimport {WrapperComponent} from \"./WrapperComponent\";\nimport {TogglePanelComponent} from \"./TogglePanelComponent\";\nimport {ContextComponent} from \"./ContextComponent\";\n\nexport const AppModule = new Vcs(new TsBuilder('AppModule'))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.addImport(imports.angular.platformBrowser.BrowserModule)\n      .addImport(imports.angular.core.NgModule).addImport(AppComponent.file);\n\n  })\n  .commit('base', (builder: TsBuilder) => {\n    // Class\n    builder.add(new TsClass(builder.filename));\n\n    // Decorator\n    const decorator = new TsDecorator('NgModule');\n    decorator.pushValue('imports', 'BrowserModule');\n    builder.addBefore(decorator, TsClass);\n  })\n  // Next 2 commits are an ugly hack to get a module with thumbs component only.\n  .commit('thumbs', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('declarations', 'ThumbsComponent');\n    decorator.pushValue('bootstrap', 'ThumbsComponent');\n    builder.addImport(ThumbsComponent.file)\n  })\n  .commit('thumbsRollback', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.removeValue('declarations', 'ThumbsComponent');\n    decorator.removeValue('bootstrap', 'ThumbsComponent');\n    builder.removeImport(ThumbsComponent.file);\n  })\n  .commit('wrapper', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('declarations', 'WrapperComponent');\n    decorator.pushValue('declarations', 'TogglePanelComponent');\n    decorator.pushValue('bootstrap', 'WrapperComponent');\n    builder.addImport(TogglePanelComponent.file);\n    builder.addImport(WrapperComponent.file);\n\n  })\n  .commit('WrapperRollback', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.removeValue('declarations', 'WrapperComponent');\n    decorator.removeValue('declarations', 'TogglePanelComponent');\n    decorator.removeValue('bootstrap', 'WrapperComponent');\n    builder.removeImport(TogglePanelComponent.file);\n    builder.removeImport(WrapperComponent.file);\n  })\n  .commit('solved', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('declarations', 'AppComponent');\n    decorator.pushValue('bootstrap', 'AppComponent');\n  })\n  .commit('withVideoServiceInjected', (builder: TsBuilder) => {\n    builder.addImport(VideoService.file)\n  })\n  .commit('withVideoService', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('providers', 'VideoService');\n  })\n  .commit('withVideoComponentInjected', (builder: TsBuilder) => {\n    builder.addImport(VideoComponent.file)\n  })\n  .commit('withVideoComponent', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('declarations', 'VideoComponent');\n  })\n  .commit('withThumbsInjected', (builder: TsBuilder) => {\n    builder.addImport(ThumbsComponent.file)\n  })\n  .commit('withThumbsComponent', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('declarations', 'ThumbsComponent');\n  })\n  .commit('withTogglePanelInjected', (builder: TsBuilder) => {\n    builder.addImport(TogglePanelComponent.file)\n  })\n  .commit('withTogglePanel', (builder: TsBuilder) => {\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('declarations', 'TogglePanelComponent');\n  })\n  .commit('withContextComponent', (builder: TsBuilder) => {\n    builder.addImport(ContextComponent.file);\n    const decorator = builder.find(TsDecorator) as TsDecorator;\n    decorator.pushValue('declarations', 'ContextComponent');\n  })\n  .build();\n",
  "files/Bootstrap.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {AppModule} from \"./AppModule\";\n\nexport const Bootstrap = new Vcs(new TsBuilder('Bootstrap').configure({bootstrap: true, excludeFromTesting: true}))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.add(new TsPlainCode(\n      `import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {ResourceLoader} from '@angular/compiler';\nimport {AppModule} from './AppModule';\n`, 'imports'));\n  }).commit('solved', (builder: TsBuilder) => {\n    builder.add(new TsPlainCode(`\n    \nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);\n    `, 'bs'));\n  }).commit('withTemplateLoader', (builder: TsBuilder) => {\n\n\n    (builder.find(TsPlainCode, 'imports') as TsPlainCode).appendContent(`import * as code from './code';`);\n    (builder.find(TsPlainCode, 'bs') as TsPlainCode).replaceContent(`\n/** \n * I'm doing some template-loading magic here. \n * You won't need to do thing for your app, but this is a great \n * example of how extensible angular 2 is. \n */\nclass MyResourceLoader extends ResourceLoader {\n  get(url: string): Promise<string> {\n    const templateId = url.replace(/\\\\d*\\.html/, 'Code');\n    let template = code[templateId];\n    if (!template) {\n      debugger;\n    }\n    return Promise.resolve(template);\n  };\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {\n  providers: [\n    {provide: ResourceLoader, useClass: MyResourceLoader}\n  ]\n});\n`);\n\n\n  }).build();\n",
  "files/ContextComponent.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const ContextComponent = new Vcs(new TsBuilder('ContextComponent'))\n  .commit('initial', (builder: TsBuilder) => {\n\n// At this point I'm done using pseudo AST and just stick to simple stuff.\n    builder.add(new TsPlainCode(`import {Component} from '@angular/core';\nimport {ContextService} from \"./ContextService\";\nimport {VideoComponent} from \"./VideoComponent\";\n\n@Component({\n  selector: 'my-ad',\n  templa`+`teUrl: 'context.html'\n})\nexport class ContextComponent {\n  text: string;\n`));\n    builder.add(new TsPlainCode('', 'solution'));\n    builder.add(new TsPlainCode(`\\n}`));\n\n  }).commit('solved', (builder: TsBuilder) => {\n    (builder.find(TsPlainCode, 'solution') as TsPlainCode).replaceContent(`  \n  constructor(\n    public parent: VideoComponent,\n    private  service: ContextService\n  ) {}\n\n  ngOnInit() {\n    this.text = this.service\n      .getAdText(this.parent.video.description);\n  }`);\n  })\n  .build();\n",
  "files/ContextService.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const ContextService = new Vcs(new TsBuilder('ContextService'))\n  .commit('initial', (builder: TsBuilder) => {\n\n// At this point I'm done using pseudo AST and just stick to simple stuff.\n    builder.add(new TsPlainCode(`export class ContextService {\n  getAdText(description) {\n    // Super secret algorithm, please don't share outside of this course.\n    return description.indexOf('music') >= 0 ?\n      'Buy awesome speakers on our web site.' :\n      'Check out our web site';\n  }\n}\n`));\n  })\n  .build();\n",
  "files/imports.ts": "export const imports = {\n  angular: {\n    core: {\n      Component: {filename: '@angular/core', exports: ['Component']},\n      // I know!!\n      ComponentAndInput: {filename: '@angular/core', exports: ['Component', 'Input']},\n      COE: {filename: '@angular/core', exports: ['Component', 'Output', 'EventEmitter']},\n\n      Injectable: {filename: '@angular/core', exports: ['Injectable']},\n      NgModule: {\n        filename: '@angular/core', exports: ['NgModule']\n      }\n    },\n    platformBrowser: {\n      BrowserModule: {\n        filename: '@angular/platform-browser',\n        exports: ['BrowserModule']\n      }\n    }\n  }\n};\n",
  "files/Main.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const Main = new Vcs(new TsBuilder('Main'))\n  .commit('initial', (builder: TsBuilder) => {\n// At this point I'm done using pseudo AST and just stick to simple stuff.\n    builder.add(new TsPlainCode(\n      // This gets the content of the other file.\n      `import {Meetup} from './Meetup';     \n    \n// Below is for your reference, but feel free to play with the code.    \nconst guests = [{\n    rsvp: true,\n    name: 'Sir Isaac Newton'\n  },  \n  {\n    rsvp: true,\n    name: 'Marie Curie'\n  },\n  {\n    rsvp: true,\n    name: 'Albert Einstein'\n  },\n  {\n    rsvp: false,\n    name: 'Charles Darwin'\n  }];\n  \n  const meetup = new Meetup(guests);\n  console.log(meetup.getRsvp());\n\n\n`));\n  })\n  .build();\n",
  "files/Meetup.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const Meetup = new Vcs(new TsBuilder('Meetup'))\n  .commit('initial', (builder: TsBuilder) => {\n\n// At this point I'm done using pseudo AST and just stick to simple stuff.\n    builder.add(new TsPlainCode('// Add your code here', 'solution'));\n  }).commit('solved', (builder: TsBuilder) => {\n    (builder.find(TsPlainCode, 'solution') as TsPlainCode).replaceContent(\n      `export class Meetup {\n  constructor(public guests) {\n  }\n\n  getRsvp() {\n    return this.guests.filter(anglar => anglar.rsvp);\n  }\n}`);\n  })\n  .build();\n",
  "files/ThumbsComponent.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const ThumbsComponent = new Vcs(new TsBuilder('ThumbsComponent'))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.addImport(imports.angular.core.COE);\n\n    builder.add(new TsPlainCode(`/**\n * Yes, TypeScript has enums!\n * There's no nice way to use them in the template though.\n */\nexport enum Thumbs {\n  UP,\n  DOWN\n}\n`));\n    builder.add(new TsClass(builder.filename));\n  }).commit('solved', (builder: TsBuilder) => {\n    const decorator = new TsDecorator('Component');\n    decorator.setValue('selector', 'my-thumbs');\n    decorator.setValue('templateUrl', './thumbs.html');\n\n    builder.addBefore(decorator, TsClass);\n\n    //@Output() onThumbs: EventEmitter<Thumbs> = new EventEmitter<Thumbs>();\n\n    (builder.find(TsClass) as TsClass).addProp(new TsVarDec('onThumbs', 'EventEmitter<Thumbs>',\n      TsAcssesModifier.PUBLIC, '@Output()'), new TsPlainCode(`new EventEmitter<Thumbs>()`))\n      .addMethod(new TsMethod('thumbsUp', [], new TsPlainCode(`this.onThumbs.emit(Thumbs.UP)`)))\n      .addMethod(new TsMethod('thumbsDown', [], new TsPlainCode(`this.onThumbs.emit(Thumbs.DOWN)`)));\n  })\n  .build();\n",
  "files/ThumbsHtml.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {HtmlBuilder} from \"../file-builders/HtmlBuilder\";\nimport {ClHtmlDiv} from \"../file-builders/html/ClHtmlDiv\";\nimport {ClHtmlTextNode} from \"../file-builders/html/ClHtmlTextNode\";\n\nexport const ThumbsHtml = new Vcs(new HtmlBuilder('thumbs'))\n  .commit('initial', (builder: HtmlBuilder) => {\n    builder.append(new ClHtmlDiv());\n    builder.select(ClHtmlDiv).html(new ClHtmlTextNode(`\n    <!-- Write your code here -->\n`));\n  }).commit('solved', (builder: HtmlBuilder) => {\n    builder.select((ClHtmlDiv)).html(new ClHtmlTextNode(\n      `<button (click)=\"thumbsUp()\" class=\"thumbs-up\">\n  Thumbs up\n</button>\n<button (click)=\"thumbsDown()\" class=\"thumbs-down\">\n  Thumbs down\n</button>`))\n\n  }).build();\n",
  "files/TogglePanelComponent.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const TogglePanelComponent = new Vcs(new TsBuilder('TogglePanelComponent'))\n  .commit('initial', (builder: TsBuilder) => {\n\n// At this point I'm done using pseudo AST and just stick to simple stuff.\n    builder.add(new TsPlainCode(`import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'my-toggle-panel',\n  template` + /*Angular is being smart at some point and wrap the value in require*/`Url:  'togglePanel.html'\n})\nexport class TogglePanelComponent {`));\n    builder.add(new TsPlainCode('', 'solution'));\n    builder.add(new TsPlainCode(`\\n}`));\n  }).commit('solved', (builder: TsBuilder) => {\n    (builder.find(TsPlainCode, 'solution') as TsPlainCode).replaceContent(`  showDescription = true;`);\n  })\n  .build();\n",
  "files/TogglePanelHtml.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {HtmlBuilder} from \"../file-builders/HtmlBuilder\";\nimport {ClHtmlDiv} from \"../file-builders/html/ClHtmlDiv\";\nimport {ClHtmlTextNode} from \"../file-builders/html/ClHtmlTextNode\";\n\nexport const ToggelPanelHtml = new Vcs(new HtmlBuilder('togglePanel'))\n  .commit('initial', (builder: HtmlBuilder) => {\n    builder.append(new ClHtmlDiv());\n    builder.select(ClHtmlDiv).html(new ClHtmlTextNode(`\n    <!-- Write your code here -->\n`));\n  }).commit('solved', (builder: HtmlBuilder) => {\n    builder.select(ClHtmlDiv)\n      .html(new ClHtmlTextNode(`<div *ngIf=\"showDescription\">\n  <ng-content select=\".description\"></ng-content>\n  <button (click)=\"showDescription=false\">Show meta</button>\n</div>\n<div *ngIf=\"!showDescription\">\n  <ng-content select=\".extra\"></ng-content>\n  <button (click)=\"showDescription=true\">Show description</button>\n</div>`))\n\n  })\n  .build();\n",
  "files/VideoComponent.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const VideoComponent = new Vcs(new TsBuilder('VideoComponent'))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.addImport(imports.angular.core.ComponentAndInput);\n    builder.addImport(VideoItem.file);\n    builder.add(new TsClass(builder.filename));\n  }).commit('solved', (builder: TsBuilder) => {\n    const decorator = new TsDecorator('Component');\n    decorator.setValue('selector', 'my-video');\n    decorator.setValue('templateUrl', './video.html');\n    builder.addBefore(decorator, TsClass);\n  })\n  .commit('withInput', (builder: TsBuilder) => {\n    (builder.find(TsClass) as TsClass).addProp(new TsVarDec('video', 'VideoItem', TsAcssesModifier.PUBLIC, '@Input()'), new TsString('CatTube'))\n  }).commit('withThumbsInjected', (builder: TsBuilder) => {\n    builder.addImport({filename: './ThumbsComponent', exports: ['Thumbs']});\n  }).commit('withThumbsEventHandled', (builder: TsBuilder) => {\n    (builder.find(TsClass) as TsClass).addMethod(new TsMethod('onThumbs', [new TsVarDec('thumbs', 'Thumbs')], new TsPlainCode(\n      `if(thumbs == Thumbs.UP){\n      this.video.likes++;\n    }\n    if(thumbs == Thumbs.DOWN){\n      this.video.likes--;\n    }`)))\n  })\n  .build();\n",
  "files/VideoHtml.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {HtmlBuilder} from \"../file-builders/HtmlBuilder\";\nimport {ClHtmlDiv} from \"../file-builders/html/ClHtmlDiv\";\nimport {ClHtmlTextNode} from \"../file-builders/html/ClHtmlTextNode\";\n\nexport const VideoHtml = new Vcs(new HtmlBuilder('video'))\n  .commit('initial', (builder: HtmlBuilder) => {\n    builder.append(new ClHtmlDiv());\n    builder.select(ClHtmlDiv).html(new ClHtmlTextNode(`\n    <!-- Write your code here -->\n`));\n  }).commit('withInfo', (builder: HtmlBuilder) => {\n    builder.select(ClHtmlDiv)\n      .html(new ClHtmlTextNode(''))\n      .append(new ClHtmlTextNode('<h2>{{video.title}}</h2>', 'header'))\n      .append(new ClHtmlTextNode('<img [src]=\"video.src\">', 'image'))\n      .append(new ClHtmlTextNode('<div>Date {{video.date}}</div>', 'date'))\n      .append(new ClHtmlTextNode(\n        `<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<div>Description {{video.description}}</div>`, 'meta'))\n      .append(new ClHtmlTextNode('', 'thumbs'))\n\n  }).commit('withThumbs', (builder: HtmlBuilder) => {\n    (builder.select(ClHtmlDiv).find('thumbs') as ClHtmlTextNode)\n      .replaceContent(`<my-thumbs (onThumbs)=\"onThumbs($event)\"></my-thumbs>`)\n  }).commit('withTogglePanel', (builder: HtmlBuilder) => {\n    (builder.select(ClHtmlDiv).find('meta') as ClHtmlTextNode)\n      .replaceContent(\n        `<my-toggle-panel>\n  <div class=\"description\">Description: {{video?.description}}</div>\n  <div class=\"extra\">\n    <div class=\"views\">Views: {{video?.views}}</div>\n    <div class=\"likes\">Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>`)\n  })\n  .build();\n",
  "files/VideoItem.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\n\nexport const VideoItem = new Vcs(new TsBuilder('VideoItem'))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.addFirst(new TsPlainCode(`export interface VideoItem {\n  title: string,\n  src: string,\n  description: string,\n  views: number\n  likes: number,\n  date: string\n}\n`))\n  })\n  .build();\n",
  "files/VideoService.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {Api} from \"./Api\";\n\nexport const VideoService = new Vcs(new TsBuilder('VideoService'))\n  .commit('initial', (builder: TsBuilder) => {\n    builder.addImport(imports.angular.core.Injectable);\n    builder.addImport(Api.file);\n    builder.add(new TsClass(builder.filename));\n    (builder.find(TsClass) as TsClass).addMethod(new TsMethod('search',\n      [new TsVarDec('searchString', 'string')],\n      new TsPlainCode(`return Api.fetch(searchString)`)))\n  }).commit('injectable', (builder: TsBuilder) => {\n    const decorator = new TsDecorator('Injectable');\n    builder.addBefore(decorator, TsClass);\n  })\n  .build();\n",
  "files/WrapperComponent.ts": "import {Vcs} from \"../file-builders/Vcs\";\nimport {TsBuilder} from \"../file-builders/TsBuilder\";\nimport {TsClass} from \"../file-builders/ts/TsClass\";\nimport {TsDecorator} from \"../file-builders/ts/TsDecorator\";\nimport {TsVarDec, TsAcssesModifier} from \"../file-builders/ts/TsVarDec\";\nimport {TsString} from \"../file-builders/ts/TsString\";\nimport {TsArray} from \"../file-builders/ts/TsArray\";\nimport {TsMethod} from \"../file-builders/ts/TsMethod\";\nimport {TsPlainCode} from \"../file-builders/ts/TsPlainCode\";\nimport {TsConstant} from \"../file-builders/ts/TsConstant\";\nimport {imports} from \"./imports\";\nimport {VideoService} from \"./VideoService\";\nimport {VideoItem} from \"./VideoItem\";\n\nexport const WrapperComponent = new Vcs(new TsBuilder('WrapperComponent'))\n  .commit('initial', (builder: TsBuilder) => {\n\n// At this point I'm done using pseudo AST and just stick to simple stuff.\n    builder.add(new TsPlainCode(`import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-wrapper',\n  // Just using template here to avoid extra files.\n  template: \\`\n    <my-toggle-panel>\n    <div class=\"description\">Either show me</div>\n    <div class=\"extra\">Or show me</div>\n    </my-toggle-panel>\n    \\`\n})\nexport class WrapperComponent {\n\n}\n`));\n  })\n  .build();\n",
  "shared/Api.ts": "import {VideoItem} from \"./VideoItem\";\n\nlet FAKE_VIDEOS = [\n  {\n    title: \"Cute kitten\",\n    src: \"/assets/images/kitten1.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-11-25'\n  },\n  {\n    title: \"Kitten on the tree\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-11-21'\n  }, {\n    title: \"More kitten\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-10-02'\n\n  }, {\n    title: \"Another kitten\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-09-02'\n  },\n  {\n    title: \"Serouis cat\",\n    src: \"/assets/images/kitten2.jpg\",\n    description: \"todo\",\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n];\n\nexport const Api = {\n  fetch(searchString: string): Array<VideoItem> {\n    return FAKE_VIDEOS.filter((video) =>\n      video.title.indexOf(searchString) >= 0\n    );\n  }\n};\n",
  "shared/AppModule.ts": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [],\n  providers: [],\n  bootstrap: []\n})\nexport class AppModule {\n}\n",
  "shared/Bootstrap.ts": "import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {ResourceLoader} from '@angular/compiler';\nimport * as code from './code';\nimport {AppModule} from \"./AppModule\";\n\n\nclass MyResourceLoader extends ResourceLoader {\n  get(url: string): Promise<string> {\n    let template = code[url.replace('.html', 'Code')];\n    if (!template) {\n      debugger;\n    }\n    return Promise.resolve(template);\n  };\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {\n  providers: [\n    {provide: ResourceLoader, useClass: MyResourceLoader}\n  ]\n});\n",
  "shared/code.ts": "export const videoCode = '';\nexport const thumbsCode = '';\nexport const appCode = '';\nexport const AppComponentCode = '';\nexport const MeetupCode = '';\nexport const togglepanelCode = '';\nexport const wrapperCode = '';\nexport const contextCode = '';\n",
  "shared/index.html": "<h1>HUITA</h1>\n",
  "shared/TogglePanelComponent.ts": "import {Component, Input} from '@angular/core';\nimport {VideoItem} from \"../../shared/VideoItem\";\n\n@Component({\n  selector: 'my-toggle-panel',\n  templateUrl: 'togglepanel.html'\n})\nexport class TogglePanelComponent {\n  showDescription = true;\n}\n",
  "shared/VideoItem.ts": "export interface VideoItem {\n  title: string,\n  src: string,\n  description: string,\n  views: number\n  likes: number,\n  date: string\n}\n",
  "shared/VideoService.ts": "import {Api} from './Api';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class VideoService {\n  search(searchString: string) {\n    return Api.fetch(searchString)\n  }\n}\n"
}