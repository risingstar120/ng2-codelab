{"codelab-config-service.ts":"import {CodelabConfig, AppConfig} from \"../app/codelab-config\";\nimport {FileConfig} from \"../app/file-config\";\nimport {differ} from \"../app/differ/differ\";\nimport {ExerciseService} from \"../app/exercise.service\";\nimport {Injectable} from \"@angular/core\";\n\nconst test = window.location.hash.includes('test');\nconst presentationMode = window.location.hash.includes('present');\nconst debug = test || window.location.hash.includes('debug');\nconst reset = window.location.hash.includes('reset') || debug;\n\nexport const appConfig: AppConfig = {\n  name: 'Codelab',\n  page: 'milestone',\n  user: '',\n  auth: '',\n  feedbackEnabled: false,\n  preserveState: !reset,\n  debug,\n  test,\n  presentationMode\n};\n\n@Injectable()\nexport class CodelabConfigService {\n  public config: CodelabConfig;\n\n  constructor(public exerciseService: ExerciseService) {\n    function testFile(filename = 'Test.ts', code?) {\n      return {\n        filename,\n        moduleName: filename.replace('ts', ''),\n        type: 'ts',\n        excludeFromTesting: false,\n        test: true,\n        bootstrap: true,\n        before: 'mochaBefore();',\n        after: 'mochaAfter();',\n        hidden: true,\n        code\n      };\n    }\n\n    function hidden(...files: FileConfig[]): FileConfig[] {\n      return files.map(file => Object.assign({}, file, {hidden: true}))\n    }\n\n    function readOnly(...files: FileConfig[]): FileConfig[] {\n      return files.map(file => Object.assign({}, file, {readonly: true}))\n    }\n\n    function justForReference(...files: FileConfig[]): FileConfig[] {\n      return collapsed(...readOnly(...files));\n    }\n\n    function collapsed(...files: FileConfig[]): FileConfig[] {\n      return files.map(file => Object.assign({}, file, {collapsed: true}))\n    }\n\n\n    function evaled(file) {\n      return Object.assign(file, {\n        after: `\n    export function evalJs( js ){\n      return eval(js);\n    }\n`\n      });\n    }\n\n\n    function mapObject(object, callback) {\n      return Object.keys(object).reduce((result, key) => {\n        result[key] = callback(object[key]);\n        return result;\n      }, {});\n    }\n\n    function newHtmlFile(name, code) {\n      return {\n        filename: name + '.html',\n        moduleName: name,\n        code,\n        type: 'html'\n      }\n    }\n\n    function newTsFile(name, code) {\n      const bootstrap = name.toLowerCase().indexOf('main') >= 0;\n      return {\n        bootstrap: bootstrap,\n        excludeFromTesting: bootstrap,\n        filename: name + '.ts',\n        moduleName: name,\n        code,\n        type: 'ts'\n      }\n    }\n\n    function loadHtml(name, states) {\n      const result = differ(exerciseService.getExercise(`ng2ts/${name}.html`), states);\n      return mapObject(result, (code) => newHtmlFile(name, code)) as Versions;\n    }\n\n    function loadTs(name, states) {\n      const result = differ(exerciseService.getExercise(`ng2ts/${name}.ts`), states);\n\n      return mapObject(result, (code) => newTsFile(name, code)) as Versions;\n    }\n\n    const commits = [\n      'codelab',\n      'codelabSolved',\n      'createComponent',\n      'createComponentSolved',\n      'createModule',\n      'createModuleSolved',\n      'bootstrap',\n      'bootstrapSolved',\n      'templatePageSetup',\n      'templatePageSetupSolved',\n      'templateAddAction',\n      'templateAddActionSolved',\n      'templateAllVideos',\n      'templateAllVideosSolved',\n      'diInjectService',\n      'diInjectServiceSolved',\n      'dataBinding',\n      'dataBindingSolved',\n      'videoComponentCreate',\n      'videoComponentCreateSolved',\n      'videoComponentUse',\n      'videoComponentUseSolved',\n      'thumbsComponentCreate',\n      'thumbsComponentCreateSolved',\n      'thumbsComponentUse',\n      'thumbsComponentUseSolved',\n      'togglePanelComponentCreate',\n      'togglePanelComponentCreateSolved',\n      'togglePanelComponentUse',\n      'togglePanelComponentUseSolved',\n      'contextComponentUse',\n      'contextComponentUseSolved',\n      'fuzzyPipeCreate',\n      'fuzzyPipeCreateSolved',\n      'fuzzyPipeUse',\n      'fuzzyPipeUseSolved',\n      'neverShow'\n    ];\n    interface Versions {\n      codelab: FileConfig,\n      codelabSolved: FileConfig,\n      createComponent: FileConfig,\n      createComponentSolved: FileConfig,\n      createModule: FileConfig,\n      createModuleSolved: FileConfig,\n      bootstrap: FileConfig,\n      bootstrapSolved: FileConfig,\n      templatePageSetup: FileConfig,\n      templatePageSetupSolved: FileConfig,\n      templateAddAction: FileConfig,\n      templateAddActionSolved: FileConfig,\n      templateAllVideos: FileConfig,\n      templateAllVideosSolved: FileConfig,\n      diInjectService: FileConfig,\n      diInjectServiceSolved: FileConfig,\n      dataBinding: FileConfig,\n      dataBindingSolved: FileConfig,\n      videoComponentCreate: FileConfig,\n      videoComponentCreateSolved: FileConfig,\n      videoComponentUse: FileConfig,\n      videoComponentUseSolved: FileConfig,\n      thumbsComponentCreate: FileConfig,\n      thumbsComponentCreateSolved: FileConfig,\n      thumbsComponentUse: FileConfig,\n      thumbsComponentUseSolved: FileConfig,\n      togglePanelComponentCreate: FileConfig,\n      togglePanelComponentCreateSolved: FileConfig,\n      togglePanelComponentUse: FileConfig,\n      togglePanelComponentUseSolved: FileConfig,\n      contextComponentUse: FileConfig,\n      contextComponentUseSolved: FileConfig,\n      fuzzyPipeCreate: FileConfig,\n      fuzzyPipeCreateSolved: FileConfig\n      fuzzyPipeUse: FileConfig,\n      fuzzyPipeUseSolved: FileConfig,\n    }\n\n    const files = {\n      test: loadTs('app.component', commits),\n      appComponent: loadTs('app.component', commits),\n      appModule: loadTs('app.module', commits),\n      appHtml: loadHtml('app', commits),\n      bootstrap: loadTs('main', commits),\n      //dataBinding: loadTs('data-binding/DataBinding', commits),\n      videoItem: loadTs('video/video-item', commits),\n      api: loadTs('api.service', commits),\n      videoService: loadTs('video/video.service', commits),\n      videoHtml: loadHtml('video/video', commits),\n      videoComponent: loadTs('video/video.component', commits),\n      thumbsComponent: loadTs('thumbs/thumbs.component', commits),\n      thumbsHtml: loadHtml('thumbs/thumbs', commits),\n      togglePanelHtml: loadHtml('toggle-panel/toggle-panel', commits),\n      togglePanelComponent: loadTs('toggle-panel/toggle-panel.component', commits),\n      wrapperComponent: loadTs('wrapper.component', commits),\n      contextComponent: loadTs('context/context.component', commits),\n      contextService: loadTs('context/context.service', commits),\n      codelab: loadTs('typescript-intro/Codelab', commits),\n      mainCodelab: loadTs('typescript-intro/Main', commits),\n      guest: loadTs('typescript-intro/Guest', commits),\n      fuzzyPipe: loadTs('fuzzy-pipe/fuzzy.pipe', commits),\n    };\n\n    // Too hard to use diff comments for this, so I'm replacing the whole file\n    files.appModule.thumbsComponentCreate = newTsFile('app.module', exerciseService.getExercise(`ng2ts/thumbs.app.module.ts`));\n    files.appModule.togglePanelComponentCreate = newTsFile('app.module', exerciseService.getExercise(`ng2ts/toggle-panel.app.module.ts`));\n    files.test.codelab = testFile('typescript-intro/Test', exerciseService.getExercise(`ng2ts/tests/codelabTest.ts`));\n    files.test.createComponent = testFile('createComponent/Test', exerciseService.getExercise(`ng2ts/tests/createComponentTest.ts`));\n    files.test.createModule = testFile('createModule/Test', exerciseService.getExercise(`ng2ts/tests/createModuleTest.ts`));\n    files.test.bootstrap = testFile('bootstrap/Test', exerciseService.getExercise(`ng2ts/tests/bootstrapTest.ts`));\n    files.test.templatePageSetup = testFile('templatePageSetup/Test', exerciseService.getExercise(`ng2ts/tests/templatePageSetupTest.ts`));\n    files.test.templateAddAction = testFile('templateAddAction/Test', exerciseService.getExercise(`ng2ts/tests/templateAddActionTest.ts`));\n    files.test.templateAllVideos = testFile('templateAllVideos/Test', exerciseService.getExercise(`ng2ts/tests/templateAllVideosTest.ts`));\n    files.test.diInjectService = testFile('diInjectService/Test', exerciseService.getExercise(`ng2ts/tests/diInjectServiceTest.ts`));\n    files.test.videoComponentCreate = testFile('videoComponentCreate/Test', exerciseService.getExercise(`ng2ts/tests/videoComponentCreateTest.ts`));\n    files.test.videoComponentUse = testFile('videoComponentUse/Test', exerciseService.getExercise(`ng2ts/tests/videoComponentUseTest.ts`));\n    files.test.thumbsComponentCreate = testFile('thumbs/ThumbsComponentCreateTest', exerciseService.getExercise(`ng2ts/tests/ThumbsComponentCreateTest.ts`));\n    files.test.thumbsComponentUse = testFile('thumbs/ThumbsComponentUseTest', exerciseService.getExercise(`ng2ts/tests/ThumbsComponentUseTest.ts`));\n    files.test.togglePanelComponentCreate = testFile('togglePanelComponentCreate/Test', exerciseService.getExercise(`ng2ts/tests/togglePanelComponentCreateTest.ts`));\n    files.test.togglePanelComponentUse = testFile('togglePanelComponentUse/Test', exerciseService.getExercise(`ng2ts/tests/togglePanelComponentUseTest.ts`));\n    files.test.contextComponentUse = testFile('contextComponentUse/Test', exerciseService.getExercise(`ng2ts/tests/contextComponentUseTest.ts`));\n    files.test.fuzzyPipeCreate = testFile('fuzzyPipeCreate/Test', exerciseService.getExercise(`ng2ts/tests/fuzzyPipeCreateTest.ts`));\n    files.test.fuzzyPipeUse = testFile('fuzzyPipeUse/Test', exerciseService.getExercise(`ng2ts/tests/fuzzyPipeUseTest.ts`));\n\n    this.config = {\n      app: appConfig,\n      runId: 0,\n      autorun: true,\n      name: 'Angular2 codelab',\n      user: '',\n      auth: {},\n      page: 'milestone',\n      selectedMilestoneIndex: 0,\n      milestones: [\n        {\n          /**\n           * See the interface.\n           */\n          name: 'Intro to TypeScript',\n          selectedExerciseIndex: 0,\n          exercises: [\n            {\n              name: 'Intro',\n              description: `\n          <h1>Welcome to the Angular and TypeScript CodeLab!</h1>\n          <p>In this codelab we're going to learn the basics of TypeScript and Angular.</p>\n          <p>We're using Angular version 2.1.0</p>\n          <p>The slides for the codelab are available using\n          <a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">here</a>.</p>                 \n        `,\n              fileTemplates: [],\n              tests: [],\n              messageNext: `Let's start`\n            },\n            {\n              name: 'Typescript',\n              description: `\n          <p>We created a TypeScript file for you, now let's add our first TS class\n           called Codelab.</p>\n          \n          <p>It will take a list of guests, and will have a 'getGuestsComing' method, which will only return people who're coming.</p> \n          <p>As you can see in the 'Main.ts' file we have 4 people signed up, but Charles Darwin had a last minute change of plans, \n          so only 3 people should be returned.</p>            \n        `,\n              solutions: [\n                files.codelab.codelabSolved\n              ],\n              fileTemplates: [\n                evaled(files.codelab.codelab),\n                files.guest.codelab,\n                files.mainCodelab.codelab,\n                files.test.codelab\n              ]\n            }\n          ]\n        },\n        {\n          name: 'Bootstrapping your app',\n          selectedExerciseIndex: 0,\n          exercises: [\n            {\n              name: 'Intro',\n              description: `\n          <h1>Let's build our first Angular app!</h1>\n          <p>This is how it will look:</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <h1>Hello CatTube!</h1>\n            </div>\n          </div>\n          <p>3 simple steps: </p>\n          <ol>\n            <li>Create a Component</li>\n            <li>Create a NgModule</li>\n            <li>Bootstrap the NgModule</li>\n          </ol>\n        `,\n              fileTemplates: [],\n              tests: [],\n              messageNext: `I'm a ready, let's start!`\n            },\n            {\n              name: 'Create a component',\n              description: `\n            <p>Let's create our first component!</p>`,\n              solutions: [\n                files.appComponent.createComponentSolved\n              ],\n              fileTemplates: [\n                evaled(files.appComponent.createComponent),\n                ...hidden(\n                  files.appModule.createModuleSolved,\n                  files.bootstrap.bootstrapSolved\n                ),\n                files.test.createComponent\n              ]\n            }, {\n              name: 'Create a NgModule',\n              description: `Now we got the component, we need to pass it to a NgModule.`,\n              solutions: [\n                files.appModule.createModuleSolved\n              ],\n              fileTemplates: [\n                files.appModule.createModule,\n                ...justForReference(\n                  files.appComponent.createModule\n                ),\n                ...hidden(\n                  files.bootstrap.bootstrapSolved\n                ),\n                files.test.createModule\n              ]\n            },\n            {\n              name: 'Bootstrap the module',\n              skipTests: true,\n              description: `\n          <p>Now we got both NgModule and component ready, let's bootstrap the app!</p>\n          <p>There's no  simple way to test it,  make sure your app displays: 'Hello CatTube!'</p>`,\n              solutions: [\n                files.bootstrap.bootstrapSolved\n              ],\n              fileTemplates: [\n                files.bootstrap.bootstrap,\n                ...justForReference(\n                  files.appComponent.bootstrap,\n                  files.appModule.bootstrap\n                ),\n                files.test.bootstrap\n              ]\n            }\n          ]\n        },\n        {\n          name: 'Templates',\n          selectedExerciseIndex: 0,\n          exercises: [\n            {\n              name: 'Intro',\n              description: `\n          <h1>Let's explore Angular templates!</h1>\n          <p>As a result we'll see our cats displayed.</p>\n          \n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>              \n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img src=\"/assets/images/cat-2.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n        \n        `,\n              fileTemplates: [],\n              tests: [],\n              messageNext: `I'm a ready, let's start!`\n            },\n            {\n              name: 'Set up the page',\n              description: `Let's setup a header, a search box, and a search button in the app component!`,\n              solutions: [\n                files.appHtml.templatePageSetupSolved\n              ],\n              fileTemplates: [\n                files.appHtml.templatePageSetup,\n                ...justForReference(\n                  files.appComponent.templatePageSetup,\n                  files.appModule.templatePageSetup,\n                  files.bootstrap.templatePageSetup,\n                ),\n                files.test.templatePageSetup\n              ],\n              tests: []\n            }, {\n              name: 'Add some action',\n              description: `Let's do two things here: \n              <ul>\n              <li>Add a search method to the AppComponent</li>\n              <li>Display a message when there are no videos.</li>`,\n              solutions: [\n                files.appHtml.templateAddActionSolved,\n                files.appComponent.templateAddActionSolved,\n              ],\n              fileTemplates: [\n                files.appComponent.templateAddAction,\n                files.appHtml.templateAddAction,\n                ...justForReference(\n                  files.videoItem.templateAddAction,\n                  files.appModule.templateAddAction,\n                  files.bootstrap.templateAddAction,\n                ),\n                files.test.templateAddAction\n              ],\n              tests: []\n            }, {\n              name: 'Display all videos',\n              description: `Finally let's iterate over the videos.`,\n              solutions: [\n                files.appComponent.templateAllVideosSolved,\n                files.appHtml.templateAllVideosSolved,\n              ],\n              fileTemplates: [\n                files.appComponent.templateAllVideos,\n                files.appHtml.templateAllVideos,\n                ...justForReference(\n                  files.videoItem.templateAddAction,\n                  files.appModule.templateAllVideos,\n                  files.bootstrap.templateAllVideos,\n                ),\n                files.test.templateAllVideos\n              ],\n              tests: []\n            }\n          ]\n        },\n        {\n          name: 'Dependency Injection',\n          selectedExerciseIndex: 0,\n          exercises: [{\n            name: 'Intro',\n            description: `\n          <h1>Let's inject a service.</h1>\n          <p>Using a service is way better than hardcoded data. As a result we get even more cats.</p>\n          \n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <input placeholder=\"video\" type=\"text\">\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img  src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>More kitten</h2>\n                  <img  src=\"/assets/images/cat-2.jpg\">\n                </div><div>\n                  <h2>Another kitten</h2>\n                  <img  src=\"/assets/images/cat-3.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-4.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-5.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-6.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n        \n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `I'm a ready, let's start!`\n          }, {\n            name: 'Service injection',\n            description: `\n          Let's fetch the videos using a service, instead of having them hardcoded.\n        `,\n            solutions: [\n              files.videoService.diInjectServiceSolved,\n              files.appModule.diInjectServiceSolved,\n              files.appComponent.diInjectServiceSolved,\n            ],\n            fileTemplates: [\n              files.videoService.diInjectService,\n              files.appModule.diInjectService,\n              files.appComponent.diInjectService,\n              ...justForReference(\n                files.appHtml.diInjectService,\n                files.videoItem.diInjectService,\n                files.api.diInjectService,\n                files.bootstrap.diInjectService,\n              ),\n              files.test.diInjectService\n            ],\n            tests: []\n          }]\n        },\n        {\n          name: 'Component Tree',\n          selectedExerciseIndex: 0,\n          exercises: [\n            {\n              name: 'Intro',\n              description: `\n          <h1>Let's create a Video component!</h1>\n          <p>Create a separate component with the video information.</p>\n          <p>Add description, amount of views and likes. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                </div>\n              </div>\n            </div>          \n        `,\n              fileTemplates: [],\n              tests: [],\n              messageNext: `I'm a ready, let's start!`\n            },\n            /*{\n\n             name: 'Data binding',\n             description: `<p>This is a bonus exercise, meant to illustrate passing the data from\n             parent component to the child component </p>\n             `,\n             solutions: [\n             files.dataBinding.dataBindingSolved,\n             ],\n             fileTemplates: [\n             files.dataBinding.dataBinding,\n             files.appModule.dataBinding,\n             files.bootstrap.dataBinding,\n             ...hidden({\n             filename: 'index.html',\n             moduleName: 'index',\n             code: '<my-flag></my-flag>',\n             type: 'html'\n             })\n             // testFile()\n             ],\n             tests: []\n             }, */{\n\n              name: 'Create VideoComponent',\n              description: `Create a video component.`,\n              solutions: [\n                files.videoHtml.videoComponentCreateSolved,\n                files.videoComponent.videoComponentCreateSolved,\n              ],\n              fileTemplates: [\n                files.videoComponent.videoComponentCreate,\n                files.videoHtml.videoComponentCreate,\n                ...justForReference(\n                  files.appModule.videoComponentCreate,\n                  files.videoService.videoComponentCreate,\n                  files.appHtml.videoComponentCreate,\n                  files.appComponent.videoComponentCreate,\n                  files.videoItem.videoComponentCreate,\n                  files.api.videoComponentCreate,\n                  files.bootstrap.videoComponentCreate,\n                ),\n                files.test.videoComponentCreate\n              ],\n              tests: []\n            },\n            {\n              name: 'Use VideoComponent',\n              description: `Use the VideoComponent in the app.`,\n              solutions: [\n                files.appModule.videoComponentUseSolved,\n                files.appHtml.videoComponentUseSolved,\n              ],\n              fileTemplates: [\n                files.appModule.videoComponentUse,\n                files.appHtml.videoComponentUse,\n                ...justForReference(\n                  files.videoHtml.videoComponentUse,\n                  files.videoComponent.videoComponentUse,\n                  files.appComponent.videoComponentUse,\n                  files.videoService.videoComponentUse,\n                  files.videoItem.videoComponentUse,\n                  files.api.videoComponentUse,\n                  files.bootstrap.videoComponentUse\n                ),\n                files.test.videoComponentUse\n              ],\n              tests: []\n            }]\n        }, {\n          name: 'Custom events',\n          selectedExerciseIndex: 0,\n          exercises: [\n            {\n              name: 'Intro',\n              description: `\n          <h1>Let's use custom events!</h1>\n          <p>Add a ThumbsComponent which will emit an 'onThumbs' event.  </p>\n          <p>In the video component listen to the event and change the amount of likes accordingly.</p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>          \n        `,\n              fileTemplates: [],\n              tests: [],\n              messageNext: `I'm a ready, let's start!`\n            },\n            {\n              name: 'Create ThumbsComponent',\n              description: `Create ThumbsComponent.`,\n              solutions: [\n                files.thumbsHtml.thumbsComponentCreateSolved,\n                files.thumbsComponent.thumbsComponentCreateSolved,\n              ],\n              fileTemplates: [\n                files.thumbsHtml.thumbsComponentCreate,\n                files.thumbsComponent.thumbsComponentCreate,\n                ...justForReference(\n                  files.api.thumbsComponentCreate,\n                  files.appModule.thumbsComponentCreate,\n                  files.bootstrap.thumbsComponentCreate,\n                ),\n                files.test.thumbsComponentCreate,\n                ...hidden({\n                    filename: 'index.html',\n                    moduleName: 'index',\n                    code: '<my-thumbs></my-thumbs>',\n                    type: 'html'\n                  },\n                )\n              ],\n              tests: []\n            },\n            {\n              name: 'Use ThumbsComponent',\n              description: `Use the 'ThumbsComponent' in the app.`,\n              solutions: [\n                files.appModule.thumbsComponentUseSolved,\n                files.videoHtml.thumbsComponentUseSolved,\n                files.videoComponent.thumbsComponentUseSolved\n              ],\n              fileTemplates: [\n                files.videoHtml.thumbsComponentUse,\n                files.videoComponent.thumbsComponentUse,\n                files.appModule.thumbsComponentUse,\n                ...justForReference(\n                  files.thumbsHtml.thumbsComponentUse,\n                  files.thumbsComponent.thumbsComponentUse,\n                  files.appHtml.thumbsComponentUse,\n                  files.appComponent.thumbsComponentUse,\n                  files.videoService.thumbsComponentUse,\n                  files.videoItem.thumbsComponentUse,\n                  files.api.thumbsComponentUse,\n                  files.bootstrap.thumbsComponentUse,\n                ),\n                files.test.thumbsComponentUse,\n              ],\n              tests: []\n            }]\n        }, {\n          name: 'Content projection',\n          selectedExerciseIndex: 0,\n          exercises: [\n\n            {\n              name: 'Intro',\n              description: `\n          <h1>Let's project some content!</h1>\n          <p>In this milestone we'll create a component called 'TogglePanel'</p>\n          <p>It will actually take 2 divs, but only display one at a time. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">            \n                  <div>This is the description. Once you click 'show meta' button it will be gone.  (please don't try clicking it here, I'm just a screenshot)</div>\n                  <div>[Show meta]</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>               \n              \n            <p>So when you click the 'Show meta button', description is gone, likes and views are displayed instead.</p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">            \n                  <div>Likes: 1000</div>\n                  <div>Views: 1000000</div>\n                  <div>[Show description]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>          \n        `,\n              fileTemplates: [],\n              tests: [],\n              messageNext: `I'm a ready, let's start!`\n            },\n            {\n              name: 'Add TogglePanelComponent',\n              description: `Let's create a component which will use content projection to toggle between description and meta information. `,\n              solutions: [\n                files.togglePanelHtml.togglePanelComponentCreateSolved,\n                files.togglePanelComponent.togglePanelComponentCreateSolved,\n              ],\n              fileTemplates: [\n                files.togglePanelComponent.togglePanelComponentCreate,\n                files.togglePanelHtml.togglePanelComponentCreate,\n                ...justForReference(\n                  files.wrapperComponent.togglePanelComponentCreate,\n                  files.appModule.togglePanelComponentCreate,\n                  {\n                    filename: 'index.html',\n                    code: '<my-wrapper></my-wrapper>',\n                    type: 'html',\n                    moduleName: 'index'\n                  },\n                  files.bootstrap.togglePanelComponentCreate,\n                ),\n                files.test.togglePanelComponentCreate\n              ],\n              tests: []\n            },\n            {\n              name: 'Use TogglePanelComponent',\n              description: `Now let's use the component.`,\n              solutions: [\n                files.appModule.togglePanelComponentUseSolved,\n                files.videoHtml.togglePanelComponentUseSolved\n              ],\n              fileTemplates: [\n                files.appModule.togglePanelComponentUse,\n                files.videoHtml.togglePanelComponentUse,\n                ...justForReference(\n                  files.videoComponent.togglePanelComponentUse,\n                  files.togglePanelHtml.togglePanelComponentUse,\n                  files.togglePanelComponent.togglePanelComponentUse,\n                  files.appHtml.togglePanelComponentUse,\n                  files.appComponent.togglePanelComponentUse,\n                  files.videoService.togglePanelComponentUse,\n                  files.videoItem.togglePanelComponentUse,\n                  files.api.togglePanelComponentUse,\n                  files.thumbsHtml.togglePanelComponentUse,\n                  files.thumbsComponent.togglePanelComponentUse,\n                  files.bootstrap.togglePanelComponentUse,\n                ),\n                files.test.togglePanelComponentUse\n              ],\n              tests: []\n            }]\n        },\n        {\n          name: 'Parent-container',\n          selectedExerciseIndex: 0,\n          exercises: [{\n            name: 'Intro',\n            description: `\n          <h1>Let's inject parent component!</h1>\n          <p>In this milestone we'll create create a ContextAdComponent. </p>\n          <p>This component will not use inputs. Instead it will require parent (Video) component and directly look at it's properties. </p>\n          <p>It will display different text depending of if there's a word 'music' in the description. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten dancing</h2>\n                  <img  src=\"/assets/images/cat-0.png\">            \n                  <div>Decription: music</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Turn up your speakers</div>                  \n                </div>\n                <div>\n                  <h2>Cute kitten sleeping</h2>\n                  <img  src=\"/assets/images/cat-0.png\">            \n                  <div>Decription: sleeping</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Check out our web site.</div>                  \n                </div>\n              </div>\n            </div>          \n                 \n             <p>Note, we are actually calling it ContextComponent, because when it was called ContextAdComponent, adblock blocked it, and I spent 2 hours debugging. </p>\n              \n                   \n        `,\n            fileTemplates: [],\n            tests: [],\n            messageNext: `I'm a ready, let's start!`\n          },\n            {\n              name: 'Inject parent component',\n              description: `<p>Create a Context(Ad)Component</p>\n            <p>which will inject it's parent component, see what thedescription, and display the value accordingly.</p>\n            <p>Note: We had to get rid of the 'Ad' part of the component, because AdBlock blocked the template.</p>`,\n              solutions: [\n                files.contextComponent.contextComponentUseSolved\n              ],\n              fileTemplates: [\n                files.contextComponent.contextComponentUse,\n                {\n                  filename: 'context/context.html',\n                  moduleName: 'context',\n                  code: '{{text}}',\n                  type: 'html'\n                },\n                ...justForReference(\n                  files.contextService.contextComponentUse,\n                  files.appModule.contextComponentUse,\n                  files.videoHtml.contextComponentUse,\n                  files.videoComponent.contextComponentUse,\n                  files.togglePanelHtml.contextComponentUse,\n                  files.togglePanelComponent.contextComponentUse,\n                  files.appHtml.contextComponentUse,\n                  files.appComponent.contextComponentUse,\n                  files.videoService.contextComponentUse,\n                  files.videoItem.contextComponentUse,\n                  files.api.contextComponentUse,\n                  files.thumbsHtml.contextComponentUse,\n                  files.thumbsComponent.contextComponentUse,\n                  files.bootstrap.contextComponentUse\n                ),\n                files.test.contextComponentUse\n              ],\n              tests: []\n            }]\n        },\n\n        {\n          name: 'Pipes',\n          selectedExerciseIndex: 0,\n          exercises: [{\n            name: 'Create a pipe',\n            description: 'Create a fuzzy pipe, which takes a date in YYYY-MM-DD format, and returns how many days ago this was.',\n            solutions: [\n              files.fuzzyPipe.fuzzyPipeCreateSolved,\n            ],\n            fileTemplates: [\n              evaled(files.fuzzyPipe.fuzzyPipeCreate),\n              files.test.fuzzyPipeCreate\n            ],\n            tests: []\n          }, {\n            name: 'Use the pipe',\n            description: 'Now include the app in the module and use in the app.',\n            solutions: [\n              files.appModule.fuzzyPipeUseSolved,\n              files.videoHtml.fuzzyPipeUseSolved,\n            ],\n            fileTemplates: [\n              files.appModule.fuzzyPipeUse,\n              files.videoHtml.fuzzyPipeUse,\n              ...justForReference(\n                files.fuzzyPipe.fuzzyPipeUse,\n                files.contextService.fuzzyPipeUse,\n                files.videoComponent.fuzzyPipeUse,\n                files.togglePanelHtml.fuzzyPipeUse,\n                files.togglePanelComponent.fuzzyPipeUse,\n                files.appHtml.fuzzyPipeUse,\n                files.appComponent.fuzzyPipeUse,\n                files.videoService.fuzzyPipeUse,\n                files.videoItem.fuzzyPipeUse,\n                files.api.fuzzyPipeUse,\n                files.thumbsHtml.fuzzyPipeUse,\n                files.thumbsComponent.fuzzyPipeUse,\n                files.contextComponent.fuzzyPipeUse,\n                {\n                  filename: 'context/context.html',\n                  moduleName: 'context',\n                  code: '{{text}}',\n                  type: 'html'\n                },\n                files.bootstrap.fuzzyPipeUse\n              ),\n              files.test.fuzzyPipeUse\n            ],\n            tests: []\n          }]\n        },\n        /*\n         {\n         name: 'Tests',\n         selectedExerciseIndex: 0,\n         exercises: [{\n         name: 'Sample tests',\n         description: `\n         <p>In this milestone instead of changing the code to pass the test\n         you'll have to change the test to pass the code. </p>\n\n         <p>This milestone is experimental and temporarily uses 'mocha' and 'chai' instead of jasmine.</p>\n         `,\n         fileTemplates: [\n         Object.assign(testFile(), {hidden: false}),\n         tsFile('FuzzyPipe', {readonly: true, path: '7-pipes/0-create-pipe/solution'}),\n         testFile(),\n         ...hidden(\n         htmlFile('context', {path: '6-children'}),\n         tsFile('VideoComponent', {path: '6-children'}),\n         htmlFile('togglepanel', {path: '5-content-projection/0-add-toggle-panel-component/solution'}),\n         tsFile('AppComponent', {path: '4-component-tree/1-use-video-component/solution'}),\n         sharedAppBootstrap({hidden: true}),\n         sharedVideoInterface({hidden: true}),\n         sharedTsFile('VideoService', {hidden: true}),\n         sharedApiFile({hidden: true})\n         )\n         ],\n         tests: []\n         }]\n         },*/\n        {\n          name: 'Survey',\n          selectedExerciseIndex: 0,\n          exercises: [{\n            name: 'All done!',\n            description: `\n        Please fill out <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">The survey</a>\n        (which is different from the feedback form)\n`,\n            fileTemplates: [],\n            tests: []\n          }]\n        }\n      ]\n    }\n  }\n}\n","ng2ts/api.service.ts":"import {VideoItem} from './video/video-item';\n\nlet FAKE_VIDEOS = [\n  {\n    title: 'Cute kitten',\n    src: '/assets/images/cat-0.png',\n    description: 'todo',\n    views: 100,\n    likes: 49329,\n    date: '2016-11-25'\n  },\n  {\n    title: 'Kitten on the tree',\n    src: '/assets/images/cat-1.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-11-21'\n  }, {\n    title: 'More kitten',\n    src: '/assets/images/cat-2.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-10-02'\n\n  }, {\n    title: 'Another kitten',\n    src: '/assets/images/cat-3.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-09-02'\n  },\n  {\n    title: 'Serouis cat',\n    src: '/assets/images/cat-4.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n  {\n    title: 'Serouis cat',\n    src: '/assets/images/cat-5.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  }, {\n    title: 'Serouis cat',\n    src: '/assets/images/cat-5.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n  {\n    title: 'Opps, looks like a bug!',\n    src: '/assets/images/dog.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n  {\n    title: 'Serouis cat',\n    src: '/assets/images/cat-6.jpg',\n    description: 'todo',\n    views: 100,\n    likes: 20,\n    date: '2016-08-02'\n  },\n];\n\nexport const Api = {\n  fetch(searchString: string): Array<VideoItem> {\n    return FAKE_VIDEOS.filter((video) =>\n      video.title.indexOf(searchString) >= 0\n    );\n  }\n};\n","ng2ts/app.component.ts":"import {Component} from '@angular/core';\n/*d:templateAddAction/trimLeading*/\nimport {VideoItem} from './video/video-item';\n/*/d*//*d:diInjectServiceSolved/trimLeading*/\nimport {VideoService} from './video/video.service';\n/*/d*//*d:templateAllVideos*/\nconst FAKE_VIDEOS = [{\n    title: 'Cute kitten',\n    src: '/assets/images/cat-1.jpg'\n  },\n  {\n    title: 'Kitten on the tree',\n    src: '/assets/images/cat-5.jpg'\n  },\n  {\n    title: 'Serouis cat',\n    src: '/assets/images/cat-3.jpg'\n  }];\n/*/d*//*d:createComponentSolved*/\n@Component({\n  selector: 'my-app',\n  /*/d*//*d:createComponentSolved:bootstrapSolved/trimBoth*/\n  template: '<h1>Hello CatTube!</h1>',\n  /*/d*//*d:templatePageSetup/trimBoth*/\n  templateUrl: './app.html'\n  /*/d*//*d:createComponentSolved/trimTrailing*/\n})\nexport class AppComponent {\n/*/d*//*d:templatePageSetup/trimTrailing*/\n  title = 'CatTube';\n/*/d*//*d:diInjectServiceSolved*/\n  constructor(public videoService: VideoService) {\n  }\n/*/d*//*d:templateAddActionSolved/trimTrailing*/\n  videos: VideoItem[] = [];\n\n  search(searchString: string) {\n    /*/d*//*d:diInjectServiceSolved*/\n    this.videos = this.videoService.search(searchString);\n    /*/d*//*d:templateAllVideosSolved:diInjectService*/\n    this.videos = FAKE_VIDEOS.filter(video => video.title.indexOf(searchString) >= 0);\n  /*/d*//*d:templateAddActionSolved/trimBoth*/}\n  /*/d*//*d:templateAllVideosSolved/trimTrailing*/\n\n  ngOnInit(){\n    this.search('');\n  }\n/*/d*//*d:createComponentSolved/trimTrailing*/\n}\n/*/d*//*d:neverShow*/\n// Please ignore\nexport function evalJs(string) {\n  return string;\n}\n/*/d*/\n","ng2ts/app.html":"<div>/*d:templatePageSetupSolved*/\n  <h1>{{title}}</h1>\n  /*/d*//*d:templatePageSetupSolved:templatePageSetupSolved/trimLeading*/\n  <input type='text' placeholder='video'>\n  <button>Search</button>\n  /*/d*//*d:templateAddActionSolved*/<input type='text' placeholder='video' #searchString>\n  <button (click)='search(searchString.value)'>Search!</button>\n  /*/d*//*d:templateAddActionSolved*/\n  <div *ngIf='!videos?.length'>\n    No videos!\n  </div>\n  /*/d*//*d:templateAllVideosSolved:videoComponentUse*/\n  <div *ngFor='let video of videos'>\n    <h2>{{video.title}}</h2>\n    <img [src]='video.src'>\n  </div>\n  /*/d*//*d:videoComponentUseSolved*/\n  <my-video *ngFor='let video of videos' [video]='video'></my-video>\n/*/d*/\n</div>\n","ng2ts/app.module.ts":"import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {AppComponent} from './app.component';\n/*d:thumbsComponentUse/trimLeading*/\nimport {ThumbsComponent} from './thumbs/thumbs.component';\n/*/d*//*d:togglePanelComponentUse/trimLeading*/\nimport {TogglePanelComponent} from './toggle-panel/toggle-panel.component';\n/*/d*//*d:diInjectService/trimLeading*/\nimport {VideoService} from './video/video.service';\n/*/d*//*d:videoComponentUse/trimLeading*/\nimport {VideoComponent} from './video/video.component';\n/*/d*//*d:contextComponentUse/trimLeading*/\nimport {ContextComponent} from './context/context.component';\n/*/d*//*d:fuzzyPipeUse/trimLeading*/\nimport {FuzzyPipe} from './fuzzy-pipe/fuzzy.pipe';\n/*/d*//*d:createModuleSolved/trimTrailing*/\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent\n    /*/d*//*d:videoComponentUseSolved/trimBoth*/, VideoComponent\n    /*/d*//*d:thumbsComponentUseSolved/trimBoth*/, ThumbsComponent\n    /*/d*//*d:togglePanelComponentUseSolved/trimBoth*/, TogglePanelComponent\n    /*/d*//*d:contextComponentUse/trimBoth*/, ContextComponent\n    /*/d*//*d:fuzzyPipeUseSolved/trimBoth*/, FuzzyPipe\n    /*/d*//*d:createModuleSolved/trimBoth*/\n  ],\n  bootstrap: [AppComponent]/*/d*//*d:diInjectServiceSolved/trimTrailing*/,\n  providers: [VideoService]\n  /*/d*//*d:createModuleSolved/trimTrailing*/\n})\nexport class AppModule {\n  /*/d*//*d:createModuleSolved*/\n}/*/d*/\n","ng2ts/code.ts":"export declare const thumbs_thumbs_html: string;\nexport declare const video_video_html: string;\nexport declare const typescript_intro_Codelab_ts: string;\nexport declare const app_html: string;\nexport declare const app_component_ts: string;\nexport declare const toggle_panel_toggle_panel_html: string;\nexport declare const context_context_html: string;\n\n","ng2ts/context/context.component.ts":"import {Component} from '@angular/core';\nimport {ContextService} from './context.service';\nimport {VideoComponent} from '../video/video.component';\n\n@Component({\n  selector: 'my-ad',\n  templateUrl: './context.html'\n})\nexport class ContextComponent {\n  text: string;\n  /*d:contextComponentUseSolved*/\n  constructor(public parent: VideoComponent,\n              private  service: ContextService) {\n  }\n\n  ngOnInit() {\n    this.text = this.service\n      .getAdText(this.parent.video.description);\n  }\n  /*/d*/\n}\n","ng2ts/context/context.service.ts":"export class ContextService {\n  getAdText(description: string) {\n    // Super secret algorithm, please don't share outside of this course.\n    return description.indexOf('music') >= 0 ?\n      'Buy awesome speakers on our web site.' :\n      'Check out our web site';\n  }\n}\n","ng2ts/data-binding/DataBinding.ts":"import {Component, Input} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Component({\n  selector: 'my-flag',\n\n  template: `<my-rectangle [color]=\"'yellow'\" [height]=\"60\"></my-rectangle>\n    <my-rectangle [color]=\"'blue'\" [height]='30'></my-rectangle>\n    <my-rectangle [color]=\"'red'\" [height]='30'></my-rectangle>`\n\n\n})\nexport class ParentComponent {\n}\n\n@Component({\n  selector: 'my-rectangle',\n  template: `<div  [style]=\"getCss()\">1</div>`\n})\nexport class Rectangle {\n  @Input() color: string;\n  @Input() height: number;\n\n  constructor(private sanitizer: DomSanitizer) {\n  }\n\n  getCss() {\n    return this.sanitizer.bypassSecurityTrustStyle(`\n      width: 300;\n      height: 30px; \n      background: ${this.color};\n    `);\n  }\n}\n\n","ng2ts/data-binding/DataBindingModule.ts":"import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {ParentComponent, Rectangle} from './DataBinding';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [ParentComponent, Rectangle],\n  bootstrap: [ParentComponent]\n})\nexport class AppModule {\n}\n","ng2ts/fuzzy-pipe/fuzzy.pipe.ts":"import {Pipe, PipeTransform} from '@angular/core';\n/*d:fuzzyPipeCreateSolved*/\n@Pipe({name: 'fuzzy'})\nexport class FuzzyPipe implements PipeTransform {\n  transform(value: string) {\n    let date = new Date(value);\n    let dateNow = new Date();\n\n    let millisecondsDifference = dateNow.getTime() - date.getTime();\n    let differenceDays = Math.floor(millisecondsDifference / (1000 * 3600 * 24));\n    let differenceYears = Math.floor(differenceDays / 365);\n\n    if (differenceDays < 365) {\n      return differenceDays + ' days';\n    }\n    return differenceYears + ' years ago';\n  }\n}\n/*/d*//*d:neverShow*/\n// Please ignore\nexport function evalJs(string) {\n  return string;\n}\n/*/d*/\n","ng2ts/main.ts":"import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppModule} from './app.module';\n/*d:templatePageSetup/trimLeading*/\nimport {ResourceLoader} from '@angular/compiler';\nimport * as code from './code';\n\n// The code below is used to match the Components with the appropriate templates.\n//\nclass MyResourceLoader extends ResourceLoader {\n  get(url: string): Promise<string> {\n    const templateId = Object.keys(code).find(key => key.includes(url.replace(/[\\/\\.-]/gi, '_')));\n    let template = code[templateId];\n    if (!template) {\n\n      console.log(template);\n      debugger;\n    }\n    return Promise.resolve(template);\n  };\n}\n/*/d*//*d:bootstrapSolved/trimTrailing*/\nconst platform = platformBrowserDynamic();\n/*/d*//*d:bootstrapSolved:bootstrapSolved/trimTrailing*/\nplatform.bootstrapModule(AppModule);\n/*/d*//*d:templatePageSetup*/\nplatform.bootstrapModule(AppModule, {\n  providers: [\n    {provide: ResourceLoader, useClass: MyResourceLoader}\n  ]\n});\n/*/d*/\n","ng2ts/tests/bootstrapTest.ts":"describe('Component', () => {\n  xit(`There is actually no simple way to test it, just make sure it looks nice :)`, () => {\n\n  });\n});\n\n","ng2ts/tests/codelabTest.ts":"/**\n * This is a good sample sample of a codelab exercise.\n *\n * An exercise is just a folder with a bunch of files.\n *\n * the configuration is in app/codelab/codelab-config.ts.\n *\n *\n * There are\n *\n */\n/**\n * solution/ prefix is used to let the test typechecked.\n * It will be stripped during runtime, and the Codelab module\n * will be loaded.\n */\nimport {Codelab, evalJs} from '../typescript-intro/Codelab';\n/**\n * In the test we get the access to the actual sourcecode\n * I'd try not to overuse it\n */\nimport * as code from '../code';\n\nconst guests = [\n  {name: 'me', coming: true},\n  {name: 'notme', coming: false},\n];\n\ndescribe('Component', () => {\n  it(`Create a class called 'Codelab'`, () => {\n    /**\n     * We can use evalJs to get into the scope of the user's file.\n     * Currently evalJs has to be manually added to the `before`\n     * section in the file config.\n     *\n     * I expert the primary use case for eval js would be to remind\n     * the user to export something.\n     *\n     * e.g. if the user created teh class, but haven't exported it this\n     * test will still pass.\n     */\n    chai.expect(typeof evalJs('Codelab')).equals('function');\n  });\n\n  it(`Export the class`, () => {\n    /**\n     * Require the class, assert it's a function (compile target is es5).\n     */\n    chai.expect(typeof Codelab).equals('function');\n  });\n\n  it('Add a constructor', () => {\n    /**\n     * Fancy: Require the actual source code, and search in it.\n     */\n    chai.expect(code.typescript_intro_Codelab_ts.indexOf('constructor') > -1, `The codelab class doesn't have constuctor`).is.true;\n  });\n\n  it(`Make constructor take a parameter 'guests'`, () => {\n    chai.expect(Codelab.length, `Codelab constructor should take one parameter called 'guests'`).equals(1);\n  });\n\n  it('This parameter should be public', () => {\n    const codelab = new Codelab(guests);\n    chai.expect(codelab.guests).equals(guests);\n  });\n\n  it(`Create new method 'getGuestsComing'`, () => {\n    chai.expect(typeof (new Codelab(guests).getGuestsComing)).equals('function');\n  });\n\n  it(`Modify getGuestsComing to filter the guests array and only return guests with the 'coming' property set to true. \n  (hint: please use Array.filter method, and NOT a for loop. Ask us for help if you don't know how to\n   (There's potential of getting into an infinite loop otherwise)`, () => {\n    chai.expect(new Codelab(guests).getGuestsComing().length).equals(1);\n  });\n\n  /*\n   xit(`Let's debug the app! You'll need this if something goes wrong.\n   * Open the dev tools in your browser\n   * Put in the new method add 'debugger;'\n   * The app will stop, and you'll be able to inspect local variables.\n   * Get out using F8\n   * We can't really test this, so this test is marked as passed\n   `, () => {\n\n   });\n   */\n});\n\n","ng2ts/tests/contextComponentUseTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../app.component';\nimport {app_html, video_video_html, toggle_panel_toggle_panel_html, context_context_html, thumbs_thumbs_html} from '../code';\nimport {AppModule} from '../app.module';\nimport {VideoComponent} from '../video/video.component';\nimport {VideoService} from '../video/video.service';\nimport {TogglePanelComponent} from '../toggle-panel/toggle-panel.component';\nimport {ContextComponent} from '../context/context.component';\nimport {ContextService} from '../context/context.service';\nimport {Api} from '../api.service';\nimport {ThumbsComponent} from '../thumbs/thumbs.component';\n\nfunction objectValues(object) {\n  return Object.keys(object).reduce((result, key) => {\n    result.push(object[key]);\n    return result;\n  }, []);\n}\n\nfunction objectFindPropOfType(object, Type) {\n  return Object.keys(object).reduce((prop, key) => {\n    if (prop) return prop;\n    if (object[key] instanceof Type) return key;\n  }, undefined);\n}\n\nfunction objectHasAn(object, Type) {\n  return objectValues(object).some(val => val instanceof Type)\n}\n\nconst sampleVideo = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService, ContextService, /* that's a hack, to provide parent component */ VideoComponent],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent, ContextComponent, ThumbsComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: app_html}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: video_video_html}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: toggle_panel_toggle_panel_html}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: context_context_html}});\n  TestBed.overrideComponent(ThumbsComponent, {set: {template: thumbs_thumbs_html}});\n\n  TestBed.compileComponents();\n});\n\ndescribe('Children', () => {\n  it(`ContextComponent: Inject the ContextService into the constructor and store it as a property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(objectHasAn(fixture.componentInstance, ContextService)).to.be.true;\n  });\n\n  it(`ContextComponent: Inject the parent component (VideoComponent) into the constructor and store it as a property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(objectHasAn(fixture.componentInstance, VideoComponent)).to.be.true;\n  });\n\n  it(`ContextComponent: Add an ngOnInit method to the component. (It's a special method angular will call when the component is created).`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    chai.expect(fixture.componentInstance.ngOnInit).is.a('function');\n  });\n\n  it(`ContextComponent: In the onOnInit method Call 'getAdText' on the service, and pass it the video 'description' provided by the injected video component. Assign the result to the declared text property.`, () => {\n    const fixture = TestBed.createComponent(ContextComponent);\n    let componentInstance = fixture.componentInstance;\n\n    let vcProp = objectFindPropOfType(componentInstance, VideoComponent);\n    chai.expect(vcProp, `'VideoComponent' was not injected.`).to.not.be.undefined;\n\n    componentInstance[vcProp].video = sampleVideo;\n    chai.expect(componentInstance.ngOnInit).is.a('function');\n    componentInstance[vcProp].video.description = 'music';\n    componentInstance.ngOnInit();\n    fixture.detectChanges();\n\n    chai.expect(fixture.nativeElement.innerHTML).to.contain('speakers');\n\n    componentInstance[vcProp].video.description = 'banana';\n    componentInstance.ngOnInit();\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).to.contain('Check out our web site');\n  });\n\n  it(`AppModule: Add the ContextComponent to the AppModule declarations (We did this for you).`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata('annotations', AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(ContextComponent);\n  });\n\n  it(`video.html: Actually display the ad (We actually also did it for you).`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    // TODO: Actually write a test\n    //chai.expect(fixture.nativeElement.querySelector('my-ad')).to.be.ok\n  });\n});\n\n","ng2ts/tests/createComponentTest.ts":"import {TestBed} from '@angular/core/testing';\n// Solution prefix will be stripped-out by the app\nimport {AppComponent, evalJs} from '../app.component';\nimport 'reflect-metadata';\n\nlet metadata;\nbeforeEach(() => {\n  try {\n    TestBed.resetTestingModule();\n    TestBed.configureTestingModule({declarations: [AppComponent]});\n    metadata = Reflect.getMetadata('annotations', AppComponent);\n  } catch (e) {\n    // Do nothing, we have assertions below for this case\n  }\n});\n\ndescribe('Component', () => {\n  it('Create a class called AppComponent', () => {\n    chai.expect(typeof evalJs('AppComponent')).equals('function');\n  });\n\n  it('Export the created class', () => {\n    chai.expect(typeof AppComponent).equals('function');\n  });\n\n  it('Add a Component decorator for the class', () => {\n    chai.expect(metadata).is.not.undefined\n  });\n\n  it('Add a selector to the component decorator', () => {\n    chai.expect(metadata[0].selector).equals('my-app');\n  });\n\n  it(`Add a template that contains: '<h1>Hello CatTube!</h1>'`, () => {\n    chai.expect(metadata[0].template).equals('<h1>Hello CatTube!</h1>');\n  });\n});\n\n","ng2ts/tests/createModuleTest.ts":"import {TestBed} from '@angular/core/testing';\nimport {AppModule} from '../app.module';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppComponent} from '../app.component';\nimport 'reflect-metadata';\nlet metadata;\n\nbeforeEach(() => {\n\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: []});\n  try {\n    metadata = Reflect.getMetadata('annotations', AppModule);\n  } catch (e) {\n    // Do nothing, we have assertions below for this case\n  }\n});\n\ndescribe('Component', () => {\n  it(`Create a class called 'AppModule'`, () => {\n    chai.expect(typeof AppModule).equals('function');\n  });\n\n  // TODO: check if the module is exported\n  // See 1-bootstrap/0-component/Test.ts\n\n  it('Add a NgModule decorator for the class', () => {\n    chai.expect(metadata).is.not.undefined\n  });\n\n  it(`Add 'BrowseModule' to the NgModule decorator imports`, () => {\n    // TODO: Figure out if this is actually needed\n    chai.expect(metadata[0].imports[0]).equals(BrowserModule);\n  });\n\n  it(`Add 'AppComponent' to the 'declarations' property of the decorator`, () => {\n    chai.expect(metadata[0].declarations[0]).equals(AppComponent);\n  });\n\n  it(`Add 'AppComponent' to the 'bootstrap' property of the decorator`, () => {\n    chai.expect(metadata[0].bootstrap[0]).equals(AppComponent);\n  });\n});\n\n","ng2ts/tests/diInjectServiceTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../app.component';\nimport {VideoService} from '../video/video.service';\nimport {AppModule} from '../app.module';\nimport {app_html, app_component_ts} from '../code';\n\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: app_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`VideoService.ts: Add @Injectable() decorator to the classs`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata('parameters', VideoService);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata).not.undefined;\n  });\n  it(`Appmodule.ts: Add VideoService to the NgModule providers property`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata('annotations', AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].providers[0]).equals(VideoService);\n  });\n\n  it(`AppComponent.ts: Inject videoService in the component constructor`, () => {\n    chai.expect(AppComponent.length, `App component constructor doesn't take any parameters`).to.equal(1);\n    chai.expect(app_component_ts).matches(/VideoService/)\n  });\n\n  it(`AppComponent.ts: When searching assign videoService.search results to the videos property of the class`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    chai.expect(fixture.componentInstance.videos.length).to.equal(4);\n  });\n\n\n});\n\n","ng2ts/tests/fuzzyPipeCreateTest.ts":"import {FuzzyPipe, evalJs} from '../fuzzy-pipe/fuzzy.pipe';\nimport 'reflect-metadata';\n\nlet metadata;\nbeforeEach(() => {\n  try {\n    metadata = Reflect.getMetadata('annotations', FuzzyPipe);\n  } catch (e) {\n\n  }\n});\n\nconst d = new Date();\nd.setDate(d.getDate() - 2);\nconst formattedDate = d.toISOString().slice(0, 10);\n\n\ndescribe('Pipe', () => {\n  it('Create a class called FuzzyPipe', () => {\n    chai.expect(typeof evalJs('FuzzyPipe')).equals('function');\n  });\n\n  it('Export it', () => {\n    chai.expect(typeof FuzzyPipe).equals('function');\n  });\n\n  it('Add a @Pipe() decorator', () => {\n    chai.expect(metadata).is.an('array')\n  });\n\n  it('Set the name to fuzzy', () => {\n    chai.expect(metadata[0].name).equals('fuzzy');\n  });\n\n  it(`Make it return '2 days ago for '${formattedDate}'`, () => {\n    let fuzzyTime = new FuzzyPipe();\n    chai.expect(fuzzyTime.transform(d.toISOString().slice(0, 10)).toLowerCase()).equals('2 days');\n  });\n});\n\n","ng2ts/tests/fuzzyPipeUseTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../app.component';\nimport {app_html, video_video_html, toggle_panel_toggle_panel_html, context_context_html, thumbs_thumbs_html} from '../code';\nimport {AppModule} from '../app.module';\nimport {VideoComponent} from '../video/video.component';\nimport {VideoService} from '../video/video.service';\nimport {TogglePanelComponent} from '../toggle-panel/toggle-panel.component';\nimport {ContextComponent} from '../context/context.component';\nimport {ContextService} from '../context/context.service';\nimport {Api} from '../api.service';\nimport {FuzzyPipe} from '../fuzzy-pipe/fuzzy.pipe';\nimport {ThumbsComponent} from '../thumbs/thumbs.component';\n\nfunction objectValues(object) {\n  return Object.keys(object).reduce((result, key) => {\n    result.push(object[key]);\n    return result;\n  }, []);\n}\nconst sampleVideo = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService, ContextService, /* that's a hack, to provide parent component */ VideoComponent],\n    declarations: [AppComponent, VideoComponent, ThumbsComponent, TogglePanelComponent, ContextComponent, FuzzyPipe]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: app_html}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: video_video_html}});\n  TestBed.overrideComponent(ThumbsComponent, {set: {template: thumbs_thumbs_html}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: toggle_panel_toggle_panel_html}});\n  TestBed.overrideComponent(ContextComponent, {set: {template: context_context_html}});\n  TestBed.compileComponents();\n});\nfunction sampleFuzzy(value) {\n  let date = new Date(value);\n  let dateNow = new Date();\n  let millisecondsDifference = dateNow.getTime() - date.getTime();\n  let differenceDays = Math.floor(millisecondsDifference / (1000 * 3600 * 24));\n  return differenceDays + ' days';\n}\n\ndescribe('Pipes', () => {\n\n\n  it(`AppModule: Add the FuzzyPipe to the AppModule declarations`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata('annotations', AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Fuzzy pipe not found`).contains(FuzzyPipe);\n  });\n\n  it(`video.html: Use the pipe on the date.`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML).contains(sampleFuzzy(sampleVideo.date));\n  });\n});\n\n","ng2ts/tests/templateAddActionTest.ts":"import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from '../app.component';\nimport 'initTestBed';\nimport {app_html} from '../code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: app_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`AppComponent.ts: Add a 'videos' property, set the value as empty array.`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.componentInstance.videos, `No videos property on the component`).is.not.undefined;\n    chai.expect(fixture.componentInstance.videos, `Videos property on the component is not an array.`).is.an('array');\n  });\n\n  it(`AppComponent.ts: Add a 'search' method on the component, that takes a 'searchString' parameter.`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.componentInstance.search, `Search should be a function`).is.a('function');\n    chai.expect(fixture.componentInstance.search.length, `Search should take one parameter`).equals(1);\n  });\n\n  it(`app.html: Add a click handler to the button, call 'search' method and pass the input value \n      (Actual search functionality will be implemented in the next exercise)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const input = fixture.nativeElement.querySelector('input');\n    const button = fixture.nativeElement.querySelector('button');\n\n\n    function testSearch(searchString) {\n      let passedValue = undefined;\n      let called = false;\n      fixture.componentInstance.search = function (value) {\n        called = true;\n        passedValue = value;\n      };\n\n      input.value = searchString;\n      button.click();\n      chai.expect(called, `Search function should be called when the search button is pressed`).equals(true);\n      chai.expect(passedValue, `Input value is not passed to the search function`).equals(input.value)\n    }\n\n    testSearch('Awesome kittens');\n    testSearch('Other value');\n  });\n\n  it(`app.html: Add a message saying 'No videos' which is displayed only when the videos array is empty`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.componentInstance.videos = [];\n    chai.expect(fixture.nativeElement.innerHTML.toLowerCase()).contains('no videos');\n\n    fixture.componentInstance.videos = [{title: 'Hi', src: 'Test'}];\n\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML.toLowerCase()).not.contains('no videos');\n  });\n\n\n});\n\n","ng2ts/tests/templateAllVideosTest.ts":"import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from '../app.component';\nimport 'initTestBed';\nimport {app_html} from '../code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: app_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`AppComponent.ts: When 'search' is called, filter videos by the title matching the search string. \n  Assign them to the 'videos' property of the component. Use 'FAKE_VIDEOS' variable as a data source.`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have 2 kittens').equals(2);\n    fixture.componentInstance.search('cat');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have 1 cat').equals(1);\n    fixture.componentInstance.search('dog');\n    chai.expect(fixture.componentInstance.videos.length, 'Should have no dogs').equals(0);\n  });\n\n  it(`app.html: Iterate over the videos using '*NgFor', and display a title for each`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.search('itten');\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[0].title);\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[1].title);\n\n    fixture.componentInstance.search('cat');\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.innerHTML).contains(fixture.componentInstance.videos[0].title);\n  });\n\n  it(`app.html: Also display a thumbnail`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    fixture.componentInstance.search('itten');\n    fixture.detectChanges();\n    const images = fixture.nativeElement.querySelectorAll('img');\n    chai.expect(images.length).equals(2);\n    chai.expect(images[1].getAttribute('ng-reflect-src')).equals(fixture.componentInstance.videos[1].src);\n    chai.expect(images[0].getAttribute('ng-reflect-src')).equals(fixture.componentInstance.videos[0].src);\n  });\n\n  // it(`#Bonus app.html: Make hitting enter work in the input trigger the search`, () => {\n  //   //TODO\n  // });\n\n  it(`#Bonus AppComponent.ts: When the component is created, trigger a search for an empty string. `, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const images = fixture.nativeElement.querySelectorAll('img');\n    chai.expect(images.length).equals(3);\n  });\n});\n\n","ng2ts/tests/templatePageSetupTest.ts":"import {TestBed} from '@angular/core/testing';\nimport {AppComponent} from '../app.component';\nimport 'initTestBed';\nimport {app_html} from '../code';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({declarations: [AppComponent]});\n\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: app_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Blabla', () => {\n  it(`app.html: Add a <h1> header, display the 'title' property of the AppComponent inside`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const header = fixture.nativeElement.querySelector('h1');\n    chai.expect(header, `Can't find any h1 headers`).is.not.null;\n    chai.expect(header.innerHTML).contains('CatTube');\n    fixture.componentInstance.title = 'SomethingElse';\n    fixture.detectChanges();\n\n    const header2 = fixture.nativeElement.querySelector('h1');\n    chai.expect(header2.innerHTML, `Use the curly braces to put component title property in the header`).contains('SomethingElse');\n  });\n\n  it(`app.html: Add an <input> with a 'placeholder' set to 'video' (hint: 'placeholder' is just an attribute of an input tag) `, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const input = fixture.nativeElement.querySelector('input');\n    chai.expect(input, `Can't find any inputs`).is.not.null;\n    chai.expect(input.placeholder, `Input placeholder should contain word 'video'`).contains('video');\n  });\n\n  it(`app.html: Add a <button> labeled 'search'`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const button = fixture.nativeElement.querySelector('button');\n    chai.expect(button, `Can't find any buttons`).is.not.null;\n    chai.expect(button.innerHTML.toLowerCase()).contains('search')\n  });\n\n\n});\n\n","ng2ts/tests/ThumbsComponentCreateTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {thumbs_thumbs_html} from '../code';\nimport {Api} from '../api.service';\nimport {ThumbsComponent, Thumbs} from '../thumbs/thumbs.component';\nconst thumbs = Api.fetch('')[0];\n\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [ThumbsComponent]\n  });\n\n  TestBed.overrideComponent(ThumbsComponent, {\n    set: {\n      template: thumbs_thumbs_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ThumbsComponent);\n      fixture.detectChanges();\n    });\n\n    it(`thumbs.html: Add a button with a 'thumbs-up' CSS class.`, () => {\n      chai.expect(fixture.nativeElement.querySelector('.thumbs-up'), `can't find thumbs up button`).to.be.ok;\n    });\n\n    it(`thumbs.html: Add a button with a 'thumbs-down' CSS class.`, () => {\n      chai.expect(fixture.nativeElement.querySelector('.thumbs-down'), `can't find thumbs down button`).to.be.ok;\n    });\n  });\n\n  describe('Make sure things work', () => {\n    it(`ThumbsComponent.ts: Set the selector to be 'my-thumbs'.`, () => {\n      const metadata = Reflect.getMetadata('annotations', ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `ThumbsComponent's selector has to be 'my-thumbs'.`).equals('my-thumbs')\n    });\n\n    it(`ThumbsComponent.ts: Set the templateUrl to load appropriate html file.`, () => {\n      const metadata = Reflect.getMetadata('annotations', ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].templateUrl, `ThumbsComponent's templateUrl should be set to './thumbs.html'`).equals('./thumbs.html')\n    });\n\n    // TODO: split\n    it(`ThumbsComponent.ts: Add an 'onThumbs' property and set the value to a new EventEmitter. Decorate with @Output()`, () => {\n      const metadata = Reflect.getMetadata('propMetadata', ThumbsComponent);\n      chai.expect(metadata, `ThumbsComponent doesn't have any @Outputs()'s`).is.not.undefined;\n      chai.expect(Object.keys(metadata).length, `ThumbsComponent doesn't have any @Outputs()'s`).equals(1);\n      chai.expect(metadata.onThumbs, `ThumbsComponent's @Outputs()' should be called onThumbs.`).is.not.undefined;\n    });\n  });\n\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ThumbsComponent);\n      fixture.detectChanges();\n    });\n\n    it(`thumbs.html: Make the 'thumbs-up' button emit the onThumbs event with the correct thumbs ENUM value.`, () => {\n      let thumbs = null;\n      fixture.componentInstance.onThumbs.subscribe((event) => {\n        thumbs = event;\n      });\n      chai.expect(thumbs, `OnThumbs was called without pressing the button`).to.be.not.ok;\n      fixture.nativeElement.querySelector('.thumbs-up').click();\n      chai.expect(thumbs, `OnThumbs was not called when pressing the button with the 'thumbs-up' class.`).to.equal(Thumbs.UP);\n    });\n\n    it(`thumbs.html: Make the 'thumbs-down' button emit the onThumbs event with the correct thumbs ENUM value.`, () => {\n      let thumbs = null;\n      fixture.componentInstance.onThumbs.subscribe((event) => {\n        thumbs = event;\n      });\n      chai.expect(thumbs, `OnThumbs was called without pressing the button`).to.be.not.ok;\n      fixture.nativeElement.querySelector('.thumbs-down').click();\n      chai.expect(thumbs, `OnThumbs was not called when pressing the button with the 'thumbs-down' class.`).to.equal(Thumbs.DOWN);\n    });\n  });\n});\n\n","ng2ts/tests/ThumbsComponentUseTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {video_video_html, thumbs_thumbs_html} from '../code';\nimport {AppModule} from '../app.module';\nimport {Api} from '../api.service';\nimport {ThumbsComponent} from '../thumbs/thumbs.component';\nimport {VideoComponent} from '../video/video.component';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [VideoComponent, ThumbsComponent]\n  });\n\n  TestBed.overrideComponent(VideoComponent, {\n    set: {\n      template: video_video_html\n    }\n  });\n  TestBed.overrideComponent(ThumbsComponent, {\n    set: {\n      template: thumbs_thumbs_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add the ThumbsComponent to the AppModule 'declarations' property`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata('annotations', AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Thumbs component not found`).contains(ThumbsComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(VideoComponent);\n  });\n\n  it(`video.html: Use the thumbs component in the template`, () => {\n    let fixture = TestBed.createComponent(VideoComponent);\n    fixture.componentInstance.video = Api.fetch('')[0];\n    fixture.detectChanges();\n    chai.expect(fixture.nativeElement.querySelector('.thumbs-up')).is.ok;\n    chai.expect(fixture.nativeElement.querySelector('.thumbs-down')).is.ok;\n  });\n\n  it(`VideoComponent: Listen to the thumbs component onThumbs event, and update the amount of likes accordingly`, () => {\n    let fixture = TestBed.createComponent(VideoComponent);\n    fixture.componentInstance.video = Api.fetch('')[0];\n    fixture.detectChanges();\n    const likes = fixture.componentInstance.video.likes;\n    // TODO: test it.\n    fixture.nativeElement.querySelector('.thumbs-up').click();\n    chai.expect(fixture.nativeElement.querySelector('.thumbs-up'), 'Thumbs up component is not present').to.be.ok;\n    chai.expect(fixture.componentInstance.video.likes).equals(likes + 1);\n    fixture.nativeElement.querySelector('.thumbs-down').click();\n    chai.expect(fixture.nativeElement.querySelector('.thumbs-down'), 'Thumbs down component is not present').to.be.ok;\n    chai.expect(fixture.componentInstance.video.likes).equals(likes);\n  });\n});\n\n","ng2ts/tests/togglePanelComponentCreateTest.ts":"import {TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport 'initTestBed';\nimport {toggle_panel_toggle_panel_html} from '../code';\nimport {TogglePanelComponent} from '../toggle-panel/toggle-panel.component';\nimport {WrapperComponent} from '../wrapper.component';\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [],\n    declarations: [TogglePanelComponent, WrapperComponent]\n  });\n\n  TestBed.overrideComponent(TogglePanelComponent, {\n    set: {\n      template: toggle_panel_toggle_panel_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Content projection', () => {\n  it(`TogglePanelComponent.ts: We added the template and the selector for you, enjoy!`, () => {\n  });\n\n  it(`TogglePanelComponent.ts: Add a boolean property to the component. The property can have any name, and must have a default value.`, () => {\n    let fixture = TestBed.createComponent(TogglePanelComponent);\n    // the intent is to let them come up with the property name, so we assume there will be one.\n    const props = Object.keys(fixture.componentInstance);\n\n    chai.expect(props.length, `A property with a default value was not declared on the component.`).is.not.equal(0);\n    chai.expect(props.length, `Too many properties were declared.`).is.not.greaterThan(1);\n    const prop = props[0];\n    chai.expect(fixture.componentInstance[prop], `Property '${prop}' is not of type boolean`).is.a('boolean');\n    chai.expect(fixture.componentInstance[prop], `Property '${prop}' must have a default value`).is.not.undefined;\n  });\n\n  it(`togglePanel.html: Use content projection to only display the content with the selector .description by default.`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be displayed`).not.null;\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be hidden`).is.null;\n  });\n\n  it(`togglePanel.html: Add a button to show extra information`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    let buttons = fixture.nativeElement.querySelectorAll('button');\n    chai.expect(buttons.length, `Should show exactly one button`).to.equals(1);\n  });\n\n  it(`togglePanel.html: When the button is pressed, switch the flag and only display the content with the '.extra' selector.`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    let button = fixture.nativeElement.querySelector('button');\n    button.click();\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be hidden`).is.null;\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be displayed`).not.null;\n  });\n\n  it(`togglePanel.html: Add a button to come back to the description`, () => {\n    let fixture = TestBed.createComponent(WrapperComponent);\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(fixture.debugElement.query(By.css('.description')), `Description should be displayed`).not.null;\n    chai.expect(fixture.debugElement.query(By.css('.extra')), `Extra information should be hidden`).is.null;\n  });\n});\n\n","ng2ts/tests/togglePanelComponentUseTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../app.component';\nimport {app_html, video_video_html, toggle_panel_toggle_panel_html, thumbs_thumbs_html} from '../code';\nimport {AppModule} from '../app.module';\nimport {VideoComponent} from '../video/video.component';\nimport {VideoService} from '../video/video.service';\nimport {TogglePanelComponent} from '../toggle-panel/toggle-panel.component';\nimport {ThumbsComponent} from '../thumbs/thumbs.component';\nimport {Api} from '../api.service';\nconst video = Api.fetch('')[0];\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent, VideoComponent, TogglePanelComponent, ThumbsComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {set: {template: app_html}});\n  TestBed.overrideComponent(ThumbsComponent, {set: {template: thumbs_thumbs_html}});\n  TestBed.overrideComponent(VideoComponent, {set: {template: video_video_html}});\n  TestBed.overrideComponent(TogglePanelComponent, {set: {template: toggle_panel_toggle_panel_html}});\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add the TogglePanelComponent to the AppModule declarations.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata('annotations', AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Keep the video component`).contains(VideoComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(AppComponent);\n    chai.expect(metadata[0].declarations, `Add TogglePanelComponent`).contains(TogglePanelComponent);\n  });\n\n  it(`video.html: Use the TogglePanel component in the template`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n    chai.expect(panel).is.not.null\n  });\n\n\n  it(`video.html: Add .description as TogglePanel's content`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n\n    chai.expect(panel.querySelector('.description')).is.not.null;\n    chai.expect(panel.querySelector('.extra')).is.null;\n\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should display description text.`).contains(video.description);\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should not display likes `).not.contains(video.likes);\n  });\n\n  it(`video.html: Add .extra as TogglePanel's content`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    let panel = fixture.nativeElement.querySelector('my-toggle-panel');\n\n    panel.querySelector('button').click();\n    fixture.detectChanges();\n    chai.expect(panel.querySelector('.description')).is.null.null;\n    chai.expect(panel.querySelector('.extra')).is.not.null;\n\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should not description text.`).not.contains(video.description);\n    chai.expect(fixture.nativeElement.querySelector('my-video').innerHTML, `Should display likes`).contains(video.likes);\n\n  });\n});\n\n","ng2ts/tests/videoComponentCreateTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {VideoService} from '../video/video.service';\nimport {video_video_html} from '../code';\nimport {VideoComponent} from '../video/video.component';\nimport {Api} from '../api.service';\nconst video = Api.fetch('')[0];\n\nbeforeEach(() => {\n  try {\n    TestBed.resetTestingModule();\n    TestBed.configureTestingModule({\n      providers: [VideoService],\n      declarations: [VideoComponent]\n    });\n    TestBed.overrideComponent(VideoComponent, {\n      set: {\n        template: video_video_html\n      }\n    });\n    TestBed.compileComponents();\n  } catch (e) {\n    // whatever\n  }\n});\n\ndescribe('Component tree', () => {\n  describe('Make sure metadata is in place', () => {\n    it(`VideoComponent.ts: Set the selector property to 'my-video'.`, () => {\n      const metadata = Reflect.getMetadata('annotations', VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].selector, `VideoComponent's selector has to be 'my-video'.`).equals('my-video')\n    });\n\n    it(`VideoComponent.ts: Set the templateUrl to load the appropriate html file`, () => {\n      const metadata = Reflect.getMetadata('annotations', VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have a @Component() annotation`).is.not.undefined;\n      chai.expect(metadata[0].templateUrl, `VideoComponent's templateUrl should be set to './video.html'`).matches(/\\.\\/video\\.html/)\n    });\n\n    it(`VideoComponent.ts: Add a video property and decorate it with @Input()`, () => {\n      const metadata = Reflect.getMetadata('propMetadata', VideoComponent);\n      chai.expect(metadata, `VideoComponent doesn't have any @Input()'s`).is.not.undefined;\n      chai.expect(Object.keys(metadata).length, `VideoComponent doesn't have any @Input()'s`).equals(1);\n      chai.expect(metadata.video, `VideoComponent's @Input()' should be called video.`).is.not.undefined;\n    });\n  });\n\n\n  describe('Make sure things are displayed properly', () => {\n    let fixture;\n    beforeEach(() => {\n      fixture = TestBed.createComponent(VideoComponent);\n      fixture.componentInstance.video = video;\n      fixture.detectChanges();\n    });\n\n    it(`Video.html: Display the video title`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video title`).contains(video.title);\n    });\n\n    it(`Video.html: Display the video thumbnail`, () => {\n      const image = fixture.nativeElement.querySelector('img');\n      chai.expect(image, `Can't find the thumbnal`).is.not.null;\n      chai.expect(image.getAttribute('ng-reflect-src')).equals(video.src);\n    });\n\n    it(`Video.html: Display the video description`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video description`).contains(video.description);\n    });\n\n\n\n    it(`Video.html: Display the video date`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video date`).contains(video.date);\n    });\n\n    it(`Video.html: Display the number video likes`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video like`).contains(video.likes);\n    });\n\n    it(`Video.html: Display the number of video views`, () => {\n      chai.expect(fixture.nativeElement.innerHTML, `can't find the video description`).contains(video.views);\n    });\n  });\n});\n\n","ng2ts/tests/videoComponentUseTest.ts":"import {TestBed} from '@angular/core/testing';\nimport 'initTestBed';\nimport {AppComponent} from '../app.component';\nimport {VideoService} from '../video/video.service';\nimport {app_html, video_video_html} from '../code';\nimport {AppModule} from '../app.module';\nimport {VideoComponent} from '../video/video.component';\nimport {Api} from '../api.service';\n\n\nbeforeEach(() => {\n  TestBed.resetTestingModule();\n  TestBed.configureTestingModule({\n    providers: [VideoService],\n    declarations: [AppComponent, VideoComponent]\n  });\n  TestBed.overrideComponent(AppComponent, {\n    set: {\n      template: app_html\n    }\n  });\n  TestBed.overrideComponent(VideoComponent, {\n    set: {\n      template: video_video_html\n    }\n  });\n  TestBed.compileComponents();\n});\n\ndescribe('Component tree', () => {\n  it(`AppModule: Add the VideoComponent to the AppModule 'declarations'.`, () => {\n    let metadata;\n    try {\n      metadata = Reflect.getMetadata('annotations', AppModule);\n    } catch (e) {\n      // Do nothing, we have assertions below for this case\n    }\n    chai.expect(metadata[0].declarations, `Video component not found`).contains(VideoComponent);\n    chai.expect(metadata[0].declarations, `Keep the app component`).contains(AppComponent);\n  });\n\n  it(`app.html: Use video component (get rid of the old title/thumbnail)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    fixture.componentInstance.videos = Api.fetch('');\n    // TODO: if the element is added, but the video prop is not present, this test will fail with\n    // A useless message. Passing video prop should actually be tested in the next test, and this\n    // Ane should pass.\n    fixture.detectChanges();\n\n    const myVideos = fixture.nativeElement.querySelectorAll('my-video');\n    chai.expect(myVideos.length, `can't find any <my-video> elements in the app component`).is.greaterThan(0);\n    chai.expect(myVideos.length, `There should be one my-video element for each element`).equals(fixture.componentInstance.videos.length);\n  });\n\n  it(`app.html: Use the data binding to pass the video object to the component (don't forget the square brackets)`, () => {\n    let fixture = TestBed.createComponent(AppComponent);\n\n    fixture.componentInstance.videos = Api.fetch('');\n\n    fixture.detectChanges();\n\n    const video = fixture.nativeElement.querySelector('my-video');\n    chai.expect(video.getAttribute('ng-reflect-video')).equals('[object Object]');\n  });\n});\n\n","ng2ts/thumbs.app.module.ts":"import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {ThumbsComponent} from './thumbs/thumbs.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [ThumbsComponent],\n  bootstrap: [ThumbsComponent]\n})\nexport class AppModule {\n}\n","ng2ts/thumbs/thumbs.component.ts":"import {Component, Output, EventEmitter} from '@angular/core';\n\n/**\n * Yes, TypeScript has enums!\n * There's no nice way to use them in the template though.\n */\nexport enum Thumbs {\n  UP,\n  DOWN\n}\n/*d:thumbsComponentCreateSolved/trimTrailing*/\n@Component({\n  selector: 'my-thumbs',\n  templateUrl: './thumbs.html'\n})\n/*/d*/\nexport class ThumbsComponent {\n  /*d:thumbsComponentCreateSolved/trimBoth*/\n  @Output() onThumbs: EventEmitter<Thumbs> = new EventEmitter<Thumbs>();\n\n  thumbsUp() {\n    this.onThumbs.emit(Thumbs.UP)\n  }\n\n  thumbsDown() {\n    this.onThumbs.emit(Thumbs.DOWN)\n  }\n  /*/d*/\n}\n","ng2ts/thumbs/thumbs.html":"/*d:initial:thumbsComponentCreate/trimBoth*/\n<!-- Write your code here -->\n/*/d*//*d:thumbsComponentCreateSolved/trimBoth*/\n<button (click)=\"thumbsUp()\" class='thumbs-up'>\n  Thumbs up\n</button>\n<button (click)=\"thumbsDown()\" class='thumbs-down'>\n  Thumbs down\n</button>\n/*/d*/\n","ng2ts/toggle-panel.app.module.ts":"import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {TogglePanelComponent} from './toggle-panel/toggle-panel.component';\nimport {WrapperComponent} from './wrapper.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [WrapperComponent, TogglePanelComponent],\n  bootstrap: [WrapperComponent]\n})\nexport class AppModule {\n}\n","ng2ts/toggle-panel/toggle-panel.component.ts":"import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-toggle-panel',\n  templateUrl: 'toggle-panel.html'\n})\nexport class TogglePanelComponent {\n/*d:togglePanelComponentCreateSolved*/  showDescription = true;/*/d*/\n}\n","ng2ts/toggle-panel/toggle-panel.html":"/*d:togglePanelComponentCreate:togglePanelComponentCreate/trimBoth*/\n<!-- Write your code here -->\n/*/d*//*d:togglePanelComponentCreateSolved/trimBoth*/\n<div *ngIf=\"showDescription\">\n  <ng-content select='.description'></ng-content>\n  <button (click)='showDescription=false'>Show meta</button>\n</div>\n<div *ngIf=\"!showDescription\">\n  <ng-content select='.extra'></ng-content>\n  <button (click)='showDescription=true'>Show description</button>\n</div>\n/*/d*/\n","ng2ts/typescript-intro/Codelab.ts":"import {Guest} from './Guest';\n/*d:initial:initial*/// Add your code here\n/*/d*//*d:codelabSolved*/\nexport class Codelab {\n  constructor(public guests: Guest[]) {\n  }\n\n  getGuestsComing() {\n    return this.guests.filter(guest => guest.coming);\n  }\n}\n/*/d*//*d:neverShow*/\n// Needed for type checking\nexport function evalJs(param){ return param;}\n/*/d*/\n","ng2ts/typescript-intro/Guest.ts":"export interface Guest {\n  coming: boolean,\n  name: string\n}\n","ng2ts/typescript-intro/Main.ts":"import {Codelab} from './Codelab';\nimport {Guest} from './Guest';\n\n// Use this file for reference.\nconst guests = [\n  {\n    coming: true,\n    name: 'Sir Isaac Newton'\n  },\n  {\n    coming: true,\n    name: 'Marie Curie'\n  },\n  {\n    coming: true,\n    name: 'Albert Einstein'\n  },\n  {\n    coming: false,\n    name: 'Charles Darwin'\n  }];\n\nconst codelab = new Codelab(guests);\n\n// Angular2 is so much better than this:\ndocument.body.innerHTML = '<ul>' +\n  codelab.getGuestsComing().map((guest:Guest) => `<li>${guest.name}</li>`).join('') +\n  '</ul>';\n","ng2ts/video/video-item.ts":"export interface VideoItem {\n  title: string,\n  src: string,\n  description?: string,\n  views?: number\n  likes?: number,\n  date?: string\n}\n","ng2ts/video/video.component.ts":"import {Component, Input} from '@angular/core';\nimport {VideoItem} from './video-item';\n/*d:thumbsComponentUse*/\nimport {Thumbs} from '../thumbs/thumbs.component';\n/*/d*//*d:videoComponentCreateSolved/trimTrailing*/\n@Component({\n  selector: 'my-video',\n  templateUrl: './video.html'\n})\n/*/d*/\nexport class VideoComponent {\n  /*d:videoComponentCreateSolved/trimBoth*/\n  @Input() video: VideoItem;\n  /*/d*//*d:thumbsComponentUseSolved/trimTrailing*/\n\n  onThumbs(thumbs: Thumbs) {\n    if (thumbs == Thumbs.UP) {\n      this.video.likes++;\n    }\n    if (thumbs == Thumbs.DOWN) {\n      this.video.likes--;\n    }\n  }\n  /*/d*/\n}\n","ng2ts/video/video.html":"/*d:initial:initial*/<!-- Write your code here -->\n/*/d*//*d:videoComponentCreateSolved/trimLeading*/\n<h2>{{video.title}}</h2>\n<img [src]='video.src'>\n/*/d*//*d:videoComponentCreateSolved:fuzzyPipeUseSolved/trimLeading*/\n<div>Date {{video.date}}</div>\n/*/d*//*d:fuzzyPipeUseSolved*/<div>Date {{video.date | fuzzy}}</div>\n/*/d*//*d:videoComponentCreateSolved:togglePanelComponentUse/trimLeading*/\n<div>Views {{video.views}}</div>\n<div>Likes {{video.likes}}</div>\n<div>Description {{video.description}}</div>\n/*/d*//*d:thumbsComponentUseSolved/trimBoth*/\n<my-thumbs (onThumbs)='onThumbs($event)'></my-thumbs>\n/*/d*//*d:togglePanelComponentUseSolved*/\n<my-toggle-panel>\n  <div class='description'>Description: {{video?.description}}</div>\n  <div class='extra'>\n    <div class='views'>Views: {{video?.views}}</div>\n    <div class='likes'>Likes: {{video?.likes}}</div>\n  </div>\n</my-toggle-panel>\n/*/d*/\n","ng2ts/video/video.service.ts":"import {Injectable} from '@angular/core';\nimport {Api} from '../api.service';\n/*d:diInjectServiceSolved/trimTrailing*/\n@Injectable()\n/*/d*//*d:initial*/\nexport class VideoService {\n  search(searchString: string) {\n    return Api.fetch(searchString)\n  }\n}\n/*/d*/\n","ng2ts/wrapper.component.ts":"import {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-wrapper',\n  // Just using template here to avoid extra files.\n  // Please don't do this at home.\n  template: `\n    <my-toggle-panel>\n    <div class='description'>Either show me</div>\n    <div class='extra'>Or show me</div>\n    </my-toggle-panel>\n    `\n})\nexport class WrapperComponent {\n\n}\n"}