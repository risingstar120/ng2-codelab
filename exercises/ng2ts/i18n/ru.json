{
    "Buy awesome speakers on our web site.": "Купите офигенские колонки на нашем сайте",
    "Check out our web site": "Зацените наш сайт!",
    "days": "дней",
    "years ago": "лет назад",
    "There is actually no simple way to test it, just make sure it looks nice :)": "Мы не придумали как это тестировать, убедитесь чтобы все выглядело норм",
    "Create a class called 'Codelab'": "Создайте класс и назовите его ",
    "Export the class": "Экспоритруйте класс",
    "Add a constructor": "Добавьте конструктор",
    "The codelab class doesn't have constuctor": "Не могу найти класс конструктор",
    "Make constructor take a parameter 'guests'": "Пусть конструктор возьмет параметр 'guests' ",
    "Codelab constructor should take one parameter called 'guests'": "Codelab constructor should take one parameter called 'guests'",
    "This parameter should be public": "This parameter should be public",
    "Create new method 'getGuestsComing'": "Create new method 'getGuestsComing'",
    "Modify getGuestsComing to filter the guests array and only return guests with the 'coming' property set to true. \n  (hint: please use Array.filter method, and NOT a for loop. Ask us for help if you don't know how to\n   (There's potential of getting into an infinite loop otherwise)": "Modify getGuestsComing to filter the guests array and only return guests with the 'coming' property set to true. \n  (hint: please use Array.filter method, and NOT a for loop. Ask us for help if you don't know how to\n   (There's potential of getting into an infinite loop otherwise)",
    "ContextComponent: Inject the ContextService into the constructor and store it as a property.": "ContextComponent: Inject the ContextService into the constructor and store it as a property.",
    "ContextComponent: Inject the parent component (VideoComponent) into the constructor and store it as a property.": "ContextComponent: Inject the parent component (VideoComponent) into the constructor and store it as a property.",
    "ContextComponent: Add an ngOnInit method to the component. (It's a special method angular will call when the component is created).": "ContextComponent: Add an ngOnInit method to the component. (It's a special method angular will call when the component is created).",
    "ContextComponent: In the onOnInit method Call 'getAdText' on the service, and pass it the video 'description' provided by the injected video component. Assign the result to the declared text property.": "ContextComponent: In the onOnInit method Call 'getAdText' on the service, and pass it the video 'description' provided by the injected video component. Assign the result to the declared text property.",
    "AppModule: Add the ContextComponent to the AppModule declarations (We did this for you).": "AppModule: Add the ContextComponent to the AppModule declarations (We did this for you).",
    "video.html: Actually display the ad (We actually also did it for you).": "video.html: Actually display the ad (We actually also did it for you).",
    "Create a class called AppComponent": "Create a class called AppComponent",
    "Export the created class": "Export the created class",
    "Add a Component decorator for the class": "Add a Component decorator for the class",
    "Add a selector to the component decorator": "Add a selector to the component decorator",
    "Add a template that contains: '<h1>Hello CatTube!</h1>'": "Add a template that contains: '<h1>Hello CatTube!</h1>'",
    "Create a class called 'AppModule'": "Create a class called 'AppModule'",
    "Add a NgModule decorator for the class": "Add a NgModule decorator for the class",
    "Add 'BrowseModule' to the NgModule decorator imports": "Add 'BrowseModule' to the NgModule decorator imports",
    "Add 'AppComponent' to the 'declarations' property of the decorator": "Add 'AppComponent' to the 'declarations' property of the decorator",
    "Add 'AppComponent' to the 'bootstrap' property of the decorator": "Add 'AppComponent' to the 'bootstrap' property of the decorator",
    "VideoService.ts: Add @Injectable() decorator to the classs": "VideoService.ts: Add @Injectable() decorator to the classs",
    "Appmodule.ts: Add VideoService to the NgModule providers property": "Appmodule.ts: Add VideoService to the NgModule providers property",
    "AppComponent.ts: Inject videoService in the component constructor": "AppComponent.ts: Inject videoService in the component constructor",
    "AppComponent.ts: When searching assign videoService.search results to the videos property of the class": "AppComponent.ts: When searching assign videoService.search results to the videos property of the class",
    "Create a class called FuzzyPipe": "Create a class called FuzzyPipe",
    "Export it": "Export it",
    "Add a @Pipe() decorator": "Add a @Pipe() decorator",
    "Set the name to fuzzy": "Set the name to fuzzy",
    "Make it return '2 days ago for '${formattedDate}'": "Make it return '2 days ago for '${formattedDate}'",
    "AppModule: Add the FuzzyPipe to the AppModule declarations": "AppModule: Add the FuzzyPipe to the AppModule declarations",
    "video.html: Use the pipe on the date.": "video.html: Use the pipe on the date.",
    "AppComponent.ts: Add a 'videos' property, set the value as empty array.": "AppComponent.ts: Add a 'videos' property, set the value as empty array.",
    "AppComponent.ts: Add a 'search' method on the component, that takes a 'searchString' parameter.": "AppComponent.ts: Add a 'search' method on the component, that takes a 'searchString' parameter.",
    "app.html: Add a message saying 'No videos' which is displayed only when the videos array is empty": "app.html: Add a message saying 'No videos' which is displayed only when the videos array is empty",
    "app.html: Iterate over the videos using '*NgFor', and display a title for each": "app.html: Iterate over the videos using '*NgFor', and display a title for each",
    "app.html: Also display a thumbnail": "app.html: Also display a thumbnail",
    "#Bonus AppComponent.ts: When the component is created, trigger a search for an empty string. ": "#Bonus AppComponent.ts: When the component is created, trigger a search for an empty string. ",
    "app.html: Add a <h1> header, display the 'title' property of the AppComponent inside": "app.html: Add a <h1> header, display the 'title' property of the AppComponent inside",
    "app.html: Add an <input> with a 'placeholder' set to 'video' (hint: 'placeholder' is just an attribute of an input tag) ": "app.html: Add an <input> with a 'placeholder' set to 'video' (hint: 'placeholder' is just an attribute of an input tag) ",
    "app.html: Add a <button> labeled 'search'": "app.html: Add a <button> labeled 'search'",
    "thumbs.html: Add a button with a 'thumbs-up' CSS class.": "thumbs.html: Add a button with a 'thumbs-up' CSS class.",
    "thumbs.html: Add a button with a 'thumbs-down' CSS class.": "thumbs.html: Add a button with a 'thumbs-down' CSS class.",
    "ThumbsComponent.ts: Set the selector to be 'my-thumbs'.": "ThumbsComponent.ts: Set the selector to be 'my-thumbs'.",
    "ThumbsComponent.ts: Set the templateUrl to load appropriate html file.": "ThumbsComponent.ts: Set the templateUrl to load appropriate html file.",
    "ThumbsComponent.ts: Add an 'onThumbs' property and set the value to a new EventEmitter. Decorate with @Output()": "ThumbsComponent.ts: Add an 'onThumbs' property and set the value to a new EventEmitter. Decorate with @Output()",
    "thumbs.html: Make the 'thumbs-up' button emit the onThumbs event with the correct thumbs ENUM value.": "thumbs.html: Make the 'thumbs-up' button emit the onThumbs event with the correct thumbs ENUM value.",
    "thumbs.html: Make the 'thumbs-down' button emit the onThumbs event with the correct thumbs ENUM value.": "thumbs.html: Make the 'thumbs-down' button emit the onThumbs event with the correct thumbs ENUM value.",
    "AppModule: Add the ThumbsComponent to the AppModule 'declarations' property": "AppModule: Add the ThumbsComponent to the AppModule 'declarations' property",
    "video.html: Use the thumbs component in the template": "video.html: Use the thumbs component in the template",
    "VideoComponent: Listen to the thumbs component onThumbs event, and update the amount of likes accordingly": "VideoComponent: Listen to the thumbs component onThumbs event, and update the amount of likes accordingly",
    "TogglePanelComponent.ts: We added the template and the selector for you, enjoy!": "TogglePanelComponent.ts: We added the template and the selector for you, enjoy!",
    "TogglePanelComponent.ts: Add a boolean property to the component. The property can have any name, and must have a default value.": "TogglePanelComponent.ts: Add a boolean property to the component. The property can have any name, and must have a default value.",
    "togglePanel.html: Use content projection to only display the content with the selector .description by default.": "togglePanel.html: Use content projection to only display the content with the selector .description by default.",
    "togglePanel.html: Add a button to show extra information": "togglePanel.html: Add a button to show extra information",
    "togglePanel.html: When the button is pressed, switch the flag and only display the content with the '.extra' selector.": "togglePanel.html: When the button is pressed, switch the flag and only display the content with the '.extra' selector.",
    "togglePanel.html: Add a button to come back to the description": "togglePanel.html: Add a button to come back to the description",
    "AppModule: Add the TogglePanelComponent to the AppModule declarations.": "AppModule: Add the TogglePanelComponent to the AppModule declarations.",
    "video.html: Use the TogglePanel component in the template": "video.html: Use the TogglePanel component in the template",
    "video.html: Add .description as TogglePanel's content": "video.html: Add .description as TogglePanel's content",
    "video.html: Add .extra as TogglePanel's content": "video.html: Add .extra as TogglePanel's content",
    "VideoComponent.ts: Set the selector property to 'my-video'.": "VideoComponent.ts: Set the selector property to 'my-video'.",
    "VideoComponent.ts: Set the templateUrl to load the appropriate html file": "VideoComponent.ts: Set the templateUrl to load the appropriate html file",
    "VideoComponent.ts: Add a video property and decorate it with @Input()": "VideoComponent.ts: Add a video property and decorate it with @Input()",
    "Video.html: Display the video title": "Video.html: Display the video title",
    "Video.html: Display the video thumbnail": "Video.html: Display the video thumbnail",
    "Video.html: Display the video description": "Video.html: Display the video description",
    "Video.html: Display the video date": "Video.html: Display the video date",
    "Video.html: Display the number video likes": "Video.html: Display the number video likes",
    "Video.html: Display the number of video views": "Video.html: Display the number of video views",
    "AppModule: Add the VideoComponent to the AppModule 'declarations'.": "AppModule: Add the VideoComponent to the AppModule 'declarations'.",
    "app.html: Use video component (get rid of the old title/thumbnail)": "app.html: Use video component (get rid of the old title/thumbnail)",
    "app.html: Use the data binding to pass the video object to the component (don't forget the square brackets)": "app.html: Use the data binding to pass the video object to the component (don't forget the square brackets)",
    "Sir Isaac Newton": "Sir Isaac Newton",
    "Marie Curie": "Marie Curie",
    "Albert Einstein": "Albert Einstein",
    "Charles Darwin": "Charles Darwin",
    "Intro": "Интро!!",
    "\n          <h1>Welcome to the Angular and TypeScript CodeLab!</h1>\n          <p>In this codelab we're going to learn the basics of TypeScript and Angular.</p>\n          <p>We're using Angular version 2.1.0</p>\n          <p>The slides for the codelab are available using\n          <a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">here</a>.</p>                 \n        ": "\n          <h1>Welcome to the Angular and TypeScript CodeLab!</h1>\n          <p>In this codelab we're going to learn the basics of TypeScript and Angular.</p>\n          <p>We're using Angular version 2.1.0</p>\n          <p>The slides for the codelab are available using\n          <a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">here</a>.</p>                 \n        ",
    "Typescript": "Typescript",
    "\n          <p>We created a TypeScript file for you, now let's add our first TS class\n           called Codelab.</p>\n          \n          <p>It will take a list of guests, and will have a 'getGuestsComing' method, which will only return people who're coming.</p> \n          <p>As you can see in the 'Main.ts' file we have 4 people signed up, but Charles Darwin had a last minute change of plans, \n          so only 3 people should be returned.</p>            \n        ": "\n          <p>We created a TypeScript file for you, now let's add our first TS class\n           called Codelab.</p>\n          \n          <p>It will take a list of guests, and will have a 'getGuestsComing' method, which will only return people who're coming.</p> \n          <p>As you can see in the 'Main.ts' file we have 4 people signed up, but Charles Darwin had a last minute change of plans, \n          so only 3 people should be returned.</p>            \n        ",
    "Bootstrapping your app": "Bootstrapping your app",
    "\n          <h1>Let's build our first Angular app!</h1>\n          <p>This is how it will look:</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <h1>Hello CatTube!</h1>\n            </div>\n          </div>\n          <p>3 simple steps: </p>\n          <ol>\n            <li>Create a Component</li>\n            <li>Create a NgModule</li>\n            <li>Bootstrap the NgModule</li>\n          </ol>\n        ": "\n          <h1>Let's build our first Angular app!</h1>\n          <p>This is how it will look:</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <h1>Hello CatTube!</h1>\n            </div>\n          </div>\n          <p>3 simple steps: </p>\n          <ol>\n            <li>Create a Component</li>\n            <li>Create a NgModule</li>\n            <li>Bootstrap the NgModule</li>\n          </ol>\n        ",
    "Create a component": "Create a component",
    "\n            <p>Let's create our first component!</p>": "\n            <p>Let's create our first component!</p>",
    "Create a NgModule": "Create a NgModule",
    "Now we got the component, we need to pass it to a NgModule.": "Now we got the component, we need to pass it to a NgModule.",
    "Bootstrap the module": "Bootstrap the module",
    "\n          <p>Now we got both NgModule and component ready, let's bootstrap the app!</p>\n          <p>There's no  simple way to test it,  make sure your app displays: 'Hello CatTube!'</p>": "\n          <p>Now we got both NgModule and component ready, let's bootstrap the app!</p>\n          <p>There's no  simple way to test it,  make sure your app displays: 'Hello CatTube!'</p>",
    "Templates": "Templates",
    "\n          <h1>Let's explore Angular templates!</h1>\n          <p>As a result we'll see our cats displayed.</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img src=\"/assets/images/cat-2.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n        ": "\n          <h1>Let's explore Angular templates!</h1>\n          <p>As a result we'll see our cats displayed.</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img src=\"/assets/images/cat-2.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n        ",
    "Set up the page": "Set up the page",
    "Let's setup a header, a search box, and a search button in the app component!": "Let's setup a header, a search box, and a search button in the app component!",
    "Add some action": "Add some action",
    "Let's do two things here:\n              <ul>\n              <li>Add a search method to the AppComponent</li>\n              <li>Display a message when there are no videos.</li>": "Let's do two things here:\n              <ul>\n              <li>Add a search method to the AppComponent</li>\n              <li>Display a message when there are no videos.</li>",
    "Display all videos": "Display all videos",
    "Finally let's iterate over the videos.": "Finally let's iterate over the videos.",
    "Dependency Injection": "Dependency Injection",
    "\n          <h1>Let's inject a service.</h1>\n          <p>Using a service is way better than hardcoded data. As a result we get even more cats.</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <input placeholder=\"video\" type=\"text\">\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img  src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>More kitten</h2>\n                  <img  src=\"/assets/images/cat-2.jpg\">\n                </div><div>\n                  <h2>Another kitten</h2>\n                  <img  src=\"/assets/images/cat-3.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-4.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-5.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-6.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n\n        ": "\n          <h1>Let's inject a service.</h1>\n          <p>Using a service is way better than hardcoded data. As a result we get even more cats.</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <input placeholder=\"video\" type=\"text\">\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img  src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>More kitten</h2>\n                  <img  src=\"/assets/images/cat-2.jpg\">\n                </div><div>\n                  <h2>Another kitten</h2>\n                  <img  src=\"/assets/images/cat-3.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-4.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-5.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-6.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n\n        ",
    "Service injection": "Service injection",
    "\n          Let's fetch the videos using a service, instead of having them hardcoded.\n        ": "\n          Let's fetch the videos using a service, instead of having them hardcoded.\n        ",
    "Component Tree": "Component Tree",
    "\n          <h1>Let's create a Video component!</h1>\n          <p>Create a separate component with the video information.</p>\n          <p>Add description, amount of views and likes. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                </div>\n              </div>\n            </div>\n        ": "\n          <h1>Let's create a Video component!</h1>\n          <p>Create a separate component with the video information.</p>\n          <p>Add description, amount of views and likes. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                </div>\n              </div>\n            </div>\n        ",
    "Create VideoComponent": "Create VideoComponent",
    "Create a video component.": "Create a video component.",
    "Use VideoComponent": "Use VideoComponent",
    "Use the VideoComponent in the app.": "Use the VideoComponent in the app.",
    "Custom events": "Custom events",
    "\n          <h1>Let's use custom events!</h1>\n          <p>Add a ThumbsComponent which will emit an 'onThumbs' event.  </p>\n          <p>In the video component listen to the event and change the amount of likes accordingly.</p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>\n        ": "\n          <h1>Let's use custom events!</h1>\n          <p>Add a ThumbsComponent which will emit an 'onThumbs' event.  </p>\n          <p>In the video component listen to the event and change the amount of likes accordingly.</p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>\n        ",
    "Create ThumbsComponent": "Create ThumbsComponent",
    "Create ThumbsComponent.": "Create ThumbsComponent.",
    "Use ThumbsComponent": "Use ThumbsComponent",
    "Use the 'ThumbsComponent' in the app.": "Use the 'ThumbsComponent' in the app.",
    "Content projection": "Content projection",
    "\n          <h1>Let's project some content!</h1>\n          <p>In this milestone we'll create a component called 'TogglePanel'</p>\n          <p>It will actually take 2 divs, but only display one at a time. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                  <div>This is the description. Once you click 'show meta' button it will be gone.  (please don't try clicking it here, I'm just a screenshot)</div>\n                  <div>[Show meta]</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>\n\n            <p>So when you click the 'Show meta button', description is gone, likes and views are displayed instead.</p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Likes: 1000</div>\n                  <div>Views: 1000000</div>\n                  <div>[Show description]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>\n        ": "\n          <h1>Let's project some content!</h1>\n          <p>In this milestone we'll create a component called 'TogglePanel'</p>\n          <p>It will actually take 2 divs, but only display one at a time. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                  <div>This is the description. Once you click 'show meta' button it will be gone.  (please don't try clicking it here, I'm just a screenshot)</div>\n                  <div>[Show meta]</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>\n\n            <p>So when you click the 'Show meta button', description is gone, likes and views are displayed instead.</p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Likes: 1000</div>\n                  <div>Views: 1000000</div>\n                  <div>[Show description]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>\n        ",
    "Add TogglePanelComponent": "Add TogglePanelComponent",
    "Let's create a component which will use content projection to toggle between description and meta information. ": "Let's create a component which will use content projection to toggle between description and meta information. ",
    "Use TogglePanelComponent": "Use TogglePanelComponent",
    "Now let's use the component.": "Now let's use the component.",
    "Parent-container": "Parent-container",
    "\n          <h1>Let's inject parent component!</h1>\n          <p>In this milestone we'll create create a ContextAdComponent. </p>\n          <p>This component will not use inputs. Instead it will require parent (Video) component and directly look at it's properties. </p>\n          <p>It will display different text depending of if there's a word 'music' in the description. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten dancing</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Decription: music</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Turn up your speakers</div>\n                </div>\n                <div>\n                  <h2>Cute kitten sleeping</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Decription: sleeping</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Check out our web site.</div>\n                </div>\n              </div>\n            </div>\n\n             <p>Note, we are actually calling it ContextComponent, because when it was called ContextAdComponent, adblock blocked it, and I spent 2 hours debugging. </p>\n\n\n        ": "\n          <h1>Let's inject parent component!</h1>\n          <p>In this milestone we'll create create a ContextAdComponent. </p>\n          <p>This component will not use inputs. Instead it will require parent (Video) component and directly look at it's properties. </p>\n          <p>It will display different text depending of if there's a word 'music' in the description. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten dancing</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Decription: music</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Turn up your speakers</div>\n                </div>\n                <div>\n                  <h2>Cute kitten sleeping</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Decription: sleeping</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Check out our web site.</div>\n                </div>\n              </div>\n            </div>\n\n             <p>Note, we are actually calling it ContextComponent, because when it was called ContextAdComponent, adblock blocked it, and I spent 2 hours debugging. </p>\n\n\n        ",
    "Inject parent component": "Inject parent component",
    "<p>Create a Context(Ad)Component</p>\n            <p>which will inject it's parent component, see what thedescription, and display the value accordingly.</p>\n            <p>Note: We had to get rid of the 'Ad' part of the component, because AdBlock blocked the template.</p>": "<p>Create a Context(Ad)Component</p>\n            <p>which will inject it's parent component, see what thedescription, and display the value accordingly.</p>\n            <p>Note: We had to get rid of the 'Ad' part of the component, because AdBlock blocked the template.</p>",
    "Pipes": "Pipes",
    "Create a pipe": "Create a pipe",
    "Create a fuzzy pipe, which takes a date in YYYY-MM-DD format, and returns how many days ago this was.": "Create a fuzzy pipe, which takes a date in YYYY-MM-DD format, and returns how many days ago this was.",
    "Use the pipe": "Use the pipe",
    "Now include the app in the module and use in the app.": "Now include the app in the module and use in the app.",
    "Survey": "Опрос",
    "All done!": "Вот и все!",
    "\n        Please fill out <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">The survey</a>\n        (which is different from the feedback form)\n        ": "Пожалуйста заполните вот эту форму <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">эту форму</a>\n        (which is different from the feedback form)"
}