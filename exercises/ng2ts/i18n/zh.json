{
    "Buy awesome speakers on our web site.": "在我们的网站上购买超酷的扬声器。",
    "Check out our web site": "查看我们的网站",
    "days": "天",
    "years ago": "数年前",
    "There is actually no simple way to test it, just make sure it looks nice :)": "实际上并没有简单的方法能对它进行测试，所以只要保证它看起来很好就行了 :)",
    "Create a class called 'Codelab'": "创建一个名为 'Codelab' 的类",
    "Export the class": "导出类",
    "Add a constructor": "添加一个构造器",
    "Make constructor take a parameter 'guests'": "让构造器带有一个名为'guests'的参数",
    "Create new method 'getGuestsComing'": "创建一个新的方法，名为 'getGuestsComing' ",
    "Modify getGuestsComing to filter the guests array and only return guests with the 'coming' property set to true. \n  (hint: please use Array.filter method, and NOT a for loop. Ask us for help if you don't know how to\n   (There's potential of getting into an infinite loop otherwise)": "修改getGuestsComing方法，对guests数组进行过滤，只返回那些'coming'属性为true的值。\n（小提示：请使用Array.filter方法，而不要使用for循环。如果你不知道怎么做请向我们寻求帮助。否则，这里可能会造成死循环。）",
    "ContextComponent: Inject the ContextService into the constructor and store it as a property.": "ContextComponent: 把ContextService注射到构造器中，并把它作为类的属性存储起来。",
    "ContextComponent: Inject the parent component (VideoComponent) into the constructor and store it as a property.": "ContextComponent:把父组件(VideoComponent) 注射到构造器中，并把它作为类的属性存储起来。",
    "ContextComponent: Add an ngOnInit method to the component. (It's a special method angular will call when the component is created).": "ContextComponent:为组件添加一个ngOnInit方法.(这是Angular在组件创建时提供的一个特定的方法)",
    "ContextComponent: In the onOnInit method Call 'getAdText' on the service, and pass it the video 'description' provided by the injected video component. Assign the result to the declared text property.": "ContextComponent：在onOnInit方法中调用service上的 'getAdText'方法，把视频的'description'属性作为参数传递进去，这个属性在所注射的video组件上。将返回的结果集赋值给所声明的text属性. ",
    "AppModule: Add the ContextComponent to the AppModule declarations (We did this for you).": "AppModule：把ContextComponent组件添加到 AppModule中的declarations里面 (我们已经帮你实现了这一功能)。 ",
    "video.html: Actually display the ad (We actually also did it for you).": "video.html: 实际显示广告的页面（实际上我们也已经帮你实现好了）。",
    "Create a class called AppComponent": "创建一个名为AppComponent的类",
    "Export the created class": "导出所创建的类",
    "Add a Component decorator for the class": "为类添加@Component装饰器",
    "Add a selector to the component decorator": "在组件装饰器里面添加一个selector属性",
    "Add a template that contains: '<h1>Hello CatTube!</h1>'": "添加一个template属性，包含如下内容: '<h1>Hello CatTube!</h1>'",
    "Create a class called 'AppModule'": "创建一个名为 'AppModule' 的类",
    "Add a NgModule decorator for the class": "在该类上添加@NgModule装饰器",
    "Add 'BrowseModule' to the NgModule decorator imports": "在@NgModule装饰器中的imports中加上'BrowseModule' ",
    "Add 'AppComponent' to the 'declarations' property of the decorator": "在装饰器的'declarations'属性中加上 'AppComponent' ",
    "Add 'AppComponent' to the 'bootstrap' property of the decorator": "在装饰器的 'bootstrap'属性中加上'AppComponent' ",
    "VideoService.ts: Add @Injectable() decorator to the classs": "VideoService.ts：为该类加上 @Injectable()装饰器",
    "Appmodule.ts: Add VideoService to the NgModule providers property": "Appmodule.ts: 把VideoService添加到NgModule的providers属性中去",
    "AppComponent.ts: Inject videoService in the component constructor": "AppComponent.ts: 在组件的构造方法中注入videoService",
    "AppComponent.ts: When searching assign videoService.search results to the videos property of the class": "AppComponent.ts：在实现搜索功能的时候，把videoService.search返回的结果赋值给该类的videos属性",
    "Create a class called FuzzyPipe": "创建一个名为 FuzzyPipe 的类",
    "Export it": "导出它",
    "Add a @Pipe() decorator": "添加 一个@Pipe()装饰器",
    "Set the name to fuzzy": "把名称设置为fuzzy",
    "Make it return '2 days ago for '${formattedDate}'": "让它返回'2 days ago for '${formattedDate}' ",
    "AppModule: Add the FuzzyPipe to the AppModule declarations": "AppModule: 把FuzzyPipe添加到AppModule的declarations中",
    "video.html: Use the pipe on the date.": "video.html: 在 date 上使用管道。",
    "AppComponent.ts: Add a 'videos' property, set the value as empty array.": "AppComponent.ts: 添加一个'videos'属性并赋值为空数组。",
    "AppComponent.ts: Add a 'search' method on the component, that takes a 'searchString' parameter.": "AppComponent.ts：为组件添加一个'search'方法，可以接受一个名为searchString的参数。",
    "app.html: Add a message saying 'No videos' which is displayed only when the videos array is empty": "app.html: 添加一条内容为'No videos'的提示信息，当videos数组为空时显示这条信息",
    "app.html: Iterate over the videos using '*NgFor', and display a title for each": "app.html：使用 '*NgFor' 遍历videos数组并显示每个对象的title属性",
    "app.html: Also display a thumbnail": "app.html：显示缩略图",
    "#Bonus AppComponent.ts: When the component is created, trigger a search for an empty string. ": "#Bonus AppComponent.ts：在组件实例被创建出来之后，立即触发一次搜索动作，参数为空字符串。",
    "app.html: Add a <h1> header, display the 'title' property of the AppComponent inside": "app.html: 添加一个<h1>标签，在其中显示AppComponent组件的'title'属性",
    "app.html: Add an <input> with a 'placeholder' set to 'video' (hint: 'placeholder' is just an attribute of an input tag) ": "app.html：添加一个<input>标签，把它的'placeholder'属性设置为'video' (提示: 'placeholder' 只是input标签的一个属性) ",
    "app.html: Add a <button> labeled 'search'": "app.html：添加一个<button>，标签为'search'",
    "thumbs.html: Add a button with a 'thumbs-up' CSS class.": "thumbs.html：添加一个按钮，给它应用'thumbs-up' CSS样式类。",
    "thumbs.html: Add a button with a 'thumbs-down' CSS class.": "thumbs.html：添加一个按钮，给它应用'thumbs-down' CSS样式类。",
    "ThumbsComponent.ts: Set the selector to be 'my-thumbs'.": "ThumbsComponent.ts: 把（@Component装饰器的）selector属性设置为'my-thumbs'",
    "ThumbsComponent.ts: Set the templateUrl to load appropriate html file.": "ThumbsComponent.ts：设置（@Component装饰器的）templateUrl属性，让它加载适当的html文件。",
    "ThumbsComponent.ts: Add an 'onThumbs' property and set the value to a new EventEmitter. Decorate with @Output()": "ThumbsComponent.ts：添加一个 'onThumbs' 属性，并把它的值设置为一个新的EventEmitter对象。同时使用@Output()进行装饰。",
    "thumbs.html: Make the 'thumbs-up' button emit the onThumbs event with the correct thumbs ENUM value.": "thumbs.html：使用正确的ENUM（枚举）值，让 'thumbs-up' 按钮触发onThumbs事件。",
    "thumbs.html: Make the 'thumbs-down' button emit the onThumbs event with the correct thumbs ENUM value.": "thumbs.html：使用正确的ENUM（枚举）值，让 'thumbs-down' 按钮触发onThumbs事件。",
    "AppModule: Add the ThumbsComponent to the AppModule 'declarations' property": "AppModule：把ThumbsComponent组件添加到AppModule的'declarations'属性中",
    "video.html: Use the thumbs component in the template": "video.html：在模板中使用thumbs组件",
    "VideoComponent: Listen to the thumbs component onThumbs event, and update the amount of likes accordingly": "VideoComponent：监听thumbs组件的onThumbs事件，更新点赞量",
    "TogglePanelComponent.ts: We added the template and the selector for you, enjoy!": "TogglePanelComponent.ts：我们已经为你添加好了模板和选择器，祝你使用愉快！",
    "TogglePanelComponent.ts: Add a boolean property to the component. The property can have any name, and must have a default value.": "TogglePanelComponent.ts：给组件添加一个布尔型的属性。名字随意，但是必须带有默认值。",
    "togglePanel.html: Use content projection to only display the content with the selector .description by default.": "togglePanel.html：利用内容投影显示内容，默认使用.description选择器。",
    "togglePanel.html: Add a button to show extra information": "togglePanel.html: 添加一个按钮来显示额外的信息",
    "togglePanel.html: When the button is pressed, switch the flag and only display the content with the '.extra' selector.": "togglePanel.html：当按钮被按下时，切换标志位同时只显示带有 '.extra'选择器的内容。",
    "togglePanel.html: Add a button to come back to the description": "togglePanel.html：添加一个按钮，点击返回描述。",
    "AppModule: Add the TogglePanelComponent to the AppModule declarations.": "AppModule：把TogglePanelComponent添加到AppModule的declarations属性中。",
    "video.html: Use the TogglePanel component in the template": "video.html：在模板中使用TogglePanel组件",
    "video.html: Add .description as TogglePanel's content": "video.html：把.description属性作为内容添加到TogglePanel中。",
    "video.html: Add .extra as TogglePanel's content": "video.html：把.extra属性作为内容添加到TogglePanel中。",
    "VideoComponent.ts: Set the selector property to 'my-video'.": "VideoComponent.ts：把selector属性设置为'my-video'。",
    "VideoComponent.ts: Set the templateUrl to load the appropriate html file": "VideoComponent.ts：设置templateUrl属性，加载合适的html文件",
    "VideoComponent.ts: Add a video property and decorate it with @Input()": "VideoComponent.ts：新增一个video属性并用@Input()进行装饰",
    "Video.html: Display the video title": "Video.html：显示video对象的title属性",
    "Video.html: Display the video thumbnail": "Video.html：显示video对象的缩略图(img) 属性",
    "Video.html: Display the video description": "Video.html：显示video对象的description属性",
    "Video.html: Display the video date": "Video.html：显示video对象的date属性",
    "Video.html: Display the number video likes": "Video.html：显示video对象的点赞量likes",
    "Video.html: Display the number of video views": "Video.html：显示video对象的浏览量views",
    "AppModule: Add the VideoComponent to the AppModule 'declarations'.": "AppModule：把VideoComponent添加到AppModule的'declarations'属性中",
    "app.html: Use video component (get rid of the old title/thumbnail)": "app.html: 抛弃原有title/thumbnail的代码，使用新的video组件来代替",
    "app.html: Use the data binding to pass the video object to the component (don't forget the square brackets)": "app.html：使用数据绑定机制把video对象传递给组件（记住要使用方括号）",
    "Sir Isaac Newton": "Sir Isaac Newton（艾萨克·牛顿爵士）",
    "Marie Curie": "Marie Curie（ 玛丽·居里）",
    "Albert Einstein": "Albert Einstein（阿尔伯特·爱因斯坦）",
    "Charles Darwin": "Charles Darwin（查尔斯·达尔文）",
    "Intro": "概述",
    "Bootstrapping your app": "启动你的应用",
    "Create a component": "创建组件",
    "Create a NgModule": "创建NgModule",
    "Now we got the component, we need to pass it to a NgModule.": "当组件创建完成后，我们需要把它传递给NgModule。",
    "Bootstrap the module": "启动模块",
    "Templates": "模板",
    "Set up the page": "创建页面",
    "Add some action": "添加一些动作",
    "Display all videos": "展示所有videos",
    "Finally let's iterate over the videos.": "最后，我们来遍历所有videos",
    "Dependency Injection": "依赖注入",
    "Service injection": "服务注入",
    "Component Tree": "组件树",
    "Create VideoComponent": "创建VideoComponent",
    "Create a video component.": "创建一个video组件",
    "Use VideoComponent": "使用VideComponent",
    "Use the VideoComponent in the app.": "在应用中使用VideoComponent组件",
    "Custom events": "自定义事件",
    "Create ThumbsComponent": "创建ThumbsComponent",
    "Create ThumbsComponent.": "创建ThumbsComponent",
    "Use ThumbsComponent": "使用ThumbsComponent",
    "Use the 'ThumbsComponent' in the app.": "在应用中使用 'ThumbsComponent' ",
    "Content projection": "内容投影",
    "Add TogglePanelComponent": "添加TogglePanelComponent",
    "Let's create a component which will use content projection to toggle between description and meta information. ": "我们来创建一个组件，利用内容投影机制在描述和元信息之间进行切换显示。",
    "Use TogglePanelComponent": "使用TogglePanelComponent",
    "Now let's use the component.": "现在我们来使用该组件",
    "Create a pipe": "创建管道",
    "Create a fuzzy pipe, which takes a date in YYYY-MM-DD format, and returns how many days ago this was.": "创建一个模糊管道，它可以接受YYYY-MM-DD这种格式的日期，然后返回这个日期是多少天之前。",
    "Use the pipe": "使用管道",
    "Now include the app in the module and use in the app.": "现在，在模块中包含这个应用并使用这个应用。",
    "Survey": "反馈",
    "All done!": "结束！",
    "TypeScript": "TypeScript",
    "Codelab doesn't have a constuctor": "Codelab类没有构造器",
    "Codelab's constructor should take a parameter": "Codelab的构造器应该带有一个参数",
    "Codelab constructor's parameter should be called 'guests'": "Codelab构造器的参数名称应该叫做'guests'",
    "The type for guests should be Array of Guest (hint: Guest[] is one way of doing it.)": "guests的类型应该是Array，泛型是Guest（小提示：其中一种实现方式是使用Guest[]）",
    "Make the parameter public (note that now you can access it anywhere in the class using this.guests)": "把参数改成public型的（注意，改完之后你就可以在类中的任何地方使用this.guests来访问它了）",
    "'guests' constructor parameter should have 'public' visibility.": "构造器中的参数'guests'应该是'public'型的",
    "Angular/TypeScript CodeLab!": "Angular/TypeScript CodeLab! \n",
    "In this codelab we're going to learn the basics of TypeScript and Angular.": "在本codelab（代码实验室）中，我们将会学习TypeScript和Angular的基本用法。",
    "This is a beta version of the codelab with limited access, please don't share it publically (yet).": "此项目是codelab的beta版本，它是访问受限的，请不要在公共场合分享（还没有准备好）。",
    "This codelab is very new and only covers the basics of Angular. Please leave your feedback (in the end) and come back for more advanced exercises later.": "此codelab是一个全新的项目，它只覆盖了Angular最基本的用法。请留下你的宝贵意见（反馈按钮在底部）并在以后返回来查看更多高级的练习。",
    "We're using Angular version 2.3.0": "我们正在使用的是Angular 2.3.0",
    "The slides for the codelab are available using\n          <a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">here</a>.": "此codelab对应的slides请点<a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">这里</a>",
    "We created a TypeScript file for you, now let's add our first TS class\n           called Codelab.": "我们已经为你创建好了一个TypeScript文件，现在我们来添加第一个TS类，名为Codelab。",
    "It will take a list of guests, and will have a 'getGuestsComing' method, which will only return people who're coming.": "它会带有一个guests列表，同时带有一个 'getGuestsComing' 方法，这个方法只会把会来的客人返回出去。",
    "As you can see in the 'Main.ts' file we have 4 people signed up, but Charles Darwin had a last minute change of plans,\n          so only 3 people should be returned.": "如你所见，在 'Main.ts' 文件中，有4个人已经报名，但是Charles Darwin（查尔斯·达尔文）在最后一刻改了主意，所以这里应该只返回3个人。",
    "Let's build our first Angular app!": "我们来构建第一个Angular应用吧！",
    "This is how it will look:": "以下是它的样子：",
    "3 simple steps:": "3个简单的步骤",
    "Create a Component": "创建一个组件",
    "Bootstrap the NgModule": "启动NgModule",
    "Let's create our first component!": "我们来创建第一个组件！",
    "Now we got both NgModule and component ready, let's bootstrap the app!": "现在，我们已经准备好了NgModule和组件，我们来启动应用吧！",
    "There's no  simple way to test it,  make sure your app displays: 'Hello CatTube!'": "没有简单的方法可以测试它，请确保你的应用显示了：'Hello CatTube!' ",
    "Add a search method to the AppComponent": "在AppComponent 中添加一个search方法",
    "Display a message when there are no videos.": "当没有视频的时候显示一条消息",
    "Pipes (bonus)": "Pipes (bonus) 管道（福利）",
    "This is it for now!": "到此为止全部完成了！",
    "This codelab is really new. We're working on adding more advanced and fun exercises. ": "此codelab是一个全新的项目。我们正在努力增加更多高级有趣的练习。",
    "Meanwhile please fill out <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">The survey</a>. This would help us to improve!": "请填写 <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">反馈</a>。这样可以帮助我们不断改进！",
    "This codelab is written in Angular! <a href = \"https://github.com/kirjs/ng2-codelab\">Check out the code at this git repo</a>": "此codelab是使用Angular编写的！<a href = \"https://github.com/kirjs/ng2-codelab\">请检出此git repo</a> ",
    "If you want to learn more about angular check out <a href = \"https://angular.io/\">angular.io</a>": "如果你想学习更多关于Angular的内容请查阅<a href = \"https://angular.io/\">angular.io</a> ",
    "Exploring Angular templates!": "探索Angular模板！",
    "As a result we'll see our cats displayed.": "最后我们会看到我们的cats显示出来了。",
    "CatTube": "CatTube ",
    "Search!": "搜索！",
    "Cute kitten": "可爱的小猫",
    "Kitten on the tree": "小猫在树上",
    "Serouis cat": "严肃的猫",
    "Setup a header, a search box, and a search button in the app component!": "在app组件中添加一个题头、一个搜索框，以及一个搜索按钮！",
    "Let's inject a service.": "我们来注入一个服务。",
    "Using a service is way better than hardcoded data. As a result we get even more cats.": "使用service比硬编码数据更好。结果是，我们获得了更多的猫。",
    "More kitten": "更多小猫",
    "Another kitten": "另一只小猫",
    "Fetch the videos using a service, instead of having them hardcoded.": "使用服务来获取videos，而不是硬编码。",
    "Create a Video component!": "创建一个Video组件！",
    "Create a separate component with the video information.": "创建一个独立的组件用来显示video信息。",
    "Add description, amount of views and likes.": "添加描述、阅读数和点赞数。",
    "Date 2016-11-25": "日期 2016-11-25",
    "Views 100": "阅读100",
    "Likes 20": "点赞20",
    "Description todo": "待办事项描述",
    "Let's use custom events!": "我们来使用自定义事件！",
    "Add a ThumbsComponent which will emit an 'onThumbs' event.": "添加一个ThumbsComponent ，它会触发'onThumbs'事件。",
    "In the video component listen to the event and change the amount of likes accordingly.": "在video组件中监听事件并修改对应的点赞数。",
    "Thumbs Up": "Thumbs Up（顶图标）",
    "Thumbs Down": "Thumbs Down（踩图标）",
    "Let's project some content!": "我们来投射一些内容！",
    "In this milestone we'll create a component called 'TogglePanel'": "在这个里程碑中我们将会创建一个名为'TogglePanel'的组件",
    "It will actually take 2 divs, but only display one at a time.": "它实际上含有2个div，但是每次只会显示其中一个。",
    "This is the description. Once you click 'show meta' button it will be gone.  (please don't try clicking it here, I'm just a screenshot)": "这是详情信息。一旦你点击了'show meta'按钮它就会消失。（这里请不要尝试点击它，我只是一个屏幕截图而已）",
    "Show meta": "显示元数据",
    "So when you click the 'Show meta button', description is gone, likes and views are displayed instead.": "当你点击'Show meta'按钮的时候，详情信息会消失，点赞数、阅读数会显示出来。",
    "Show description": "显示详情"
}