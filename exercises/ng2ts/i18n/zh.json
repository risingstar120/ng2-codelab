{
    "Buy awesome speakers on our web site.": "在我们的网站上购买超酷的扬声器。",
    "Check out our web site": "查看我们的网站",
    "days": "天",
    "years ago": "数年前",
    "There is actually no simple way to test it, just make sure it looks nice :)": "实际上并没有简单的方法能对它进行测试，所以只要保证它看起来很好就行了 :)",
    "Create a class called 'Codelab'": "创建一个名为 'Codelab' 的类",
    "Export the class": "导出类",
    "Add a constructor": "添加一个构造器",
    "The codelab class doesn't have constuctor": "Codelab类没有构造器",
    "Make constructor take a parameter 'guests'": "让构造器带有一个名为'guests'的参数",
    "Codelab constructor should take one parameter called 'guests'": "Codelab类的构造器应该带有一个名为'guests'的参数",
    "This parameter should be public": "此参数应该是public型的",
    "Create new method 'getGuestsComing'": "创建一个新的方法，名为 'getGuestsComing' ",
    "Modify getGuestsComing to filter the guests array and only return guests with the 'coming' property set to true. \n  (hint: please use Array.filter method, and NOT a for loop. Ask us for help if you don't know how to\n   (There's potential of getting into an infinite loop otherwise)": "修改getGuestsComing方法，对guests数组进行过滤，只返回那些'coming'属性为true的值。\n（小提示：请使用Array.filter方法，而不要使用for循环。如果你不知道怎么做请向我们寻求帮助。否则，这里可能会造成死循环。）",
    "ContextComponent: Inject the ContextService into the constructor and store it as a property.": "ContextComponent: 把ContextService注射到构造器中，并把它作为类的属性存储起来。",
    "ContextComponent: Inject the parent component (VideoComponent) into the constructor and store it as a property.": "ContextComponent:把父组件(VideoComponent) 注射到构造器中，并把它作为类的属性存储起来。",
    "ContextComponent: Add an ngOnInit method to the component. (It's a special method angular will call when the component is created).": "ContextComponent:为组件添加一个ngOnInit方法.(这是Angular在组件创建时提供的一个特定的方法)",
    "ContextComponent: In the onOnInit method Call 'getAdText' on the service, and pass it the video 'description' provided by the injected video component. Assign the result to the declared text property.": "ContextComponent: 在onOnInit方法中调用服务的 'getAdText'方法, 通过注入videocomponent获得video的description属性，将返回的结果集赋值给文本属性. ",
    "AppModule: Add the ContextComponent to the AppModule declarations (We did this for you).": "AppModule:添加 ContextComponent组件到 AppModule的 declarations部分 (代码已经实现，您无需编写). ",
    "video.html: Actually display the ad (We actually also did it for you).": "video.html: 正常显示广告 (代码已经实现，您无需编写).",
    "Create a class called AppComponent": "创建AppComponent组件类",
    "Export the created class": "用export关键字，导出创建的类",
    "Add a Component decorator for the class": "为组件添加组件@Component修饰符",
    "Add a selector to the component decorator": "添加选择器selector到组件修饰符@Component中",
    "Add a template that contains: '<h1>Hello CatTube!</h1>'": "添加html模板到组件修饰符@Component中，如下内容: '<h1>Hello CatTube!</h1>'",
    "Create a class called 'AppModule'": "创建命名为 'AppModule' 的类并导出export",
    "Add a NgModule decorator for the class": "在该类上添加@NgModule修饰符",
    "Add 'BrowseModule' to the NgModule decorator imports": "在@NgModule修饰符内部导入'BrowseModule' 模块",
    "Add 'AppComponent' to the 'declarations' property of the decorator": "添加 'AppComponent' 到@NgModule修饰符的'declarations'属性中",
    "Add 'AppComponent' to the 'bootstrap' property of the decorator": "添加'AppComponent' 到@NgModule修饰符的 'bootstrap'属性",
    "VideoService.ts: Add @Injectable() decorator to the classs": "VideoService.ts:为类添加服务注入修饰符 @Injectable()",
    "Appmodule.ts: Add VideoService to the NgModule providers property": "Appmodule.ts: 将VideoService添加到NgModule的providers属性 ",
    "AppComponent.ts: Inject videoService in the component constructor": "AppComponent.ts: 在组件的构造方法中注入videoService ",
    "AppComponent.ts: When searching assign videoService.search results to the videos property of the class": "AppComponent.ts: 查找是通过videoService服务的查找search方法 videoService.search实现，并将结果赋值给类的videos属性 ",
    "Create a class called FuzzyPipe": "创建名称为 FuzzyPipe 的类",
    "Export it": "导出类",
    "Add a @Pipe() decorator": "为类添加管道 @Pipe()修饰符",
    "Set the name to fuzzy": "设置管道的名称为fuzzy",
    "Make it return '2 days ago for '${formattedDate}'": "确保它对于格式化过的日期${formattedDate}返回 2天前的日期 ",
    "AppModule: Add the FuzzyPipe to the AppModule declarations": "AppModule: 添加管道FuzzyPipe到AppModule的declarations中",
    "video.html: Use the pipe on the date.": "video.html: 在日期属性 date 上使用管道",
    "AppComponent.ts: Add a 'videos' property, set the value as empty array.": "AppComponent.ts: 添加'videos'属性，赋值为空的数组",
    "AppComponent.ts: Add a 'search' method on the component, that takes a 'searchString' parameter.": "AppComponent.ts: 为组件添加带字符串参数searchString的查找'search'方法",
    "app.html: Add a message saying 'No videos' which is displayed only when the videos array is empty": "app.html: 添加一个只有在 videos数组为空时显示的信息'No videos'",
    "app.html: Iterate over the videos using '*NgFor', and display a title for each": "app.html: 使用 '*NgFor' 循环显示结果,显示所有的对象的 title属性",
    "app.html: Also display a thumbnail": "app.html: 展示缩略图(用img标签显示video对象的 .src)",
    "#Bonus AppComponent.ts: When the component is created, trigger a search for an empty string. ": "#Bonus AppComponent.ts: 组件创建时触发一个空字符串参数的查找 search",
    "app.html: Add a <h1> header, display the 'title' property of the AppComponent inside": "app.html: 在<div>内部添加<h1>标签显示AppComponent组件的title属性",
    "app.html: Add an <input> with a 'placeholder' set to 'video' (hint: 'placeholder' is just an attribute of an input tag) ": "app.html: 添加<input>标签，设置'placeholder'属性为'video' (提示: 'placeholder' 只是input的属性标识) ",
    "app.html: Add a <button> labeled 'search'": "app.html: 添加标签为'search'的按钮",
    "thumbs.html: Add a button with a 'thumbs-up' CSS class.": "thumbs.html: 添加一个包含'thumbs-up' CSS 样式的按钮.",
    "thumbs.html: Add a button with a 'thumbs-down' CSS class.": "thumbs.html: 添加一个包含'thumbs-down' CSS 样式的按钮.",
    "ThumbsComponent.ts: Set the selector to be 'my-thumbs'.": "ThumbsComponent.ts: 设置@Component组件修饰符的selector属性为'my-thumbs'",
    "ThumbsComponent.ts: Set the templateUrl to load appropriate html file.": "ThumbsComponent.ts: 设置@Component组件修饰符的templateUrl属性为html页面.",
    "ThumbsComponent.ts: Add an 'onThumbs' property and set the value to a new EventEmitter. Decorate with @Output()": "ThumbsComponent.ts: 添加带@Output()修饰符的'onThumbs'属性，设置值为新的EventEmitter事件",
    "thumbs.html: Make the 'thumbs-up' button emit the onThumbs event with the correct thumbs ENUM value.": "thumbs.html: 'thumbs-up'按钮单击时将正确的枚举值交给onThumbs事件处理 ",
    "thumbs.html: Make the 'thumbs-down' button emit the onThumbs event with the correct thumbs ENUM value.": "thumbs.html: 'thumbs-down'按钮单击时将正确的枚举值交给onThumbs事件处理 ",
    "AppModule: Add the ThumbsComponent to the AppModule 'declarations' property": "AppModule: 添加ThumbsComponent组件到AppModule的属性'declarations'中",
    "video.html: Use the thumbs component in the template": "video.html: 在模板中使用thumbscomponent组件 ",
    "VideoComponent: Listen to the thumbs component onThumbs event, and update the amount of likes accordingly": "VideoComponent: 监听thumbscomponent的onThumbs事件,更新点赞量",
    "TogglePanelComponent.ts: We added the template and the selector for you, enjoy!": "我们已经为您添加好模板和选择器!",
    "TogglePanelComponent.ts: Add a boolean property to the component. The property can have any name, and must have a default value.": "TogglePanelComponent.ts: 在组件添加一个有默认值的布尔型的属性，名字随意（例如showDescription）",
    "togglePanel.html: Use content projection to only display the content with the selector .description by default.": "togglePanel.html: 当showDescription为真时.description就突出显示.",
    "togglePanel.html: Add a button to show extra information": "togglePanel.html: 添加一个按钮来显示额外的信息`",
    "togglePanel.html: When the button is pressed, switch the flag and only display the content with the '.extra' selector.": "togglePanel.html:点击额外信息按钮时, 只显示类为 '.extra'的选择器，同时变更showDescription值.",
    "togglePanel.html: Add a button to come back to the description": "togglePanel.html: 添加一个返回到描述description的按钮",
    "AppModule: Add the TogglePanelComponent to the AppModule declarations.": "AppModule: 添加TogglePanelComponent组件到AppModule的declarations属性中.",
    "video.html: Use the TogglePanel component in the template": "video.html: 在模板中使用TogglePanel组件",
    "video.html: Add .description as TogglePanel's content": "video.html: 向TogglePanel组件中添加 .description 样式",
    "video.html: Add .extra as TogglePanel's content": "video.html: 向TogglePanel中添加.extra 样式",
    "VideoComponent.ts: Set the selector property to 'my-video'.": "VideoComponent.ts: 添加组件@Component修饰符并设置selector属性为'my-video'",
    "VideoComponent.ts: Set the templateUrl to load the appropriate html file": "VideoComponent.ts: 在组件@Component修饰符中设置templateUrl属性为存在的html页面",
    "VideoComponent.ts: Add a video property and decorate it with @Input()": "VideoComponent.ts: 新增一个 video 属性 并用 @Input() 符号修饰",
    "Video.html: Display the video title": "Video.html: 显示 video 对象的 title 属性",
    "Video.html: Display the video thumbnail": "Video.html: 显示 video 对象的 缩略图(img) 属性",
    "Video.html: Display the video description": "Video.html: 显示 video 对象的 description 属性",
    "Video.html: Display the video date": "Video.html:显示 video 对象的 date 属性",
    "Video.html: Display the number video likes": "Video.html:显示 video 对象的点赞量 likes",
    "Video.html: Display the number of video views": "Video.html: 显示 video 对象的浏览量 views",
    "AppModule: Add the VideoComponent to the AppModule 'declarations'.": "AppModule: 添加VideoComponent到AppModule的'declarations'属性",
    "app.html: Use video component (get rid of the old title/thumbnail)": "app.html: 抛弃原有title/thumbnail的代码，使用新的video组件<my-video></my-video>替代",
    "app.html: Use the data binding to pass the video object to the component (don't forget the square brackets)": "app.html: 将 video 对象数据绑定到 VideoComponent (记住要使用方括号)",
    "Sir Isaac Newton": "Sir Isaac Newton",
    "Marie Curie": "Marie Curie ",
    "Albert Einstein": " Albert Einstein ",
    "Charles Darwin": "Charles Darwin",
    "Intro": "概述",
    "\n          <h1>Welcome to the Angular and TypeScript CodeLab!</h1>\n          <p>In this codelab we're going to learn the basics of TypeScript and Angular.</p>\n          <p>We're using Angular version 2.1.0</p>\n          <p>The slides for the codelab are available using\n          <a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">here</a>.</p>                 \n        ": " <h1>欢迎使用Angular2和TypeScript教程!</h1>\n          <p>在本教程中我们将学习TypeScript和Angular2的基础知识.</p>\n          <p>本教程使用的Angular是2.1.0版本</p>\n          <p>您可以从下面的链接找到相应的英文原版PPT(暂未翻译)\n          <a href = \"https://docs.google.com/presentation/d/1Wh4ZwTKG1h66f3mTD4GQO8rKwGDEJeBSvUDJ3udU1LA/edit?usp=sharing\">PPT链接</a>.</p>                 ",
    "Typescript": "Typescript",
    "\n          <p>We created a TypeScript file for you, now let's add our first TS class\n           called Codelab.</p>\n          \n          <p>It will take a list of guests, and will have a 'getGuestsComing' method, which will only return people who're coming.</p> \n          <p>As you can see in the 'Main.ts' file we have 4 people signed up, but Charles Darwin had a last minute change of plans, \n          so only 3 people should be returned.</p>            \n        ": "<p>首先在我们创建的TypeScript文件中(注意：TypeScript文件后缀为.ts)添加一个Codelab类\n           </p>          \n          <p>在当前TypeScript文件中有一个guests常量数组, 包含一个返回“谁将会来了”的 'getGuestsComing' 方法</p> \n          <p>在 'Main.ts' 有4个人准备来, 但是Charles Darwin在最后却决定不来了, \n          所以只有3个人能够来.</p>",
    "Bootstrapping your app": "开始您的程序",
    "\n          <h1>Let's build our first Angular app!</h1>\n          <p>This is how it will look:</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <h1>Hello CatTube!</h1>\n            </div>\n          </div>\n          <p>3 simple steps: </p>\n          <ol>\n            <li>Create a Component</li>\n            <li>Create a NgModule</li>\n            <li>Bootstrap the NgModule</li>\n          </ol>\n        ": " <h1>编写您的第一个Angular2程序!</h1>\n          <p>如下图：</p>\n\n <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <h1>Hello CatTube!</h1>\n            </div>\n          </div>\n          <p>3 simple steps: </p>\n          <ol>\n            <li>Create a Component</li>\n            <li>Create a NgModule</li>\n            <li>Bootstrap the NgModule</li>\n          </ol>",
    "Create a component": "创建组件",
    "\n            <p>Let's create our first component!</p>": "<p>创建第一个组件!</p>",
    "Create a NgModule": "创建NgModule",
    "Now we got the component, we need to pass it to a NgModule.": "当组件创建完成后，我们需要创建 NgModule.",
    "Bootstrap the module": "启动程序",
    "\n          <p>Now we got both NgModule and component ready, let's bootstrap the app!</p>\n          <p>There's no  simple way to test it,  make sure your app displays: 'Hello CatTube!'</p>": " <p>创建好组件和NgModule后，我们就可以通过bootstrap启动程序!</p>\n          <p>此处没有太好的测试方法，所以我们只能让程序显示 'Hello CatTube!'</p>`",
    "Templates": "模板",
    "\n          <h1>Let's explore Angular templates!</h1>\n          <p>As a result we'll see our cats displayed.</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img src=\"/assets/images/cat-2.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n        ": "    <h1>了解Angular的模板!</h1>\n          <p>如下图.</p>\n          \n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>              \n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img src=\"/assets/images/cat-2.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n",
    "Set up the page": "创建页面",
    "Let's setup a header, a search box, and a search button in the app component!": "在组件中加入一个header标签, 一个input文本框和一个查找按钮button !",
    "Add some action": "添加事件",
    "Let's do two things here:\n              <ul>\n              <li>Add a search method to the AppComponent</li>\n              <li>Display a message when there are no videos.</li>": "主要做以下2件事情: \n              <ul>\n              <li>在AppComponent中添加一个查找方法</li>\n              <li>当video对象为空时，进行适当提示</li>",
    "Display all videos": "展示所有videos",
    "Finally let's iterate over the videos.": "最终循环显示所有videos",
    "Dependency Injection": "依赖注入",
    "\n          <h1>Let's inject a service.</h1>\n          <p>Using a service is way better than hardcoded data. As a result we get even more cats.</p>\n\n          <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <input placeholder=\"video\" type=\"text\">\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img  src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>More kitten</h2>\n                  <img  src=\"/assets/images/cat-2.jpg\">\n                </div><div>\n                  <h2>Another kitten</h2>\n                  <img  src=\"/assets/images/cat-3.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-4.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-5.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-6.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>\n\n        ": " <h1>开始注入服务.</h1>\n          <p>使用服务好处是减少硬编码的耦合性，无需在对象中new引用的对象，并且我们能及时获得更多数据.</p>\n <div class = \"inBrowser\">\n            <div class=\"smaller\">\n              <my-app><div>\n                <h1>CatTube</h1>\n                <input placeholder=\"video\" type=\"text\">\n                <button>Search!</button>\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                </div><div>\n                  <h2>Kitten on the tree</h2>\n                  <img  src=\"/assets/images/cat-1.jpg\">\n                </div><div>\n                  <h2>More kitten</h2>\n                  <img  src=\"/assets/images/cat-2.jpg\">\n                </div><div>\n                  <h2>Another kitten</h2>\n                  <img  src=\"/assets/images/cat-3.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-4.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-5.jpg\">\n                </div><div>\n                  <h2>Serouis cat</h2>\n                  <img  src=\"/assets/images/cat-6.jpg\">\n                </div>\n              </div></my-app>\n            </div>\n          </div>",
    "Service injection": "服务注入",
    "\n          Let's fetch the videos using a service, instead of having them hardcoded.\n        ": "我们使用服务替代硬编码来循环videos对象",
    "Component Tree": "组件集合",
    "\n          <h1>Let's create a Video component!</h1>\n          <p>Create a separate component with the video information.</p>\n          <p>Add description, amount of views and likes. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                </div>\n              </div>\n            </div>\n        ": " <h1>创建一个Video组件!</h1>\n          <p>用Video的对象创建一个独立的组件.</p>\n          <p>为组件添加描述description, 浏览量Views和点赞量likes. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                </div>\n              </div>\n            </div>  ",
    "Create VideoComponent": "创建VideoComponent组件",
    "Create a video component.": "创建一个 video component",
    "Use VideoComponent": "使用VideComponent组件",
    "Use the VideoComponent in the app.": "在程序中使用VideoComponent组件",
    "Custom events": "自定义事件",
    "\n          <h1>Let's use custom events!</h1>\n          <p>Add a ThumbsComponent which will emit an 'onThumbs' event.  </p>\n          <p>In the video component listen to the event and change the amount of likes accordingly.</p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>\n        ": "<h1>使用自定义事件!</h1>\n          <p>添加一个可以触发'onThumbs'事件的ThumbsComponent组件 </p>\n          <p>video组件将监听ThumbsComponent组件的onThumbs事件来改变点赞量.</p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Date 2016-11-25</div>\n                  <div>Views 100</div>\n                  <div>Likes 20</div>\n                  <div>Description todo</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>         ",
    "Create ThumbsComponent": "创建ThumbsComponent组件",
    "Create ThumbsComponent.": "创建ThumbsComponent组件",
    "Use ThumbsComponent": "使用ThumbsComponent组件",
    "Use the 'ThumbsComponent' in the app.": "在程序中使用ThumbsComponent组件",
    "Content projection": "内容突出显示",
    "\n          <h1>Let's project some content!</h1>\n          <p>In this milestone we'll create a component called 'TogglePanel'</p>\n          <p>It will actually take 2 divs, but only display one at a time. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">\n                  <div>This is the description. Once you click 'show meta' button it will be gone.  (please don't try clicking it here, I'm just a screenshot)</div>\n                  <div>[Show meta]</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>\n\n            <p>So when you click the 'Show meta button', description is gone, likes and views are displayed instead.</p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Likes: 1000</div>\n                  <div>Views: 1000000</div>\n                  <div>[Show description]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>\n        ": " <p>在本节我们创建一个命名为'TogglePanel'的组件</p>\n          <p>这个组件实际上有2个div，但是我们每次始终只显示一个div. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img src=\"/assets/images/cat-0.png\">            \n                  <div>This is the description. Once you click 'show meta' button it will be gone.  (please don't try clicking it here, I'm just a screenshot)</div>\n                  <div>[Show meta]</div>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                </div>\n              </div>\n            </div>               \n              \n            <p>当我们点击'Show meta'按钮，描述div被隐藏，点赞和浏览div显示.</p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten</h2>\n                  <img  src=\"/assets/images/cat-0.png\">            \n                  <div>Likes: 1000</div>\n                  <div>Views: 1000000</div>\n                  <div>[Show description]</div>\n                  <button>[Thumbs Up]</button> <button>[Thumbs Down]</button>\n                </div>\n              </div>\n            </div>      ",
    "Add TogglePanelComponent": "添加可折叠面板组件TogglePanelComponent",
    "Let's create a component which will use content projection to toggle between description and meta information. ": "使用内容突出展示创建一个可以在描述div和点赞/浏览div之间切换的组件",
    "Use TogglePanelComponent": "使用可折叠面板组件TogglePanelComponent",
    "Now let's use the component.": "现在我们开始使用该组件",
    "Parent-container": "父类容器",
    "\n          <h1>Let's inject parent component!</h1>\n          <p>In this milestone we'll create create a ContextAdComponent. </p>\n          <p>This component will not use inputs. Instead it will require parent (Video) component and directly look at it's properties. </p>\n          <p>It will display different text depending of if there's a word 'music' in the description. </p>\n\n            <div class = \"inBrowser\">\n              <div class=\"smaller\">\n                <div>\n                  <h2>Cute kitten dancing</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Decription: music</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Turn up your speakers</div>\n                </div>\n                <div>\n                  <h2>Cute kitten sleeping</h2>\n                  <img  src=\"/assets/images/cat-0.png\">\n                  <div>Decription: sleeping</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Check out our web site.</div>\n                </div>\n              </div>\n            </div>\n\n             <p>Note, we are actually calling it ContextComponent, because when it was called ContextAdComponent, adblock blocked it, and I spent 2 hours debugging. </p>\n\n\n        ": " <h1>现在注入父类组件!</h1>\n          <p>在这节我们将创建一个上下文的广告组件ContextAdComponent. </p>\n          <p>这个组件直接用VideoComponent组件做为父类组件代替input属性. </p>\n          <p>假如描述description中包括music串的话，它会显示不同的内容. </p>\n              \n            <div class = \"inBrowser\">\n              <div class=\"smaller\">   \n                <div>\n                  <h2>Cute kitten dancing</h2>\n                  <img  src=\"/assets/images/cat-0.png\">            \n                  <div>Decription: music</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Turn up your speakers</div>                  \n                </div>\n                <div>\n                  <h2>Cute kitten sleeping</h2>\n                  <img  src=\"/assets/images/cat-0.png\">            \n                  <div>Decription: sleeping</div>\n                  <button>Show meta</button>\n                  <button>Thumbs Up</button> <button>Thumbs Down</button>\n                  <div>Context ad: Check out our web site.</div>                  \n                </div>\n              </div>\n            </div>          \n                 \n             <p>注意： 我们实际是调用的ContextComponent组件，因为adblock会阻止对ContextAdComponent的调用，kirill浪费了2个小时调试. </p>\n              ",
    "Inject parent component": "注入父组件",
    "<p>Create a Context(Ad)Component</p>\n            <p>which will inject it's parent component, see what thedescription, and display the value accordingly.</p>\n            <p>Note: We had to get rid of the 'Ad' part of the component, because AdBlock blocked the template.</p>": "<p>Create a Context(Ad)Component</p>\n            <p>which will inject it's parent component, see what thedescription, and display the value accordingly.</p>\n            <p>Note: We had to get rid of the 'Ad' part of the component, because AdBlock blocked the template.</p> ",
    "Pipes": "管道",
    "Create a pipe": "创建管道",
    "Create a fuzzy pipe, which takes a date in YYYY-MM-DD format, and returns how many days ago this was.": "创建一个通过格式化(YYYY-MM-DD)的日期返回几天前的fuzzy管道",
    "Use the pipe": "使用管道",
    "Now include the app in the module and use in the app.": "在程序中使用管道，需要将管道包括在module中",
    "Survey": "问卷调查",
    "All done!": "结束",
    "\n        Please fill out <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">The survey</a>\n        (which is different from the feedback form)\n        ": "请帮助填写问卷(请到墙外) <a href = \"https://docs.google.com/forms/d/1lGPvmCftArLXVuJkO6L7sXZiqIDj-DtiPM0MQJXLJTA/edit\">在线调查</a>\n        (注意：这不同于反馈！)"
}